
kickboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b4  00800100  00002952  000029e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  008003b4  008003b4  00002c9a  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00002c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00003920  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000328  00000000  00000000  00003ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f8e  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c69  00000000  00000000  00007d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ad6  00000000  00000000  000099f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000094c  00000000  00000000  0000b4d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d9  00000000  00000000  0000be1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002928  00000000  00000000  0000c6f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000f01d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_1>
       8:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__vector_2>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_25>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e2 e5       	ldi	r30, 0x52	; 82
      a8:	f9 e2       	ldi	r31, 0x29	; 41
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a4 3b       	cpi	r26, 0xB4	; 180
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	14 e0       	ldi	r17, 0x04	; 4
      bc:	a4 eb       	ldi	r26, 0xB4	; 180
      be:	b3 e0       	ldi	r27, 0x03	; 3
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ac 35       	cpi	r26, 0x5C	; 92
      c6:	b1 07       	cpc	r27, r17
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <main>
      ce:	0c 94 a7 14 	jmp	0x294e	; 0x294e <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <itoa>:

char                    *msg = NULL;

char *
itoa(int i, char *s)
{
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <itoa+0x6>
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
    sprintf(s, "%d", i);
      e0:	00 d0       	rcall	.+0      	; 0xe2 <itoa+0xc>
      e2:	00 d0       	rcall	.+0      	; 0xe4 <itoa+0xe>
      e4:	00 d0       	rcall	.+0      	; 0xe6 <itoa+0x10>
      e6:	ed b7       	in	r30, 0x3d	; 61
      e8:	fe b7       	in	r31, 0x3e	; 62
      ea:	31 96       	adiw	r30, 0x01	; 1
      ec:	ad b7       	in	r26, 0x3d	; 61
      ee:	be b7       	in	r27, 0x3e	; 62
      f0:	11 96       	adiw	r26, 0x01	; 1
      f2:	6c 93       	st	X, r22
      f4:	71 83       	std	Z+1, r23	; 0x01
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	31 e0       	ldi	r19, 0x01	; 1
      fa:	33 83       	std	Z+3, r19	; 0x03
      fc:	22 83       	std	Z+2, r18	; 0x02
      fe:	95 83       	std	Z+5, r25	; 0x05
     100:	84 83       	std	Z+4, r24	; 0x04
     102:	69 83       	std	Y+1, r22	; 0x01
     104:	7a 83       	std	Y+2, r23	; 0x02
     106:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <sprintf>
    return s;
     10a:	ed b7       	in	r30, 0x3d	; 61
     10c:	fe b7       	in	r31, 0x3e	; 62
     10e:	36 96       	adiw	r30, 0x06	; 6
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	fe bf       	out	0x3e, r31	; 62
     116:	0f be       	out	0x3f, r0	; 63
     118:	ed bf       	out	0x3d, r30	; 61
}
     11a:	69 81       	ldd	r22, Y+1	; 0x01
     11c:	86 2f       	mov	r24, r22
     11e:	7a 81       	ldd	r23, Y+2	; 0x02
     120:	97 2f       	mov	r25, r23
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	08 95       	ret

0000012c <udelay>:

void
udelay(unsigned int usecs)
{
    unsigned int i;
    for (i = 0; i < usecs; i++) {   // 4 cycle
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	08 c0       	rjmp	.+16     	; 0x142 <udelay+0x16>
        asm("PUSH R0");             // + 2 cycle
     132:	0f 92       	push	r0
        asm("POP R0");              // + 2 cycle
     134:	0f 90       	pop	r0
        asm("PUSH R0");             // + 2 cycle
     136:	0f 92       	push	r0
        asm("POP R0");              // + 2 cycle = 12 cycle : 1 us for 11.0592 MHz 
     138:	0f 90       	pop	r0
        asm("PUSH R0");             // + 2 cycle
     13a:	0f 92       	push	r0
        asm("POP R0");              // + 2 cycle = 16 cycle : 1 us for 16 MHz
     13c:	0f 90       	pop	r0

void
udelay(unsigned int usecs)
{
    unsigned int i;
    for (i = 0; i < usecs; i++) {   // 4 cycle
     13e:	2f 5f       	subi	r18, 0xFF	; 255
     140:	3f 4f       	sbci	r19, 0xFF	; 255
     142:	28 17       	cp	r18, r24
     144:	39 07       	cpc	r19, r25
     146:	a9 f7       	brne	.-22     	; 0x132 <udelay+0x6>
        asm("PUSH R0");             // + 2 cycle
        asm("POP R0");              // + 2 cycle = 12 cycle : 1 us for 11.0592 MHz 
        asm("PUSH R0");             // + 2 cycle
        asm("POP R0");              // + 2 cycle = 16 cycle : 1 us for 16 MHz
    }
}
     148:	08 95       	ret

0000014a <_LCD_pulse>:
#define                 LCD_clear()            ( LCD_cmd(0x01) )

static void
_LCD_pulse(void)
{
    on(PORTG, _LCD_E);
     14a:	a2 9a       	sbi	0x14, 2	; 20
    udelay(100);
     14c:	84 e6       	ldi	r24, 0x64	; 100
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 96 00 	call	0x12c	; 0x12c <udelay>
    off(PORTG, _LCD_E);
     154:	a2 98       	cbi	0x14, 2	; 20
}
     156:	08 95       	ret

00000158 <_LCD_seek>:
}

static void
_LCD_seek(char row, char col)
{
    off(PORTG, _LCD_RS | _LCD_RW);
     158:	94 b3       	in	r25, 0x14	; 20
     15a:	9c 7f       	andi	r25, 0xFC	; 252
     15c:	94 bb       	out	0x14, r25	; 20

    if (row == 0)
     15e:	88 23       	and	r24, r24
     160:	11 f4       	brne	.+4      	; 0x166 <_LCD_seek+0xe>
        PORTC = col + 0x80;
     162:	60 58       	subi	r22, 0x80	; 128
     164:	03 c0       	rjmp	.+6      	; 0x16c <_LCD_seek+0x14>
    else if (row == 1)
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	11 f4       	brne	.+4      	; 0x16e <_LCD_seek+0x16>
        PORTC = col + 0xC0;
     16a:	60 54       	subi	r22, 0x40	; 64
     16c:	68 b9       	out	0x08, r22	; 8
    _LCD_pulse();
     16e:	0e 94 a5 00 	call	0x14a	; 0x14a <_LCD_pulse>
}
     172:	08 95       	ret

00000174 <_LCD_writec>:
}

static void
_LCD_writec(unsigned char c)
{
    on(PORTG, _LCD_RS), off(PORTG, _LCD_RW);
     174:	a0 9a       	sbi	0x14, 0	; 20
     176:	a1 98       	cbi	0x14, 1	; 20

    PORTC = c;
     178:	88 b9       	out	0x08, r24	; 8
    _LCD_pulse();
     17a:	0e 94 a5 00 	call	0x14a	; 0x14a <_LCD_pulse>
}
     17e:	08 95       	ret

00000180 <mdelay>:

void
mdelay(unsigned int msecs)
{
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	8c 01       	movw	r16, r24
    unsigned int i;
    for (i = 0; i < msecs; i++)
     18a:	c0 e0       	ldi	r28, 0x00	; 0
     18c:	d0 e0       	ldi	r29, 0x00	; 0
     18e:	05 c0       	rjmp	.+10     	; 0x19a <mdelay+0x1a>
        udelay(1000);
     190:	88 ee       	ldi	r24, 0xE8	; 232
     192:	93 e0       	ldi	r25, 0x03	; 3
     194:	0e 94 96 00 	call	0x12c	; 0x12c <udelay>

void
mdelay(unsigned int msecs)
{
    unsigned int i;
    for (i = 0; i < msecs; i++)
     198:	21 96       	adiw	r28, 0x01	; 1
     19a:	c0 17       	cp	r28, r16
     19c:	d1 07       	cpc	r29, r17
     19e:	c1 f7       	brne	.-16     	; 0x190 <mdelay+0x10>
        udelay(1000);
}
     1a0:	df 91       	pop	r29
     1a2:	cf 91       	pop	r28
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	08 95       	ret

000001aa <SW_enable_int>:
/* Switch */

void
SW_enable_int(void)
{
    on(EIMSK, _BV(INT1) | _BV(INT0));       // INT0, INT1 인터럽트 활성화
     1aa:	8d b3       	in	r24, 0x1d	; 29
     1ac:	83 60       	ori	r24, 0x03	; 3
     1ae:	8d bb       	out	0x1d, r24	; 29
    off(EICRA, 0x0F), on(EICRA, 0x0A);      // 하강 에지(누른 상태)에서 인터럽트
     1b0:	e9 e6       	ldi	r30, 0x69	; 105
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	80 7f       	andi	r24, 0xF0	; 240
     1b8:	80 83       	st	Z, r24
     1ba:	80 81       	ld	r24, Z
     1bc:	8a 60       	ori	r24, 0x0A	; 10
     1be:	80 83       	st	Z, r24
    sei();
     1c0:	78 94       	sei
}
     1c2:	08 95       	ret

000001c4 <SW_init>:

void
SW_init(void)
{
    // init port : PD1 - SW 2, PD0 - SW 1
    off(DDRD, 0x03);                        
     1c4:	8a b1       	in	r24, 0x0a	; 10
     1c6:	8c 7f       	andi	r24, 0xFC	; 252
     1c8:	8a b9       	out	0x0a, r24	; 10
    on(PORTD, 0x03);                        // PD0, PD1 풀업 저항 사용
     1ca:	8b b1       	in	r24, 0x0b	; 11
     1cc:	83 60       	ori	r24, 0x03	; 3
     1ce:	8b b9       	out	0x0b, r24	; 11
}
     1d0:	08 95       	ret

000001d2 <LED_init>:

void
LED_init(void)
{
    // PB7 - LED
    on(DDRB, 0x80);
     1d2:	27 9a       	sbi	0x04, 7	; 4
	LED_off();
     1d4:	2f 9a       	sbi	0x05, 7	; 5
}
     1d6:	08 95       	ret

000001d8 <LCD_cmd>:
}

void
LCD_cmd(unsigned char cmd)
{
    off(PORTG, _LCD_RS | _LCD_RW);
     1d8:	94 b3       	in	r25, 0x14	; 20
     1da:	9c 7f       	andi	r25, 0xFC	; 252
     1dc:	94 bb       	out	0x14, r25	; 20
    
    PORTC = cmd;
     1de:	88 b9       	out	0x08, r24	; 8
    _LCD_pulse();
     1e0:	0e 94 a5 00 	call	0x14a	; 0x14a <_LCD_pulse>
}
     1e4:	08 95       	ret

000001e6 <LCD_init>:

void
LCD_init(void)
{
    // init port : PG3/1/0, PC[7:0]
    on(DDRG, _LCD_E | _LCD_RW | _LCD_RS);
     1e6:	83 b3       	in	r24, 0x13	; 19
     1e8:	87 60       	ori	r24, 0x07	; 7
     1ea:	83 bb       	out	0x13, r24	; 19
    on(DDRC, 0xff);
     1ec:	87 b1       	in	r24, 0x07	; 7
     1ee:	8f ef       	ldi	r24, 0xFF	; 255
     1f0:	87 b9       	out	0x07, r24	; 7

    mdelay(40);
     1f2:	88 e2       	ldi	r24, 0x28	; 40
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 c0 00 	call	0x180	; 0x180 <mdelay>
    
    PORTC = 0x38;   // function set
     1fa:	88 e3       	ldi	r24, 0x38	; 56
     1fc:	88 b9       	out	0x08, r24	; 8
    _LCD_pulse();
     1fe:	0e 94 a5 00 	call	0x14a	; 0x14a <_LCD_pulse>
    udelay(40);
     202:	88 e2       	ldi	r24, 0x28	; 40
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 96 00 	call	0x12c	; 0x12c <udelay>

    PORTC = 0x0C;   // display ON/OFF control
     20a:	8c e0       	ldi	r24, 0x0C	; 12
     20c:	88 b9       	out	0x08, r24	; 8
    udelay(40);
     20e:	88 e2       	ldi	r24, 0x28	; 40
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 96 00 	call	0x12c	; 0x12c <udelay>
    _LCD_pulse();
     216:	0e 94 a5 00 	call	0x14a	; 0x14a <_LCD_pulse>

    PORTC = 0x01;   // clear display
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	88 b9       	out	0x08, r24	; 8
    mdelay(2);
     21e:	82 e0       	ldi	r24, 0x02	; 2
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 c0 00 	call	0x180	; 0x180 <mdelay>
    _LCD_pulse();
     226:	0e 94 a5 00 	call	0x14a	; 0x14a <_LCD_pulse>

    PORTC = 0x06;   // entry mode set
     22a:	86 e0       	ldi	r24, 0x06	; 6
     22c:	88 b9       	out	0x08, r24	; 8
    _LCD_pulse();
     22e:	0e 94 a5 00 	call	0x14a	; 0x14a <_LCD_pulse>

	// clear
	LCD_clear();
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
	mdelay(50);
     238:	82 e3       	ldi	r24, 0x32	; 50
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 c0 00 	call	0x180	; 0x180 <mdelay>
}
     240:	08 95       	ret

00000242 <LCD_puts>:
    _LCD_pulse();
}

void
LCD_puts(char row, char col, char *s)
{
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	00 d0       	rcall	.+0      	; 0x250 <LCD_puts+0xe>
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	06 2f       	mov	r16, r22
    int i;
    _LCD_seek(row, col);
     256:	49 83       	std	Y+1, r20	; 0x01
     258:	5a 83       	std	Y+2, r21	; 0x02
     25a:	0e 94 ac 00 	call	0x158	; 0x158 <_LCD_seek>
     25e:	49 81       	ldd	r20, Y+1	; 0x01
     260:	5a 81       	ldd	r21, Y+2	; 0x02
    for (i = 0; s[i] && (col + i < 16); i++)
     262:	e4 2e       	mov	r14, r20
     264:	f5 2e       	mov	r15, r21
        PORTC = col + 0xC0;
    _LCD_pulse();
}

void
LCD_puts(char row, char col, char *s)
     266:	10 e0       	ldi	r17, 0x00	; 0
     268:	0e 19       	sub	r16, r14
     26a:	1f 09       	sbc	r17, r15
{
    int i;
    _LCD_seek(row, col);
    for (i = 0; s[i] && (col + i < 16); i++)
     26c:	05 c0       	rjmp	.+10     	; 0x278 <LCD_puts+0x36>
        _LCD_writec(s[i]);
     26e:	0e 94 ba 00 	call	0x174	; 0x174 <_LCD_writec>
     272:	08 94       	sec
     274:	e1 1c       	adc	r14, r1
     276:	f1 1c       	adc	r15, r1
void
LCD_puts(char row, char col, char *s)
{
    int i;
    _LCD_seek(row, col);
    for (i = 0; s[i] && (col + i < 16); i++)
     278:	f7 01       	movw	r30, r14
     27a:	80 81       	ld	r24, Z
     27c:	88 23       	and	r24, r24
     27e:	31 f0       	breq	.+12     	; 0x28c <LCD_puts+0x4a>
        PORTC = col + 0xC0;
    _LCD_pulse();
}

void
LCD_puts(char row, char col, char *s)
     280:	98 01       	movw	r18, r16
     282:	2e 0d       	add	r18, r14
     284:	3f 1d       	adc	r19, r15
{
    int i;
    _LCD_seek(row, col);
    for (i = 0; s[i] && (col + i < 16); i++)
     286:	20 31       	cpi	r18, 0x10	; 16
     288:	31 05       	cpc	r19, r1
     28a:	8c f3       	brlt	.-30     	; 0x26e <LCD_puts+0x2c>
        _LCD_writec(s[i]);
    /*_LCD_seek(row, col);
    while (*s)
        _LCD_writec(*s++);*/
}
     28c:	0f 90       	pop	r0
     28e:	0f 90       	pop	r0
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	0f 91       	pop	r16
     298:	ff 90       	pop	r15
     29a:	ef 90       	pop	r14
     29c:	08 95       	ret

0000029e <LCD_cll_puts>:

void
LCD_cll_puts(char row, char col, char *s)   // clear line and put string
{
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	18 2f       	mov	r17, r24
     2a8:	06 2f       	mov	r16, r22
     2aa:	ea 01       	movw	r28, r20
    LCD_puts(row, 0, "                ");
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	43 e0       	ldi	r20, 0x03	; 3
     2b0:	51 e0       	ldi	r21, 0x01	; 1
     2b2:	0e 94 21 01 	call	0x242	; 0x242 <LCD_puts>
    LCD_puts(row, col, s);
     2b6:	81 2f       	mov	r24, r17
     2b8:	60 2f       	mov	r22, r16
     2ba:	ae 01       	movw	r20, r28
     2bc:	0e 94 21 01 	call	0x242	; 0x242 <LCD_puts>
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <LCD_cls_puts>:
#define                 LCD_clear_line(row)    ( LCD_puts((row), 0, "                ") )

void
LCD_cls_puts(char row, char col, char *s)   // clear all screen and put string
{
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	0f 92       	push	r0
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	18 2f       	mov	r17, r24
     2dc:	7a 01       	movw	r14, r20
    LCD_clear();
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	69 83       	std	Y+1, r22	; 0x01
     2e2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <LCD_cmd>
    LCD_puts(row, col, s);
     2e6:	81 2f       	mov	r24, r17
     2e8:	69 81       	ldd	r22, Y+1	; 0x01
     2ea:	a7 01       	movw	r20, r14
     2ec:	0e 94 21 01 	call	0x242	; 0x242 <LCD_puts>
}
     2f0:	0f 90       	pop	r0
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	1f 91       	pop	r17
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	08 95       	ret

000002fe <LCD_putc>:

void
LCD_putc(char row, char col, char c)
{
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	0f 92       	push	r0
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
    _LCD_seek(row, col);
     308:	49 83       	std	Y+1, r20	; 0x01
     30a:	0e 94 ac 00 	call	0x158	; 0x158 <_LCD_seek>
    _LCD_writec(c);
     30e:	49 81       	ldd	r20, Y+1	; 0x01
     310:	84 2f       	mov	r24, r20
     312:	0e 94 ba 00 	call	0x174	; 0x174 <_LCD_writec>
}
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <ADC_init>:
    DIDR0 = 0x03;           // 디지털 입력 불가 PortF[3..0]

    on(ADCSRA, _BV(ADEN) | _BV(ADSC) | _BV(ADIE));
    // ADC 인에이블, ADC 변환 시작, ADC인터럽트 인에이블 
    // ADC 클럭 설정; XTAL의1/2(8MHz)*/
    ADMUX = 0x40;   // ��������; �ܺ� ĳ�۽��� ���� AVcc(AREF ��)
     31e:	80 e4       	ldi	r24, 0x40	; 64
     320:	80 93 7c 00 	sts	0x007C, r24
                    // AD��ȯ ������ ����; ������ ���� 
                    // AD��ȯ ä�� ����; PortF 0 ��    

    DDRF = 0xf0;    // PortF[3..0] �Է����� ����, PortF[7..4] ������� ���� 
     324:	80 ef       	ldi	r24, 0xF0	; 240
     326:	80 bb       	out	0x10, r24	; 16
    DIDR0 = 0x0f;   // ������ �Է� �Ұ� PortF[3..0]
     328:	8f e0       	ldi	r24, 0x0F	; 15
     32a:	80 93 7e 00 	sts	0x007E, r24

    ADCSRA = 0xc8;  // ADC �ο��̺�, ADC ��ȯ ����, ADC���ͷ�Ʈ �ο��̺� 
     32e:	88 ec       	ldi	r24, 0xC8	; 200
     330:	80 93 7a 00 	sts	0x007A, r24
                    // ADC Ŭ�� ����; XTAL��1/2(8MHz)
    sei();
     334:	78 94       	sei
}
     336:	08 95       	ret

00000338 <__vector_25>:


ISR(ADC_vect)
{
     338:	1f 92       	push	r1
     33a:	0f 92       	push	r0
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	0f 92       	push	r0
     340:	11 24       	eor	r1, r1
     342:	8f 93       	push	r24
     344:	9f 93       	push	r25
    ADC_data = ADC;
     346:	80 91 78 00 	lds	r24, 0x0078
     34a:	90 91 79 00 	lds	r25, 0x0079
     34e:	90 93 c6 03 	sts	0x03C6, r25
     352:	80 93 c5 03 	sts	0x03C5, r24
    ADCSRA = 0xc8;      //on(ADCSRA, _BV(ADSC));
     356:	88 ec       	ldi	r24, 0xC8	; 200
     358:	80 93 7a 00 	sts	0x007A, r24
}
     35c:	9f 91       	pop	r25
     35e:	8f 91       	pop	r24
     360:	0f 90       	pop	r0
     362:	0f be       	out	0x3f, r0	; 63
     364:	0f 90       	pop	r0
     366:	1f 90       	pop	r1
     368:	18 95       	reti

0000036a <URT1_init>:
{
    // PD3/2
    //on(DDRD, _URT1_TX);
    //off(DDRD, _URT1_RX);                    // INT2, INT3 사용 불가능

    UCSR1A = 0x00;                          // serial states clear
     36a:	10 92 c8 00 	sts	0x00C8, r1

    UCSR1B = (_BV(RXEN1) | _BV(TXEN1));     // 0x18: 송수신 활성화
     36e:	e9 ec       	ldi	r30, 0xC9	; 201
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	88 e1       	ldi	r24, 0x18	; 24
     374:	80 83       	st	Z, r24

    UCSR1B |= _BV(RXCIE1);                  // 수신 완료 인터럽트 허용
     376:	80 81       	ld	r24, Z
     378:	80 68       	ori	r24, 0x80	; 128
     37a:	80 83       	st	Z, r24
    //안 됨 - 인터럽트 말고는 다 먹통되는 듯 : UCSR1B |= _BV(UDRIE1);                  // 송신 데이터 레지스터 준비 완료 인터럽트 허용
    sei();
     37c:	78 94       	sei
   
    // 비동기(UMSEL1 = 0), 패리티 없음(UPM1[1:0] = 00), 1비트 정지 비트(USBS1 = 0)
    UCSR1C = (_BV(UCSZ11) | _BV(UCSZ10));   // 0x06: 8비트 데이터
     37e:	86 e0       	ldi	r24, 0x06	; 6
     380:	80 93 ca 00 	sts	0x00CA, r24
    
    UBRR1H = 0;
     384:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = 103;                           // 16MHz 9600bps set
     388:	87 e6       	ldi	r24, 0x67	; 103
     38a:	80 93 cc 00 	sts	0x00CC, r24
}
     38e:	08 95       	ret

00000390 <URT1_putc>:

void
URT1_putc(unsigned char c)
{
    while (!(UCSR1A & _BV(UDRE1)));       // 송신 가능 대기
     390:	90 91 c8 00 	lds	r25, 0x00C8
     394:	95 ff       	sbrs	r25, 5
     396:	fc cf       	rjmp	.-8      	; 0x390 <URT1_putc>
	UDR1 = c;                               // 데이터 전송
     398:	80 93 ce 00 	sts	0x00CE, r24
}
     39c:	08 95       	ret

0000039e <_URT1_std_putc>:
/* file type */

#define                 URT1_RX             0x04
static int
_URT1_std_putc(char c, FILE *stream)
{
     39e:	cf 93       	push	r28
     3a0:	c8 2f       	mov	r28, r24
    if (c == '\n')
     3a2:	8a 30       	cpi	r24, 0x0A	; 10
     3a4:	19 f4       	brne	.+6      	; 0x3ac <_URT1_std_putc+0xe>
		URT1_putc('\r');
     3a6:	8d e0       	ldi	r24, 0x0D	; 13
     3a8:	0e 94 c8 01 	call	0x390	; 0x390 <URT1_putc>
    URT1_putc(c);
     3ac:	8c 2f       	mov	r24, r28
     3ae:	0e 94 c8 01 	call	0x390	; 0x390 <URT1_putc>
	return c;
}
     3b2:	8c 2f       	mov	r24, r28
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	cf 91       	pop	r28
     3b8:	08 95       	ret

000003ba <URT1_getc>:
}
/* ISR(USART1_UDRE_vect) {} */
char
URT1_getc()
{
    while (!(UCSR1A & _BV(RXC1)));         // 데이터 수신 대기
     3ba:	80 91 c8 00 	lds	r24, 0x00C8
     3be:	87 ff       	sbrs	r24, 7
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <URT1_getc>
	return UDR1;
     3c2:	80 91 ce 00 	lds	r24, 0x00CE
}
     3c6:	08 95       	ret

000003c8 <_URT1_std_getc>:
	return c;
}
static int
_URT1_std_getc(FILE *stream)
{
	return (int)URT1_getc();
     3c8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <URT1_getc>
}
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <URT1_puts>:
}
/* ISR(USART1_RX_vect) {} */

void
URT1_puts(char *s)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
    while (*s)
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <URT1_puts+0xc>
		URT1_putc(*s++);
     3d8:	0e 94 c8 01 	call	0x390	; 0x390 <URT1_putc>
/* ISR(USART1_RX_vect) {} */

void
URT1_puts(char *s)
{
    while (*s)
     3dc:	89 91       	ld	r24, Y+
     3de:	88 23       	and	r24, r24
     3e0:	d9 f7       	brne	.-10     	; 0x3d8 <URT1_puts+0x8>
		URT1_putc(*s++);
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <can_init>:
//***************************************************************
void can_init (char baudRate)	// CAN초기화 
{
	unsigned char i, j;
	
	CANGCON |= (1<<SWRES);	// CAN 제어기 리셋
     3e8:	90 91 d8 00 	lds	r25, 0x00D8
     3ec:	91 60       	ori	r25, 0x01	; 1
     3ee:	90 93 d8 00 	sts	0x00D8, r25
							// CAN General Control Register
  							
	//보레이트 설정 ==============================================
	switch(baudRate){
     3f2:	83 30       	cpi	r24, 0x03	; 3
     3f4:	89 f0       	breq	.+34     	; 0x418 <can_init+0x30>
     3f6:	84 30       	cpi	r24, 0x04	; 4
     3f8:	28 f4       	brcc	.+10     	; 0x404 <can_init+0x1c>
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	51 f0       	breq	.+20     	; 0x412 <can_init+0x2a>
     3fe:	82 30       	cpi	r24, 0x02	; 2
     400:	d1 f4       	brne	.+52     	; 0x436 <can_init+0x4e>
     402:	11 c0       	rjmp	.+34     	; 0x426 <can_init+0x3e>
     404:	85 30       	cpi	r24, 0x05	; 5
     406:	61 f0       	breq	.+24     	; 0x420 <can_init+0x38>
     408:	85 30       	cpi	r24, 0x05	; 5
     40a:	40 f0       	brcs	.+16     	; 0x41c <can_init+0x34>
     40c:	86 30       	cpi	r24, 0x06	; 6
     40e:	99 f4       	brne	.+38     	; 0x436 <can_init+0x4e>
     410:	09 c0       	rjmp	.+18     	; 0x424 <can_init+0x3c>
		case b1M:
			CANBT1= 0x00;
     412:	10 92 e2 00 	sts	0x00E2, r1
     416:	09 c0       	rjmp	.+18     	; 0x42a <can_init+0x42>
			CANBT1= 0x02;
			CANBT2= 0x0c;
			CANBT3= 0x37;			
			break;
		case b250k:
			CANBT1= 0x06;	// CAN보레이트 설정 
     418:	86 e0       	ldi	r24, 0x06	; 6
     41a:	05 c0       	rjmp	.+10     	; 0x426 <can_init+0x3e>
			CANBT2= 0x0c;	// bit timing: datasheet 264 (check table)
			CANBT3= 0x37;	// 250kbps, 16 MHz CPU Clock(0.250usec)
			break;
		case b200k:
			CANBT1= 0x08;
     41c:	88 e0       	ldi	r24, 0x08	; 8
     41e:	03 c0       	rjmp	.+6      	; 0x426 <can_init+0x3e>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b125k:
			CANBT1= 0x0E;
     420:	8e e0       	ldi	r24, 0x0E	; 14
     422:	01 c0       	rjmp	.+2      	; 0x426 <can_init+0x3e>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;

		case b100k:
			CANBT1= 0x12;
     424:	82 e1       	ldi	r24, 0x12	; 18
     426:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0c;
     42a:	8c e0       	ldi	r24, 0x0C	; 12
     42c:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x37;													
     430:	87 e3       	ldi	r24, 0x37	; 55
     432:	80 93 e4 00 	sts	0x00E4, r24
// 6. CAN MOb 인터럽트 클리어(CAN MOb 인터럽트 사용하지 않음)
// 7. CAN 제어기 인에이블 모드 설정 
// 8. CAN 제어기 동작 확인 후 초기화 완료  									
//***************************************************************
void can_init (char baudRate)	// CAN초기화 
{
     436:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
	{
		CANPAGE = (i<<4);	// MOBNB3~0
     438:	98 2f       	mov	r25, r24
     43a:	92 95       	swap	r25
     43c:	90 7f       	andi	r25, 0xF0	; 240
     43e:	90 93 ed 00 	sts	0x00ED, r25
							// MOb Number Select(0~14)
		CANCDMOB = 0;		// ALL Disable MOb
     442:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;		// Clear status
     446:	10 92 ee 00 	sts	0x00EE, r1
		CANIDT1 = 0;		// Clear ID
     44a:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;		// Clear ID
     44e:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;		// Clear ID
     452:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;		// Clear ID
     456:	10 92 f0 00 	sts	0x00F0, r1
		CANIDM1 = 0;		// Clear mask
     45a:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;		// Clear mask
     45e:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;		// Clear mask
     462:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0;		// Clear mask
     466:	10 92 f4 00 	sts	0x00F4, r1

		for(j=0; j<8; j++)
			CANMSG = 0;		// CAN Data Message Register
     46a:	10 92 fa 00 	sts	0x00FA, r1
     46e:	10 92 fa 00 	sts	0x00FA, r1
     472:	10 92 fa 00 	sts	0x00FA, r1
     476:	10 92 fa 00 	sts	0x00FA, r1
     47a:	10 92 fa 00 	sts	0x00FA, r1
     47e:	10 92 fa 00 	sts	0x00FA, r1
     482:	10 92 fa 00 	sts	0x00FA, r1
     486:	10 92 fa 00 	sts	0x00FA, r1
			CANBT2= 0x0c;
			CANBT3= 0x37;													
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
     48a:	8f 5f       	subi	r24, 0xFF	; 255
     48c:	8f 30       	cpi	r24, 0x0F	; 15
     48e:	a1 f6       	brne	.-88     	; 0x438 <can_init+0x50>
			CANMSG = 0;		// CAN Data Message Register
							// Clear data
	}
							
							// Clear CAN interrupt registers
	CANGIE = 0;				// CAN General Interrupt Enable Register 
     490:	10 92 db 00 	sts	0x00DB, r1
							// None Interrupts
	CANIE1 = 0;				// CAN Enable INT MOb Registers 1
     494:	10 92 df 00 	sts	0x00DF, r1
							// None Interrupts on MObs
	CANIE2 = 0;				// CAN Enable INT MOb Registers 2
     498:	10 92 de 00 	sts	0x00DE, r1
							// None Interrupts on MObs
	CANSIT1 = 0;			// CAN Status INT MOb Registers 1
     49c:	10 92 e1 00 	sts	0x00E1, r1
							// None Interrupts on MObs
	CANSIT2 = 0;			// CAN Status INT MOb Registers 2
     4a0:	10 92 e0 00 	sts	0x00E0, r1
							// None Interrupts on MObs

	//CANGCON = (1<<TTC );	// TTC mode *******************************************
	
	CANGCON |= (1<<ENASTB);	// CAN General Control Register 
     4a4:	80 91 d8 00 	lds	r24, 0x00D8
     4a8:	82 60       	ori	r24, 0x02	; 2
     4aa:	80 93 d8 00 	sts	0x00D8, r24
							// Enable Mode (11 Recessive Bits has Been read)
							// Start CAN interface

	while (!(CANGSTA & (1<<ENFG))); // CAN General Status Register (Enable Flag)
     4ae:	80 91 d9 00 	lds	r24, 0x00D9
     4b2:	82 ff       	sbrs	r24, 2
     4b4:	fc cf       	rjmp	.-8      	; 0x4ae <can_init+0xc6>
									// Wait until module ready
}
     4b6:	08 95       	ret

000004b8 <can_init_8Mhz>:
//***************************************************************
void can_init_8Mhz(char baudRate)	// CAN초기화 
{
	unsigned char i, j;
	
	CANGCON |= (1<<SWRES);	// CAN 제어기 리셋
     4b8:	90 91 d8 00 	lds	r25, 0x00D8
     4bc:	91 60       	ori	r25, 0x01	; 1
     4be:	90 93 d8 00 	sts	0x00D8, r25
							// CAN General Control Register
  							
	//보레이트 설정 ==============================================
	switch(baudRate){
     4c2:	83 30       	cpi	r24, 0x03	; 3
     4c4:	c1 f0       	breq	.+48     	; 0x4f6 <can_init_8Mhz+0x3e>
     4c6:	84 30       	cpi	r24, 0x04	; 4
     4c8:	28 f4       	brcc	.+10     	; 0x4d4 <can_init_8Mhz+0x1c>
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	51 f0       	breq	.+20     	; 0x4e2 <can_init_8Mhz+0x2a>
     4ce:	82 30       	cpi	r24, 0x02	; 2
     4d0:	39 f5       	brne	.+78     	; 0x520 <can_init_8Mhz+0x68>
     4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <can_init_8Mhz+0x38>
     4d4:	85 30       	cpi	r24, 0x05	; 5
     4d6:	c9 f0       	breq	.+50     	; 0x50a <can_init_8Mhz+0x52>
     4d8:	85 30       	cpi	r24, 0x05	; 5
     4da:	78 f0       	brcs	.+30     	; 0x4fa <can_init_8Mhz+0x42>
     4dc:	86 30       	cpi	r24, 0x06	; 6
     4de:	01 f5       	brne	.+64     	; 0x520 <can_init_8Mhz+0x68>
     4e0:	16 c0       	rjmp	.+44     	; 0x50e <can_init_8Mhz+0x56>
		case b1M:
			CANBT1= 0x00;
     4e2:	10 92 e2 00 	sts	0x00E2, r1
			CANBT2= 0x04;
     4e6:	84 e0       	ldi	r24, 0x04	; 4
     4e8:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x13;
     4ec:	83 e1       	ldi	r24, 0x13	; 19
     4ee:	16 c0       	rjmp	.+44     	; 0x51c <can_init_8Mhz+0x64>
			break;
		case b500k:
			CANBT1= 0x00;
     4f0:	10 92 e2 00 	sts	0x00E2, r1
     4f4:	0f c0       	rjmp	.+30     	; 0x514 <can_init_8Mhz+0x5c>
			CANBT2= 0x0c;
			CANBT3= 0x37;			
			break;
		case b250k:
			CANBT1= 0x02;	// CAN baud rate set
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	0b c0       	rjmp	.+22     	; 0x510 <can_init_8Mhz+0x58>
			CANBT2= 0x0c;	// bit timing: datasheet 264 (check table)
			CANBT3= 0x37;	// 250kbps 8 MHz CPU Clock(0.250usec)
			break;
		case b200k:
			CANBT1= 0x02;
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0e;
     500:	8e e0       	ldi	r24, 0x0E	; 14
     502:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x4b;
     506:	8b e4       	ldi	r24, 0x4B	; 75
     508:	09 c0       	rjmp	.+18     	; 0x51c <can_init_8Mhz+0x64>
			break;
		case b125k:
			CANBT1= 0x06;
     50a:	86 e0       	ldi	r24, 0x06	; 6
     50c:	01 c0       	rjmp	.+2      	; 0x510 <can_init_8Mhz+0x58>
			CANBT2= 0x0c;
			CANBT3= 0x37;
			break;
		case b100k:
			CANBT1= 0x08;
     50e:	88 e0       	ldi	r24, 0x08	; 8
     510:	80 93 e2 00 	sts	0x00E2, r24
			CANBT2= 0x0c;
     514:	8c e0       	ldi	r24, 0x0C	; 12
     516:	80 93 e3 00 	sts	0x00E3, r24
			CANBT3= 0x37;													
     51a:	87 e3       	ldi	r24, 0x37	; 55
     51c:	80 93 e4 00 	sts	0x00E4, r24
// 6. CAN MOb 인터럽트 클리어(CAN MOb 인터럽트 사용하지 않음)
// 7. CAN 제어기 인에이블 모드 설정 
// 8. CAN 제어기 동작 확인 후 초기화 완료  									
//***************************************************************
void can_init_8Mhz(char baudRate)	// CAN초기화 
{
     520:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
	{
		CANPAGE = (i<<4);	// MOBNB3~0
     522:	98 2f       	mov	r25, r24
     524:	92 95       	swap	r25
     526:	90 7f       	andi	r25, 0xF0	; 240
     528:	90 93 ed 00 	sts	0x00ED, r25
							// MOb Number Select(0~14)
		CANCDMOB = 0;		// ALL Disable MOb
     52c:	10 92 ef 00 	sts	0x00EF, r1
		CANSTMOB = 0;		// Clear status
     530:	10 92 ee 00 	sts	0x00EE, r1
		CANIDT1 = 0;		// Clear ID
     534:	10 92 f3 00 	sts	0x00F3, r1
		CANIDT2 = 0;		// Clear ID
     538:	10 92 f2 00 	sts	0x00F2, r1
		CANIDT3 = 0;		// Clear ID
     53c:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT4 = 0;		// Clear ID
     540:	10 92 f0 00 	sts	0x00F0, r1
		CANIDM1 = 0;		// Clear mask
     544:	10 92 f7 00 	sts	0x00F7, r1
		CANIDM2 = 0;		// Clear mask
     548:	10 92 f6 00 	sts	0x00F6, r1
		CANIDM3 = 0;		// Clear mask
     54c:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM4 = 0;		// Clear mask
     550:	10 92 f4 00 	sts	0x00F4, r1

		for(j=0; j<8; j++)
			CANMSG = 0;		// CAN Data Message Register
     554:	10 92 fa 00 	sts	0x00FA, r1
     558:	10 92 fa 00 	sts	0x00FA, r1
     55c:	10 92 fa 00 	sts	0x00FA, r1
     560:	10 92 fa 00 	sts	0x00FA, r1
     564:	10 92 fa 00 	sts	0x00FA, r1
     568:	10 92 fa 00 	sts	0x00FA, r1
     56c:	10 92 fa 00 	sts	0x00FA, r1
     570:	10 92 fa 00 	sts	0x00FA, r1
			CANBT2= 0x0c;
			CANBT3= 0x37;													
			break;
	}
	
	for(i=0; i<15; i++)		// Reset all MObs
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	8f 30       	cpi	r24, 0x0F	; 15
     578:	a1 f6       	brne	.-88     	; 0x522 <can_init_8Mhz+0x6a>
			CANMSG = 0;		// CAN Data Message Register
							// Clear data
	}
							
							// Clear CAN interrupt registers
	CANGIE = 0;				// CAN General Interrupt Enable Register 
     57a:	10 92 db 00 	sts	0x00DB, r1
							// None Interrupts
	CANIE1 = 0;				// CAN Enable INT MOb Registers 1
     57e:	10 92 df 00 	sts	0x00DF, r1
							// None Interrupts on MObs
	CANIE2 = 0;				// CAN Enable INT MOb Registers 2
     582:	10 92 de 00 	sts	0x00DE, r1
							// None Interrupts on MObs
	CANSIT1 = 0;			// CAN Status INT MOb Registers 1
     586:	10 92 e1 00 	sts	0x00E1, r1
							// None Interrupts on MObs
	CANSIT2 = 0;			// CAN Status INT MOb Registers 2
     58a:	10 92 e0 00 	sts	0x00E0, r1
							// None Interrupts on MObs

	CANGCON = (1<<TTC );	// TTC mode *******************************************
     58e:	80 e2       	ldi	r24, 0x20	; 32
     590:	80 93 d8 00 	sts	0x00D8, r24
	
	CANGCON |= (1<<ENASTB);	// CAN General Control Register 
     594:	80 91 d8 00 	lds	r24, 0x00D8
     598:	82 60       	ori	r24, 0x02	; 2
     59a:	80 93 d8 00 	sts	0x00D8, r24
							// Enable Mode (11 Recessive Bits has Been read)
							// Start CAN interface

	while (!(CANGSTA & (1<<ENFG))); // CAN General Status Register (Enable Flag)
     59e:	80 91 d9 00 	lds	r24, 0x00D9
     5a2:	82 ff       	sbrs	r24, 2
     5a4:	fc cf       	rjmp	.-8      	; 0x59e <can_init_8Mhz+0xe6>
									// Wait until module ready
}
     5a6:	08 95       	ret

000005a8 <can_tx>:
//		obj; MOb 번호 
//		msg; 메시지 구조체 
//		rtr; RTR r결정(0; 데이터 프레임, 1; 리모트 프레임)	
//***************************************************************
char can_tx (unsigned char obj, struct MOb *msg, char rtr)	// CAN transmission
{
     5a8:	0f 93       	push	r16
     5aa:	1f 93       	push	r17
     5ac:	fb 01       	movw	r30, r22
	//usart1_transmit_string("\rCAn loop in\n");

	char send_result = _SEND_FAIL;
	unsigned char i;	
	unsigned long can_id= msg->id;
     5ae:	00 81       	ld	r16, Z
     5b0:	11 81       	ldd	r17, Z+1	; 0x01
     5b2:	22 81       	ldd	r18, Z+2	; 0x02
     5b4:	33 81       	ldd	r19, Z+3	; 0x03
	
								// Enable MOb1, auto increment index, start with index = 0
	CANPAGE = (obj<<4);			// CAN Page MOb Register
     5b6:	82 95       	swap	r24
     5b8:	80 7f       	andi	r24, 0xF0	; 240
     5ba:	80 93 ed 00 	sts	0x00ED, r24
								// MOb Number Select

	//usart1_transmit_string("\rPAGE Clear\n");

	CANSTMOB = 0x00;
     5be:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0x00;
     5c2:	10 92 ef 00 	sts	0x00EF, r1
	
	//usart1_transmit_string("\rMOb Clear\n");

	if(msg->ide== 0x00)	// standard
     5c6:	85 81       	ldd	r24, Z+5	; 0x05
     5c8:	88 23       	and	r24, r24
     5ca:	a1 f4       	brne	.+40     	; 0x5f4 <can_tx+0x4c>
	{
		CANIDT1= (unsigned char)(can_id>>3);
     5cc:	d9 01       	movw	r26, r18
     5ce:	c8 01       	movw	r24, r16
     5d0:	53 e0       	ldi	r21, 0x03	; 3
     5d2:	b6 95       	lsr	r27
     5d4:	a7 95       	ror	r26
     5d6:	97 95       	ror	r25
     5d8:	87 95       	ror	r24
     5da:	5a 95       	dec	r21
     5dc:	d1 f7       	brne	.-12     	; 0x5d2 <can_tx+0x2a>
     5de:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id<<5);
     5e2:	02 95       	swap	r16
     5e4:	00 0f       	add	r16, r16
     5e6:	00 7e       	andi	r16, 0xE0	; 224
     5e8:	00 93 f2 00 	sts	0x00F2, r16

		CANCDMOB &= ~0x10;		// Set IDE bit 2.0A 11bits
     5ec:	80 91 ef 00 	lds	r24, 0x00EF
     5f0:	8f 7e       	andi	r24, 0xEF	; 239
     5f2:	29 c0       	rjmp	.+82     	; 0x646 <can_tx+0x9e>
		//usart1_transmit_string("\rstandard\n");
	}
	else	// extended
	{
		CANIDT1= (unsigned char)(can_id>>21);
     5f4:	d9 01       	movw	r26, r18
     5f6:	c8 01       	movw	r24, r16
     5f8:	55 e1       	ldi	r21, 0x15	; 21
     5fa:	b6 95       	lsr	r27
     5fc:	a7 95       	ror	r26
     5fe:	97 95       	ror	r25
     600:	87 95       	ror	r24
     602:	5a 95       	dec	r21
     604:	d1 f7       	brne	.-12     	; 0x5fa <can_tx+0x52>
     606:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(can_id>>13);
     60a:	d9 01       	movw	r26, r18
     60c:	c8 01       	movw	r24, r16
     60e:	6d e0       	ldi	r22, 0x0D	; 13
     610:	b6 95       	lsr	r27
     612:	a7 95       	ror	r26
     614:	97 95       	ror	r25
     616:	87 95       	ror	r24
     618:	6a 95       	dec	r22
     61a:	d1 f7       	brne	.-12     	; 0x610 <can_tx+0x68>
     61c:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(can_id>>5);
     620:	d9 01       	movw	r26, r18
     622:	c8 01       	movw	r24, r16
     624:	75 e0       	ldi	r23, 0x05	; 5
     626:	b6 95       	lsr	r27
     628:	a7 95       	ror	r26
     62a:	97 95       	ror	r25
     62c:	87 95       	ror	r24
     62e:	7a 95       	dec	r23
     630:	d1 f7       	brne	.-12     	; 0x626 <can_tx+0x7e>
     632:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(can_id<<3);
     636:	00 0f       	add	r16, r16
     638:	00 0f       	add	r16, r16
     63a:	00 0f       	add	r16, r16
     63c:	00 93 f0 00 	sts	0x00F0, r16

		CANCDMOB |= 0x10;		// Set IDE bit 2.0B 29bits
     640:	80 91 ef 00 	lds	r24, 0x00EF
     644:	80 61       	ori	r24, 0x10	; 16
     646:	80 93 ef 00 	sts	0x00EF, r24
	//	usart1_transmit_string("\rExtended\n");
	}

	CANCDMOB |= (msg->dlc<<DLC0);	// set data length
     64a:	80 91 ef 00 	lds	r24, 0x00EF
     64e:	96 81       	ldd	r25, Z+6	; 0x06
     650:	89 2b       	or	r24, r25
     652:	80 93 ef 00 	sts	0x00EF, r24

	//usart1_transmit_string("\rDLC Clear\n");	

	CANIDT4 |= (rtr & 0x04);     // RTRTAG 설정;
     656:	80 91 f0 00 	lds	r24, 0x00F0
     65a:	44 70       	andi	r20, 0x04	; 4
     65c:	48 2b       	or	r20, r24
     65e:	40 93 f0 00 	sts	0x00F0, r20

	CANIDT4 &= ~0x02;		   // RB1TAG=0;
     662:	80 91 f0 00 	lds	r24, 0x00F0
     666:	8d 7f       	andi	r24, 0xFD	; 253
     668:	80 93 f0 00 	sts	0x00F0, r24
	CANIDT4 &= ~0x01;		   // RB0TAG=1;
     66c:	80 91 f0 00 	lds	r24, 0x00F0
     670:	8e 7f       	andi	r24, 0xFE	; 254
     672:	80 93 f0 00 	sts	0x00F0, r24

	//usart1_transmit_string("\rRTR Clear\n");	

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	09 c0       	rjmp	.+18     	; 0x68c <can_tx+0xe4>
		CANMSG = msg->data[i];	// full message 
     67a:	df 01       	movw	r26, r30
     67c:	a8 0f       	add	r26, r24
     67e:	b1 1d       	adc	r27, r1
     680:	17 96       	adiw	r26, 0x07	; 7
     682:	9c 91       	ld	r25, X
     684:	17 97       	sbiw	r26, 0x07	; 7
     686:	90 93 fa 00 	sts	0x00FA, r25
	CANIDT4 &= ~0x01;		   // RB0TAG=1;

	//usart1_transmit_string("\rRTR Clear\n");	

	//put data in mailbox
	for(i=0; i<msg->dlc; i++)
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	96 81       	ldd	r25, Z+6	; 0x06
     68e:	89 17       	cp	r24, r25
     690:	a0 f3       	brcs	.-24     	; 0x67a <can_tx+0xd2>
		CANMSG = msg->data[i];	// full message 

	//usart1_transmit_string("\rMSG Clear\n");	

	//enable transmission		
	CANCDMOB |= (1<<CONMOB0);
     692:	80 91 ef 00 	lds	r24, 0x00EF
     696:	80 64       	ori	r24, 0x40	; 64
     698:	80 93 ef 00 	sts	0x00EF, r24

	//usart1_transmit_string("\renable transmissionr\n");	

	while (!(CANSTMOB & (1<<TXOK)));	// check tx ok
     69c:	80 91 ee 00 	lds	r24, 0x00EE
     6a0:	86 ff       	sbrs	r24, 6
     6a2:	fc cf       	rjmp	.-8      	; 0x69c <can_tx+0xf4>

	// monitoring with serial com
	//usart1_transmit_string("\rTXOK\n");

	//reset flag
	CANSTMOB &= ~(1<<TXOK);
     6a4:	80 91 ee 00 	lds	r24, 0x00EE
     6a8:	8f 7b       	andi	r24, 0xBF	; 191
     6aa:	80 93 ee 00 	sts	0x00EE, r24

	return(send_result);
}
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	08 95       	ret

000006b6 <can_rx>:
// 5. IDE 수신 처리 
// 6. DLC 수신 처리 
// 7. Data 수신 처리 
//***************************************************************
char can_rx(unsigned char obj, struct MOb *msg)		
{
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	fb 01       	movw	r30, r22
	char rece_result = _RECE_FAIL;
	unsigned char i;	
	unsigned long can_id= 0;
	
	CANPAGE = (obj<<4);				// 수신 MOb 선택 
     6c4:	82 95       	swap	r24
     6c6:	80 7f       	andi	r24, 0xF0	; 240
     6c8:	80 93 ed 00 	sts	0x00ED, r24
	//usart1_transmit_string("\rRX MOb #");
	//usart1_transmit(obj+0x30);
	//usart1_transmit_string("\r\n");

	// 수신 완료될 때까지 대기함 
	while(!(CANSTMOB&(1<<RXOK)));
     6cc:	80 91 ee 00 	lds	r24, 0x00EE
     6d0:	85 ff       	sbrs	r24, 5
     6d2:	fc cf       	rjmp	.-8      	; 0x6cc <can_rx+0x16>
	// get CANIDT and CANCDMOB and CANMSg
	//usart1_transmit_string("\rRXOK\n");
	rece_result = _RECE_OK;

	// 표준 혹은 확장 포맷에 맞추어 ID, IDE 결정 
	if((CANCDMOB & 0x10) == 0x00){			// IDE standard ?
     6d4:	80 91 ef 00 	lds	r24, 0x00EF
     6d8:	84 fd       	sbrc	r24, 4
     6da:	1b c0       	rjmp	.+54     	; 0x712 <can_rx+0x5c>
		msg->ide= STD;
     6dc:	15 82       	std	Z+5, r1	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<8;
     6de:	80 91 f3 00 	lds	r24, 0x00F3
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	ba 2f       	mov	r27, r26
     6ea:	a9 2f       	mov	r26, r25
     6ec:	98 2f       	mov	r25, r24
     6ee:	88 27       	eor	r24, r24
		can_id |= ((unsigned long)CANIDT2);
     6f0:	40 91 f2 00 	lds	r20, 0x00F2
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	84 2b       	or	r24, r20
     6fc:	95 2b       	or	r25, r21
     6fe:	a6 2b       	or	r26, r22
     700:	b7 2b       	or	r27, r23
		can_id>>=5;
     702:	35 e0       	ldi	r19, 0x05	; 5
     704:	b6 95       	lsr	r27
     706:	a7 95       	ror	r26
     708:	97 95       	ror	r25
     70a:	87 95       	ror	r24
     70c:	3a 95       	dec	r19
     70e:	d1 f7       	brne	.-12     	; 0x704 <can_rx+0x4e>
     710:	35 c0       	rjmp	.+106    	; 0x77c <can_rx+0xc6>
		//usart1_transmit_string("\rRx Standard\n");
	}
	else{
		msg->ide= EXT;
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	85 83       	std	Z+5, r24	; 0x05
		can_id  = ((unsigned long)CANIDT1)<<24;
     716:	80 91 f3 00 	lds	r24, 0x00F3
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	a0 e0       	ldi	r26, 0x00	; 0
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	b8 2f       	mov	r27, r24
     722:	aa 27       	eor	r26, r26
     724:	99 27       	eor	r25, r25
     726:	88 27       	eor	r24, r24
		can_id |= ((unsigned long)CANIDT2)<<16;
     728:	c0 90 f2 00 	lds	r12, 0x00F2
		can_id |= ((unsigned long)CANIDT3)<<8;
     72c:	40 91 f1 00 	lds	r20, 0x00F1
		can_id |= ((unsigned long)CANIDT4);
     730:	00 91 f0 00 	lds	r16, 0x00F0
		//usart1_transmit_string("\rRx Standard\n");
	}
	else{
		msg->ide= EXT;
		can_id  = ((unsigned long)CANIDT1)<<24;
		can_id |= ((unsigned long)CANIDT2)<<16;
     734:	dd 24       	eor	r13, r13
     736:	ee 24       	eor	r14, r14
     738:	ff 24       	eor	r15, r15
     73a:	76 01       	movw	r14, r12
     73c:	dd 24       	eor	r13, r13
     73e:	cc 24       	eor	r12, r12
     740:	8c 29       	or	r24, r12
     742:	9d 29       	or	r25, r13
     744:	ae 29       	or	r26, r14
     746:	bf 29       	or	r27, r15
		can_id |= ((unsigned long)CANIDT3)<<8;
		can_id |= ((unsigned long)CANIDT4);
     748:	10 e0       	ldi	r17, 0x00	; 0
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
	}
	else{
		msg->ide= EXT;
		can_id  = ((unsigned long)CANIDT1)<<24;
		can_id |= ((unsigned long)CANIDT2)<<16;
		can_id |= ((unsigned long)CANIDT3)<<8;
     74e:	80 2b       	or	r24, r16
     750:	91 2b       	or	r25, r17
     752:	a2 2b       	or	r26, r18
     754:	b3 2b       	or	r27, r19
     756:	50 e0       	ldi	r21, 0x00	; 0
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	76 2f       	mov	r23, r22
     75e:	65 2f       	mov	r22, r21
     760:	54 2f       	mov	r21, r20
     762:	44 27       	eor	r20, r20
		can_id |= ((unsigned long)CANIDT4);
     764:	84 2b       	or	r24, r20
     766:	95 2b       	or	r25, r21
     768:	a6 2b       	or	r26, r22
     76a:	b7 2b       	or	r27, r23
		can_id>>=3;
     76c:	68 94       	set
     76e:	12 f8       	bld	r1, 2
     770:	b6 95       	lsr	r27
     772:	a7 95       	ror	r26
     774:	97 95       	ror	r25
     776:	87 95       	ror	r24
     778:	16 94       	lsr	r1
     77a:	d1 f7       	brne	.-12     	; 0x770 <can_rx+0xba>
		//usart1_transmit_string("\rRx Extended\n");
	}
	msg->id= can_id;			// 구조체 변수로 CANID 대입 
     77c:	80 83       	st	Z, r24
     77e:	91 83       	std	Z+1, r25	; 0x01
     780:	a2 83       	std	Z+2, r26	; 0x02
     782:	b3 83       	std	Z+3, r27	; 0x03

	msg->rtr= CANIDT4 & 0x04;   
     784:	80 91 f0 00 	lds	r24, 0x00F0
     788:	84 70       	andi	r24, 0x04	; 4
     78a:	84 83       	std	Z+4, r24	; 0x04

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 
     78c:	80 91 ef 00 	lds	r24, 0x00EF
     790:	8f 70       	andi	r24, 0x0F	; 15
     792:	86 83       	std	Z+6, r24	; 0x06

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	09 c0       	rjmp	.+18     	; 0x7aa <can_rx+0xf4>
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
     798:	80 91 fa 00 	lds	r24, 0x00FA
     79c:	2e 0f       	add	r18, r30
     79e:	3f 1f       	adc	r19, r31
     7a0:	d9 01       	movw	r26, r18
     7a2:	17 96       	adiw	r26, 0x07	; 7
     7a4:	8c 93       	st	X, r24
     7a6:	17 97       	sbiw	r26, 0x07	; 7
	msg->rtr= CANIDT4 & 0x04;   

	msg->dlc= CANCDMOB & 0x0f;	// 수신 메시지 길이 구조체 변수에 대입 

	// get data
	for(i=0; i<(CANCDMOB&0xf); i++){
     7a8:	4f 5f       	subi	r20, 0xFF	; 255
     7aa:	24 2f       	mov	r18, r20
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	80 91 ef 00 	lds	r24, 0x00EF
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	8f 70       	andi	r24, 0x0F	; 15
     7b6:	90 70       	andi	r25, 0x00	; 0
     7b8:	28 17       	cp	r18, r24
     7ba:	39 07       	cpc	r19, r25
     7bc:	6c f3       	brlt	.-38     	; 0x798 <can_rx+0xe2>
		msg->data[i] = CANMSG;	// 메시지 데이터 배열에 저장 
	}

	// rx init 
	CANSTMOB = 0x00;			// 상태 초기 화 
     7be:	10 92 ee 00 	sts	0x00EE, r1

	// enable reception mode and ide set
	CANCDMOB |= (1<<CONMOB1); 	// 수신 IDE 유지하고 수신 모드 설정
     7c2:	80 91 ef 00 	lds	r24, 0x00EF
     7c6:	80 68       	ori	r24, 0x80	; 128
     7c8:	80 93 ef 00 	sts	0x00EF, r24

	// reset flag
	CANSTMOB &= ~(1<<RXOK);		// 수신대기 
     7cc:	80 91 ee 00 	lds	r24, 0x00EE
     7d0:	8f 7d       	andi	r24, 0xDF	; 223
     7d2:	80 93 ee 00 	sts	0x00EE, r24

	return(rece_result);
}
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	08 95       	ret

000007e6 <can_rx_set>:
//		idmask; CAN ID 수신 마스크 
//		rtrIdemask; RTR 비트와 IDE 마스크 			
//****************************************************************/
void can_rx_set(char obj, unsigned long id, char ide, unsigned char dlc, 
				unsigned long idmask, unsigned char rtrIdemask)
{
     7e6:	af 92       	push	r10
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
	CANPAGE = obj<<4;		// set MOb number
     7f2:	82 95       	swap	r24
     7f4:	80 7f       	andi	r24, 0xF0	; 240
     7f6:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
     7fa:	10 92 ee 00 	sts	0x00EE, r1

	if(ide== STD)			// standard
	{
		CANIDT1= (unsigned char)(id>>3);
     7fe:	db 01       	movw	r26, r22
     800:	ca 01       	movw	r24, r20
{
	CANPAGE = obj<<4;		// set MOb number

	CANSTMOB = 0x00;		// clear status

	if(ide== STD)			// standard
     802:	22 23       	and	r18, r18
     804:	29 f5       	brne	.+74     	; 0x850 <can_rx_set+0x6a>
	{
		CANIDT1= (unsigned char)(id>>3);
     806:	f3 e0       	ldi	r31, 0x03	; 3
     808:	b6 95       	lsr	r27
     80a:	a7 95       	ror	r26
     80c:	97 95       	ror	r25
     80e:	87 95       	ror	r24
     810:	fa 95       	dec	r31
     812:	d1 f7       	brne	.-12     	; 0x808 <can_rx_set+0x22>
     814:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
     818:	42 95       	swap	r20
     81a:	44 0f       	add	r20, r20
     81c:	40 7e       	andi	r20, 0xE0	; 224
     81e:	40 93 f2 00 	sts	0x00F2, r20

		CANIDM1= (unsigned char)(idmask>>3);
     822:	d7 01       	movw	r26, r14
     824:	c6 01       	movw	r24, r12
     826:	23 e0       	ldi	r18, 0x03	; 3
     828:	b6 95       	lsr	r27
     82a:	a7 95       	ror	r26
     82c:	97 95       	ror	r25
     82e:	87 95       	ror	r24
     830:	2a 95       	dec	r18
     832:	d1 f7       	brne	.-12     	; 0x828 <can_rx_set+0x42>
     834:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
     838:	c2 94       	swap	r12
     83a:	cc 0c       	add	r12, r12
     83c:	30 ee       	ldi	r19, 0xE0	; 224
     83e:	c3 22       	and	r12, r19
     840:	c0 92 f6 00 	sts	0x00F6, r12
		CANIDM4=0;
     844:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
     848:	80 91 ef 00 	lds	r24, 0x00EF
     84c:	8f 7e       	andi	r24, 0xEF	; 239
     84e:	4d c0       	rjmp	.+154    	; 0x8ea <can_rx_set+0x104>

		//usart1_transmit_string("\rRx Standard Set\n");
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
     850:	e5 e1       	ldi	r30, 0x15	; 21
     852:	b6 95       	lsr	r27
     854:	a7 95       	ror	r26
     856:	97 95       	ror	r25
     858:	87 95       	ror	r24
     85a:	ea 95       	dec	r30
     85c:	d1 f7       	brne	.-12     	; 0x852 <can_rx_set+0x6c>
     85e:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
     862:	db 01       	movw	r26, r22
     864:	ca 01       	movw	r24, r20
     866:	fd e0       	ldi	r31, 0x0D	; 13
     868:	b6 95       	lsr	r27
     86a:	a7 95       	ror	r26
     86c:	97 95       	ror	r25
     86e:	87 95       	ror	r24
     870:	fa 95       	dec	r31
     872:	d1 f7       	brne	.-12     	; 0x868 <can_rx_set+0x82>
     874:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
     878:	db 01       	movw	r26, r22
     87a:	ca 01       	movw	r24, r20
     87c:	25 e0       	ldi	r18, 0x05	; 5
     87e:	b6 95       	lsr	r27
     880:	a7 95       	ror	r26
     882:	97 95       	ror	r25
     884:	87 95       	ror	r24
     886:	2a 95       	dec	r18
     888:	d1 f7       	brne	.-12     	; 0x87e <can_rx_set+0x98>
     88a:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
     88e:	44 0f       	add	r20, r20
     890:	44 0f       	add	r20, r20
     892:	44 0f       	add	r20, r20
     894:	40 93 f0 00 	sts	0x00F0, r20

		CANIDM1= (unsigned char)(idmask>>21);
     898:	d7 01       	movw	r26, r14
     89a:	c6 01       	movw	r24, r12
     89c:	35 e1       	ldi	r19, 0x15	; 21
     89e:	b6 95       	lsr	r27
     8a0:	a7 95       	ror	r26
     8a2:	97 95       	ror	r25
     8a4:	87 95       	ror	r24
     8a6:	3a 95       	dec	r19
     8a8:	d1 f7       	brne	.-12     	; 0x89e <can_rx_set+0xb8>
     8aa:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
     8ae:	d7 01       	movw	r26, r14
     8b0:	c6 01       	movw	r24, r12
     8b2:	4d e0       	ldi	r20, 0x0D	; 13
     8b4:	b6 95       	lsr	r27
     8b6:	a7 95       	ror	r26
     8b8:	97 95       	ror	r25
     8ba:	87 95       	ror	r24
     8bc:	4a 95       	dec	r20
     8be:	d1 f7       	brne	.-12     	; 0x8b4 <can_rx_set+0xce>
     8c0:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
     8c4:	d7 01       	movw	r26, r14
     8c6:	c6 01       	movw	r24, r12
     8c8:	e5 e0       	ldi	r30, 0x05	; 5
     8ca:	b6 95       	lsr	r27
     8cc:	a7 95       	ror	r26
     8ce:	97 95       	ror	r25
     8d0:	87 95       	ror	r24
     8d2:	ea 95       	dec	r30
     8d4:	d1 f7       	brne	.-12     	; 0x8ca <can_rx_set+0xe4>
     8d6:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
     8da:	cc 0c       	add	r12, r12
     8dc:	cc 0c       	add	r12, r12
     8de:	cc 0c       	add	r12, r12
     8e0:	c0 92 f4 00 	sts	0x00F4, r12

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
     8e4:	80 91 ef 00 	lds	r24, 0x00EF
     8e8:	80 61       	ori	r24, 0x10	; 16
     8ea:	80 93 ef 00 	sts	0x00EF, r24

		//usart1_transmit_string("\rRx Extended Set\n");
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
     8ee:	80 91 ef 00 	lds	r24, 0x00EF
     8f2:	0f 70       	andi	r16, 0x0F	; 15
     8f4:	08 2b       	or	r16, r24
     8f6:	00 93 ef 00 	sts	0x00EF, r16

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
     8fa:	90 91 f4 00 	lds	r25, 0x00F4
     8fe:	8a 2d       	mov	r24, r10
     900:	87 70       	andi	r24, 0x07	; 7
     902:	89 2b       	or	r24, r25
     904:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x04;		// RTRMSK= 1/0 enable comparison (Data receive)
//	CANIDM4 &= ~0x02;		// recommended
//	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)

	CANCDMOB |= 0x80;		// receive enable 
     908:	80 91 ef 00 	lds	r24, 0x00EF
     90c:	80 68       	ori	r24, 0x80	; 128
     90e:	80 93 ef 00 	sts	0x00EF, r24
}
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	af 90       	pop	r10
     91e:	08 95       	ret

00000920 <can_int_rx_set>:
//  7. 수신 모드 설정 
//****************************************************************/
void can_int_rx_set(char obj, unsigned long id, char rplvIde, 
					unsigned char dlc, unsigned long idmask, 
					unsigned char rtrIdemask)
{
     920:	af 92       	push	r10
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	38 2f       	mov	r19, r24
	CANPAGE = obj<<4;		// set MOb number
     92e:	82 95       	swap	r24
     930:	80 7f       	andi	r24, 0xF0	; 240
     932:	80 93 ed 00 	sts	0x00ED, r24

	CANSTMOB = 0x00;		// clear status
     936:	10 92 ee 00 	sts	0x00EE, r1

	if(rplvIde & 0x02)	
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
     93a:	80 91 ef 00 	lds	r24, 0x00EF
{
	CANPAGE = obj<<4;		// set MOb number

	CANSTMOB = 0x00;		// clear status

	if(rplvIde & 0x02)	
     93e:	21 ff       	sbrs	r18, 1
     940:	02 c0       	rjmp	.+4      	; 0x946 <can_int_rx_set+0x26>
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
     942:	80 62       	ori	r24, 0x20	; 32
     944:	01 c0       	rjmp	.+2      	; 0x948 <can_int_rx_set+0x28>
	else
		CANCDMOB &= ~0x20;			// RPLV clear
     946:	8f 7d       	andi	r24, 0xDF	; 223
     948:	80 93 ef 00 	sts	0x00EF, r24

	if(( rplvIde & 0x01) == STD)			// standard
	{
		CANIDT1= (unsigned char)(id>>3);
     94c:	db 01       	movw	r26, r22
     94e:	ca 01       	movw	r24, r20
	if(rplvIde & 0x02)	
		CANCDMOB |= 0x20;			// RPLV set, 자동 응답 모드 설정 
	else
		CANCDMOB &= ~0x20;			// RPLV clear

	if(( rplvIde & 0x01) == STD)			// standard
     950:	20 fd       	sbrc	r18, 0
     952:	25 c0       	rjmp	.+74     	; 0x99e <can_int_rx_set+0x7e>
	{
		CANIDT1= (unsigned char)(id>>3);
     954:	23 e0       	ldi	r18, 0x03	; 3
     956:	b6 95       	lsr	r27
     958:	a7 95       	ror	r26
     95a:	97 95       	ror	r25
     95c:	87 95       	ror	r24
     95e:	2a 95       	dec	r18
     960:	d1 f7       	brne	.-12     	; 0x956 <can_int_rx_set+0x36>
     962:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id<<5);
     966:	42 95       	swap	r20
     968:	44 0f       	add	r20, r20
     96a:	40 7e       	andi	r20, 0xE0	; 224
     96c:	40 93 f2 00 	sts	0x00F2, r20

		CANIDM1= (unsigned char)(idmask>>3);
     970:	d7 01       	movw	r26, r14
     972:	c6 01       	movw	r24, r12
     974:	43 e0       	ldi	r20, 0x03	; 3
     976:	b6 95       	lsr	r27
     978:	a7 95       	ror	r26
     97a:	97 95       	ror	r25
     97c:	87 95       	ror	r24
     97e:	4a 95       	dec	r20
     980:	d1 f7       	brne	.-12     	; 0x976 <can_int_rx_set+0x56>
     982:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask<<5);
     986:	c2 94       	swap	r12
     988:	cc 0c       	add	r12, r12
     98a:	50 ee       	ldi	r21, 0xE0	; 224
     98c:	c5 22       	and	r12, r21
     98e:	c0 92 f6 00 	sts	0x00F6, r12
		CANIDM4=0;
     992:	10 92 f4 00 	sts	0x00F4, r1

		CANCDMOB &= ~0x10;	// clear IDE =0, standard 11 bits
     996:	80 91 ef 00 	lds	r24, 0x00EF
     99a:	8f 7e       	andi	r24, 0xEF	; 239
     99c:	4d c0       	rjmp	.+154    	; 0xa38 <can_int_rx_set+0x118>

		//usart1_transmit_string("\rRx Standard Set\n");
	}
	else					// extended
	{
		CANIDT1= (unsigned char)(id>>21);
     99e:	e5 e1       	ldi	r30, 0x15	; 21
     9a0:	b6 95       	lsr	r27
     9a2:	a7 95       	ror	r26
     9a4:	97 95       	ror	r25
     9a6:	87 95       	ror	r24
     9a8:	ea 95       	dec	r30
     9aa:	d1 f7       	brne	.-12     	; 0x9a0 <can_int_rx_set+0x80>
     9ac:	80 93 f3 00 	sts	0x00F3, r24
		CANIDT2= (unsigned char)(id>>13);
     9b0:	db 01       	movw	r26, r22
     9b2:	ca 01       	movw	r24, r20
     9b4:	fd e0       	ldi	r31, 0x0D	; 13
     9b6:	b6 95       	lsr	r27
     9b8:	a7 95       	ror	r26
     9ba:	97 95       	ror	r25
     9bc:	87 95       	ror	r24
     9be:	fa 95       	dec	r31
     9c0:	d1 f7       	brne	.-12     	; 0x9b6 <can_int_rx_set+0x96>
     9c2:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT3= (unsigned char)(id>>5);
     9c6:	db 01       	movw	r26, r22
     9c8:	ca 01       	movw	r24, r20
     9ca:	25 e0       	ldi	r18, 0x05	; 5
     9cc:	b6 95       	lsr	r27
     9ce:	a7 95       	ror	r26
     9d0:	97 95       	ror	r25
     9d2:	87 95       	ror	r24
     9d4:	2a 95       	dec	r18
     9d6:	d1 f7       	brne	.-12     	; 0x9cc <can_int_rx_set+0xac>
     9d8:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT4= (unsigned char)(id<<3);
     9dc:	44 0f       	add	r20, r20
     9de:	44 0f       	add	r20, r20
     9e0:	44 0f       	add	r20, r20
     9e2:	40 93 f0 00 	sts	0x00F0, r20

		CANIDM1= (unsigned char)(idmask>>21);
     9e6:	d7 01       	movw	r26, r14
     9e8:	c6 01       	movw	r24, r12
     9ea:	45 e1       	ldi	r20, 0x15	; 21
     9ec:	b6 95       	lsr	r27
     9ee:	a7 95       	ror	r26
     9f0:	97 95       	ror	r25
     9f2:	87 95       	ror	r24
     9f4:	4a 95       	dec	r20
     9f6:	d1 f7       	brne	.-12     	; 0x9ec <can_int_rx_set+0xcc>
     9f8:	80 93 f7 00 	sts	0x00F7, r24
		CANIDM2= (unsigned char)(idmask>>13);
     9fc:	d7 01       	movw	r26, r14
     9fe:	c6 01       	movw	r24, r12
     a00:	ed e0       	ldi	r30, 0x0D	; 13
     a02:	b6 95       	lsr	r27
     a04:	a7 95       	ror	r26
     a06:	97 95       	ror	r25
     a08:	87 95       	ror	r24
     a0a:	ea 95       	dec	r30
     a0c:	d1 f7       	brne	.-12     	; 0xa02 <can_int_rx_set+0xe2>
     a0e:	80 93 f6 00 	sts	0x00F6, r24
		CANIDM3= (unsigned char)(idmask>>5);
     a12:	d7 01       	movw	r26, r14
     a14:	c6 01       	movw	r24, r12
     a16:	f5 e0       	ldi	r31, 0x05	; 5
     a18:	b6 95       	lsr	r27
     a1a:	a7 95       	ror	r26
     a1c:	97 95       	ror	r25
     a1e:	87 95       	ror	r24
     a20:	fa 95       	dec	r31
     a22:	d1 f7       	brne	.-12     	; 0xa18 <can_int_rx_set+0xf8>
     a24:	80 93 f5 00 	sts	0x00F5, r24
		CANIDM4= (unsigned char)(idmask<<3);
     a28:	cc 0c       	add	r12, r12
     a2a:	cc 0c       	add	r12, r12
     a2c:	cc 0c       	add	r12, r12
     a2e:	c0 92 f4 00 	sts	0x00F4, r12

		CANCDMOB |= 0x10;	// set IDE =1, extended 29 bits
     a32:	80 91 ef 00 	lds	r24, 0x00EF
     a36:	80 61       	ori	r24, 0x10	; 16
     a38:	80 93 ef 00 	sts	0x00EF, r24

		//usart1_transmit_string("\rRx Extended Set\n");
	}
	CANCDMOB |= (dlc & 0x0f);		// set data length
     a3c:	80 91 ef 00 	lds	r24, 0x00EF
     a40:	0f 70       	andi	r16, 0x0F	; 15
     a42:	08 2b       	or	r16, r24
     a44:	00 93 ef 00 	sts	0x00EF, r16

	CANIDM4 |= (unsigned char)(rtrIdemask & 0x07);
     a48:	90 91 f4 00 	lds	r25, 0x00F4
     a4c:	8a 2d       	mov	r24, r10
     a4e:	87 70       	andi	r24, 0x07	; 7
     a50:	89 2b       	or	r24, r25
     a52:	80 93 f4 00 	sts	0x00F4, r24
//	CANIDM4 &= ~0x02;		// recommended
//	CANIDM4 &= ~0x01;		// IDEMSK= 1/0 enable comparison (IDE receive)


//  인터럽트 인에이블(인터럽트 설정)
	CANGIE |= 0xa0; 		// Enable all interrupt and Enable Rx interrupt
     a56:	80 91 db 00 	lds	r24, 0x00DB
     a5a:	80 6a       	ori	r24, 0xA0	; 160
     a5c:	80 93 db 00 	sts	0x00DB, r24

	if(obj<8) 
     a60:	38 30       	cpi	r19, 0x08	; 8
     a62:	50 f4       	brcc	.+20     	; 0xa78 <can_int_rx_set+0x158>
		CANIE2 = (1<<obj);		// 해당 MOb의 인터럽트를 인에이블 시킴 
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <can_int_rx_set+0x14e>
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	3a 95       	dec	r19
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <can_int_rx_set+0x14a>
     a72:	80 93 de 00 	sts	0x00DE, r24
     a76:	0d c0       	rjmp	.+26     	; 0xa92 <can_int_rx_set+0x172>
	else        
		CANIE1 = (1<<(obj-8));	// 
     a78:	23 2f       	mov	r18, r19
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	28 50       	subi	r18, 0x08	; 8
     a7e:	30 40       	sbci	r19, 0x00	; 0
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <can_int_rx_set+0x16a>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	2a 95       	dec	r18
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <can_int_rx_set+0x166>
     a8e:	80 93 df 00 	sts	0x00DF, r24

	CANCDMOB |= 0x80;			// 수신 인에이블 
     a92:	80 91 ef 00 	lds	r24, 0x00EF
     a96:	80 68       	ori	r24, 0x80	; 128
     a98:	80 93 ef 00 	sts	0x00EF, r24
	sei();
     a9c:	78 94       	sei
}
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	cf 90       	pop	r12
     aa8:	af 90       	pop	r10
     aaa:	08 95       	ret

00000aac <CANIT_vect_rx>:
    CANSTMOB &= ~(1 << RXOK);           // 수신 대기
}
*/
char
CANIT_vect_rx(struct MOb *rmsg)
{
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	fc 01       	movw	r30, r24
    // get CANIDT and CANCDMOB and CANMSg
 // usart1_transmit_string("\rRXOK\n");
    rece_result = _RECE_OK;

    // 표준 혹은 확장 포맷에 맞추어 ID, IDE 결정
    if ((CANCDMOB & 0x10) == 0x00) {                      	// IDE standard ?
     aba:	80 91 ef 00 	lds	r24, 0x00EF
     abe:	84 fd       	sbrc	r24, 4
     ac0:	1b c0       	rjmp	.+54     	; 0xaf8 <CANIT_vect_rx+0x4c>
        rmsg->ide = STD;
     ac2:	15 82       	std	Z+5, r1	; 0x05
        can_id = ((unsigned long)CANIDT1) << 8;
     ac4:	80 91 f3 00 	lds	r24, 0x00F3
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	a0 e0       	ldi	r26, 0x00	; 0
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	ba 2f       	mov	r27, r26
     ad0:	a9 2f       	mov	r26, r25
     ad2:	98 2f       	mov	r25, r24
     ad4:	88 27       	eor	r24, r24
        can_id |= ((unsigned long)CANIDT2);
     ad6:	40 91 f2 00 	lds	r20, 0x00F2
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	84 2b       	or	r24, r20
     ae2:	95 2b       	or	r25, r21
     ae4:	a6 2b       	or	r26, r22
     ae6:	b7 2b       	or	r27, r23
        can_id >>= 5;
     ae8:	35 e0       	ldi	r19, 0x05	; 5
     aea:	b6 95       	lsr	r27
     aec:	a7 95       	ror	r26
     aee:	97 95       	ror	r25
     af0:	87 95       	ror	r24
     af2:	3a 95       	dec	r19
     af4:	d1 f7       	brne	.-12     	; 0xaea <CANIT_vect_rx+0x3e>
     af6:	35 c0       	rjmp	.+106    	; 0xb62 <CANIT_vect_rx+0xb6>
        //usart_transmit_string("\rRx Standard\n");
    } else {
        rmsg->ide = EXT;
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	85 83       	std	Z+5, r24	; 0x05
        can_id = ((unsigned long)CANIDT1) << 24;
     afc:	80 91 f3 00 	lds	r24, 0x00F3
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e0       	ldi	r26, 0x00	; 0
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	b8 2f       	mov	r27, r24
     b08:	aa 27       	eor	r26, r26
     b0a:	99 27       	eor	r25, r25
     b0c:	88 27       	eor	r24, r24
        can_id |= ((unsigned long)CANIDT2) << 16;
     b0e:	c0 90 f2 00 	lds	r12, 0x00F2
        can_id |= ((unsigned long)CANIDT3) << 8;
     b12:	40 91 f1 00 	lds	r20, 0x00F1
        can_id |= ((unsigned long)CANIDT4);
     b16:	00 91 f0 00 	lds	r16, 0x00F0
        can_id >>= 5;
        //usart_transmit_string("\rRx Standard\n");
    } else {
        rmsg->ide = EXT;
        can_id = ((unsigned long)CANIDT1) << 24;
        can_id |= ((unsigned long)CANIDT2) << 16;
     b1a:	dd 24       	eor	r13, r13
     b1c:	ee 24       	eor	r14, r14
     b1e:	ff 24       	eor	r15, r15
     b20:	76 01       	movw	r14, r12
     b22:	dd 24       	eor	r13, r13
     b24:	cc 24       	eor	r12, r12
     b26:	8c 29       	or	r24, r12
     b28:	9d 29       	or	r25, r13
     b2a:	ae 29       	or	r26, r14
     b2c:	bf 29       	or	r27, r15
        can_id |= ((unsigned long)CANIDT3) << 8;
        can_id |= ((unsigned long)CANIDT4);
     b2e:	10 e0       	ldi	r17, 0x00	; 0
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
        //usart_transmit_string("\rRx Standard\n");
    } else {
        rmsg->ide = EXT;
        can_id = ((unsigned long)CANIDT1) << 24;
        can_id |= ((unsigned long)CANIDT2) << 16;
        can_id |= ((unsigned long)CANIDT3) << 8;
     b34:	80 2b       	or	r24, r16
     b36:	91 2b       	or	r25, r17
     b38:	a2 2b       	or	r26, r18
     b3a:	b3 2b       	or	r27, r19
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	76 2f       	mov	r23, r22
     b44:	65 2f       	mov	r22, r21
     b46:	54 2f       	mov	r21, r20
     b48:	44 27       	eor	r20, r20
        can_id |= ((unsigned long)CANIDT4);
     b4a:	84 2b       	or	r24, r20
     b4c:	95 2b       	or	r25, r21
     b4e:	a6 2b       	or	r26, r22
     b50:	b7 2b       	or	r27, r23
        can_id >>= 3;
     b52:	68 94       	set
     b54:	12 f8       	bld	r1, 2
     b56:	b6 95       	lsr	r27
     b58:	a7 95       	ror	r26
     b5a:	97 95       	ror	r25
     b5c:	87 95       	ror	r24
     b5e:	16 94       	lsr	r1
     b60:	d1 f7       	brne	.-12     	; 0xb56 <CANIT_vect_rx+0xaa>
        //usart_transmit_string("\rRx Extended\n");
    }
    rmsg->id = can_id;                 	// 구조체 변수로 CANID 대입
     b62:	80 83       	st	Z, r24
     b64:	91 83       	std	Z+1, r25	; 0x01
     b66:	a2 83       	std	Z+2, r26	; 0x02
     b68:	b3 83       	std	Z+3, r27	; 0x03

    rmsg->dlc = CANCDMOB & 0x0f;       	// 수신 메시지 길이
     b6a:	80 91 ef 00 	lds	r24, 0x00EF
     b6e:	8f 70       	andi	r24, 0x0F	; 15
     b70:	86 83       	std	Z+6, r24	; 0x06

    // get data
    for (i = 0; i < (CANCDMOB & 0xf); i++) {
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	09 c0       	rjmp	.+18     	; 0xb88 <CANIT_vect_rx+0xdc>
        rmsg->data[i] = CANMSG;       	// 메시지 데이터 배열에 저장
     b76:	80 91 fa 00 	lds	r24, 0x00FA
     b7a:	2e 0f       	add	r18, r30
     b7c:	3f 1f       	adc	r19, r31
     b7e:	d9 01       	movw	r26, r18
     b80:	17 96       	adiw	r26, 0x07	; 7
     b82:	8c 93       	st	X, r24
     b84:	17 97       	sbiw	r26, 0x07	; 7
    rmsg->id = can_id;                 	// 구조체 변수로 CANID 대입

    rmsg->dlc = CANCDMOB & 0x0f;       	// 수신 메시지 길이

    // get data
    for (i = 0; i < (CANCDMOB & 0xf); i++) {
     b86:	4f 5f       	subi	r20, 0xFF	; 255
     b88:	24 2f       	mov	r18, r20
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	80 91 ef 00 	lds	r24, 0x00EF
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	8f 70       	andi	r24, 0x0F	; 15
     b94:	90 70       	andi	r25, 0x00	; 0
     b96:	28 17       	cp	r18, r24
     b98:	39 07       	cpc	r19, r25
     b9a:	6c f3       	brlt	.-38     	; 0xb76 <CANIT_vect_rx+0xca>
        rmsg->data[i] = CANMSG;       	// 메시지 데이터 배열에 저장
    }

    // rx init
    CANSTMOB = 0x00;                    // 상태 초기화
     b9c:	10 92 ee 00 	sts	0x00EE, r1

    // enable reception mode and ide set
    CANCDMOB |= (1 << CONMOB1);         // 수신 IDE 유지하고 수신 모드 설정
     ba0:	80 91 ef 00 	lds	r24, 0x00EF
     ba4:	80 68       	ori	r24, 0x80	; 128
     ba6:	80 93 ef 00 	sts	0x00EF, r24

    // reset flag
    CANSTMOB &= ~(1 << RXOK);           // 수신 대기
     baa:	80 91 ee 00 	lds	r24, 0x00EE
     bae:	8f 7d       	andi	r24, 0xDF	; 223
     bb0:	80 93 ee 00 	sts	0x00EE, r24

	return rece_result;
}
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	df 90       	pop	r13
     bc0:	cf 90       	pop	r12
     bc2:	08 95       	ret

00000bc4 <MOTOR_init>:
// T/C3_OC_A는 DC 모터(_MOTOR_EN), _C는 RC Servo 모터(_MOTOR_IN2, _IN1)
void
MOTOR_init(void)
{
    // init port : PG3/1/0, PC[7:0]
    on(DDRE, _MOTOR_SERVO | _MOTOR_EN | _MOTOR_IN2 | _MOTOR_IN1);             // DC 모터
     bc4:	8d b1       	in	r24, 0x0d	; 13
     bc6:	8b 62       	ori	r24, 0x2B	; 43
     bc8:	8d b9       	out	0x0d, r24	; 13

    TCCR3A = TCCR3B = 0;
     bca:	a1 e9       	ldi	r26, 0x91	; 145
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	1c 92       	st	X, r1
     bd0:	e0 e9       	ldi	r30, 0x90	; 144
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	10 82       	st	Z, r1
    on(TCCR3A, _BV(COM3A1) | _BV(COM3C1));                  // OC A, C 출력 모드 설정. 비교 일치 발생 시 모두 OC3A(PE3), OC3C(PE5)는 LOW로 바뀜
     bd6:	80 81       	ld	r24, Z
     bd8:	88 68       	ori	r24, 0x88	; 136
     bda:	80 83       	st	Z, r24
    on(TCCR3B, _BV(CS31) | _BV(CS30));                      // 분주비 64
     bdc:	8c 91       	ld	r24, X
     bde:	83 60       	ori	r24, 0x03	; 3
     be0:	8c 93       	st	X, r24
    on(TCCR3B, _BV(WGM33)), on(TCCR3A, _BV(WGM31));         // 위상 교정 PWM, TOP는 ICR3
     be2:	8c 91       	ld	r24, X
     be4:	80 61       	ori	r24, 0x10	; 16
     be6:	8c 93       	st	X, r24
     be8:	80 81       	ld	r24, Z
     bea:	82 60       	ori	r24, 0x02	; 2
     bec:	80 83       	st	Z, r24
    
    // TOP = 3125, PWM 파형은 40Hz(25msec)
    // 위상 교정 PWM 모드에서 PWM 주파수는 F_CPU / (2 * PRESCALE * TOP)
    ICR3 = _MOTOR_MEASURED * _MOTOR_SERVO_PERIOD;
     bee:	85 e3       	ldi	r24, 0x35	; 53
     bf0:	9c e0       	ldi	r25, 0x0C	; 12
     bf2:	90 93 97 00 	sts	0x0097, r25
     bf6:	80 93 96 00 	sts	0x0096, r24

    OCR3C = 70;                                             // 최저값(output compare) PE5 pin output
     bfa:	86 e4       	ldi	r24, 0x46	; 70
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 9d 00 	sts	0x009D, r25
     c02:	80 93 9c 00 	sts	0x009C, r24
}
     c06:	08 95       	ret

00000c08 <MOTOR_DC_cntl>:

// 0 <= |speed| <= 25, speed < 0면 counter-clockwise
void
MOTOR_DC_cntl(int speed)
{
     c08:	9c 01       	movw	r18, r24
    if (_MOTOR_speed == speed || speed < -(_MOTOR_LEVEL) || speed > _MOTOR_LEVEL)
     c0a:	80 91 c3 03 	lds	r24, 0x03C3
     c0e:	90 91 c4 03 	lds	r25, 0x03C4
     c12:	82 17       	cp	r24, r18
     c14:	93 07       	cpc	r25, r19
     c16:	09 f4       	brne	.+2      	; 0xc1a <MOTOR_DC_cntl+0x12>
     c18:	41 c0       	rjmp	.+130    	; 0xc9c <MOTOR_DC_cntl+0x94>
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	27 3e       	cpi	r18, 0xE7	; 231
     c1e:	38 07       	cpc	r19, r24
     c20:	ec f1       	brlt	.+122    	; 0xc9c <MOTOR_DC_cntl+0x94>
     c22:	2a 31       	cpi	r18, 0x1A	; 26
     c24:	31 05       	cpc	r19, r1
     c26:	d4 f5       	brge	.+116    	; 0xc9c <MOTOR_DC_cntl+0x94>
        return;
    if (_MOTOR_speed * speed < 0) {
     c28:	40 91 c3 03 	lds	r20, 0x03C3
     c2c:	50 91 c4 03 	lds	r21, 0x03C4
     c30:	42 9f       	mul	r20, r18
     c32:	c0 01       	movw	r24, r0
     c34:	43 9f       	mul	r20, r19
     c36:	90 0d       	add	r25, r0
     c38:	52 9f       	mul	r21, r18
     c3a:	90 0d       	add	r25, r0
     c3c:	11 24       	eor	r1, r1
     c3e:	97 ff       	sbrs	r25, 7
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <MOTOR_DC_cntl+0x3e>
        off(PORTE, _MOTOR_IN1), off(PORTE, _MOTOR_IN2);
     c42:	70 98       	cbi	0x0e, 0	; 14
     c44:	71 98       	cbi	0x0e, 1	; 14
        //mdelay(400);
    }
    _MOTOR_speed = speed;
     c46:	30 93 c4 03 	sts	0x03C4, r19
     c4a:	20 93 c3 03 	sts	0x03C3, r18

    if (speed > 0) {                    // clockwise
     c4e:	12 16       	cp	r1, r18
     c50:	13 06       	cpc	r1, r19
     c52:	3c f4       	brge	.+14     	; 0xc62 <MOTOR_DC_cntl+0x5a>
        on(PORTE, _MOTOR_IN1), off(PORTE, _MOTOR_IN2);
     c54:	70 9a       	sbi	0x0e, 0	; 14
     c56:	71 98       	cbi	0x0e, 1	; 14
        OCR3A = (ICR3 / _MOTOR_LEVEL) * speed;
     c58:	80 91 96 00 	lds	r24, 0x0096
     c5c:	90 91 97 00 	lds	r25, 0x0097
     c60:	0c c0       	rjmp	.+24     	; 0xc7a <MOTOR_DC_cntl+0x72>
    } else if (speed < 0) {             // counter-clockwise
        off(PORTE, _MOTOR_IN1), on(PORTE, _MOTOR_IN2);
     c62:	70 98       	cbi	0x0e, 0	; 14
    _MOTOR_speed = speed;

    if (speed > 0) {                    // clockwise
        on(PORTE, _MOTOR_IN1), off(PORTE, _MOTOR_IN2);
        OCR3A = (ICR3 / _MOTOR_LEVEL) * speed;
    } else if (speed < 0) {             // counter-clockwise
     c64:	21 15       	cp	r18, r1
     c66:	31 05       	cpc	r19, r1
     c68:	c1 f0       	breq	.+48     	; 0xc9a <MOTOR_DC_cntl+0x92>
        off(PORTE, _MOTOR_IN1), on(PORTE, _MOTOR_IN2);
     c6a:	71 9a       	sbi	0x0e, 1	; 14
        OCR3A = (ICR3 / _MOTOR_LEVEL) * (-speed);
     c6c:	80 91 96 00 	lds	r24, 0x0096
     c70:	90 91 97 00 	lds	r25, 0x0097
     c74:	30 95       	com	r19
     c76:	21 95       	neg	r18
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	69 e1       	ldi	r22, 0x19	; 25
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodhi4>
     c82:	26 9f       	mul	r18, r22
     c84:	c0 01       	movw	r24, r0
     c86:	27 9f       	mul	r18, r23
     c88:	90 0d       	add	r25, r0
     c8a:	36 9f       	mul	r19, r22
     c8c:	90 0d       	add	r25, r0
     c8e:	11 24       	eor	r1, r1
     c90:	90 93 99 00 	sts	0x0099, r25
     c94:	80 93 98 00 	sts	0x0098, r24
     c98:	08 95       	ret
    } else {                            // motor stop
        off(PORTE, _MOTOR_IN1), off(PORTE, _MOTOR_IN2);
     c9a:	71 98       	cbi	0x0e, 1	; 14
     c9c:	08 95       	ret

00000c9e <MOTOR_servo_cntl>:
    mdelay(400);*/
}
// Servo 모터 회전 제어(0 <= deg <= 180 : clockwise)
void
MOTOR_servo_cntl(int deg)
{
     c9e:	8f 92       	push	r8
     ca0:	9f 92       	push	r9
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
    if (_MOTOR_deg == deg || deg < 0 || deg > 180)
     cae:	20 91 c1 03 	lds	r18, 0x03C1
     cb2:	30 91 c2 03 	lds	r19, 0x03C2
     cb6:	28 17       	cp	r18, r24
     cb8:	39 07       	cpc	r19, r25
     cba:	09 f4       	brne	.+2      	; 0xcbe <MOTOR_servo_cntl+0x20>
     cbc:	4a c0       	rjmp	.+148    	; 0xd52 <MOTOR_servo_cntl+0xb4>
     cbe:	97 fd       	sbrc	r25, 7
     cc0:	48 c0       	rjmp	.+144    	; 0xd52 <MOTOR_servo_cntl+0xb4>
     cc2:	85 3b       	cpi	r24, 0xB5	; 181
     cc4:	91 05       	cpc	r25, r1
     cc6:	0c f0       	brlt	.+2      	; 0xcca <MOTOR_servo_cntl+0x2c>
     cc8:	44 c0       	rjmp	.+136    	; 0xd52 <MOTOR_servo_cntl+0xb4>
        return;
    _MOTOR_deg = deg;
     cca:	90 93 c2 03 	sts	0x03C2, r25
     cce:	80 93 c1 03 	sts	0x03C1, r24

    OCR3C = _MOTOR_MEASURED * (1.6*deg/180 + (0.15*deg/180 + 0.6));
     cd2:	9c 01       	movw	r18, r24
     cd4:	b9 01       	movw	r22, r18
     cd6:	88 27       	eor	r24, r24
     cd8:	77 fd       	sbrc	r23, 7
     cda:	80 95       	com	r24
     cdc:	98 2f       	mov	r25, r24
     cde:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__floatsisf>
     ce2:	6b 01       	movw	r12, r22
     ce4:	7c 01       	movw	r14, r24
     ce6:	2d ec       	ldi	r18, 0xCD	; 205
     ce8:	3c ec       	ldi	r19, 0xCC	; 204
     cea:	4c ec       	ldi	r20, 0xCC	; 204
     cec:	5f e3       	ldi	r21, 0x3F	; 63
     cee:	0e 94 1e 0a 	call	0x143c	; 0x143c <__mulsf3>
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	44 e3       	ldi	r20, 0x34	; 52
     cf8:	53 e4       	ldi	r21, 0x43	; 67
     cfa:	0e 94 1f 0b 	call	0x163e	; 0x163e <__divsf3>
     cfe:	4b 01       	movw	r8, r22
     d00:	5c 01       	movw	r10, r24
     d02:	c7 01       	movw	r24, r14
     d04:	b6 01       	movw	r22, r12
     d06:	2a e9       	ldi	r18, 0x9A	; 154
     d08:	39 e9       	ldi	r19, 0x99	; 153
     d0a:	49 e1       	ldi	r20, 0x19	; 25
     d0c:	5e e3       	ldi	r21, 0x3E	; 62
     d0e:	0e 94 1e 0a 	call	0x143c	; 0x143c <__mulsf3>
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	44 e3       	ldi	r20, 0x34	; 52
     d18:	53 e4       	ldi	r21, 0x43	; 67
     d1a:	0e 94 1f 0b 	call	0x163e	; 0x163e <__divsf3>
     d1e:	2a e9       	ldi	r18, 0x9A	; 154
     d20:	39 e9       	ldi	r19, 0x99	; 153
     d22:	49 e1       	ldi	r20, 0x19	; 25
     d24:	5f e3       	ldi	r21, 0x3F	; 63
     d26:	0e 94 b2 09 	call	0x1364	; 0x1364 <__addsf3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	c5 01       	movw	r24, r10
     d30:	b4 01       	movw	r22, r8
     d32:	0e 94 b2 09 	call	0x1364	; 0x1364 <__addsf3>
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	4a ef       	ldi	r20, 0xFA	; 250
     d3c:	52 e4       	ldi	r21, 0x42	; 66
     d3e:	0e 94 1e 0a 	call	0x143c	; 0x143c <__mulsf3>
     d42:	0e 94 31 08 	call	0x1062	; 0x1062 <__fixunssfsi>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	90 93 9d 00 	sts	0x009D, r25
     d4e:	80 93 9c 00 	sts	0x009C, r24
    //mdelay(400);
}
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	df 90       	pop	r13
     d58:	cf 90       	pop	r12
     d5a:	bf 90       	pop	r11
     d5c:	af 90       	pop	r10
     d5e:	9f 90       	pop	r9
     d60:	8f 90       	pop	r8
     d62:	08 95       	ret

00000d64 <MOTOR_to_speed>:


/* deprecated */
int
MOTOR_to_speed(unsigned int volt, unsigned int max)     // DC, y
{
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
    float score;
    score = 54 * volt / max;
     d6c:	26 e3       	ldi	r18, 0x36	; 54
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	ac 01       	movw	r20, r24
     d72:	42 9f       	mul	r20, r18
     d74:	c0 01       	movw	r24, r0
     d76:	43 9f       	mul	r20, r19
     d78:	90 0d       	add	r25, r0
     d7a:	52 9f       	mul	r21, r18
     d7c:	90 0d       	add	r25, r0
     d7e:	11 24       	eor	r1, r1
     d80:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodhi4>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__floatunsisf>
     d8c:	8b 01       	movw	r16, r22
     d8e:	d8 2f       	mov	r29, r24
     d90:	c9 2f       	mov	r28, r25
    if (score < 5)
     d92:	9e 01       	movw	r18, r28
     d94:	86 2f       	mov	r24, r22
     d96:	91 2f       	mov	r25, r17
     d98:	a3 2f       	mov	r26, r19
     d9a:	b2 2f       	mov	r27, r18
     d9c:	bc 01       	movw	r22, r24
     d9e:	cd 01       	movw	r24, r26
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 ea       	ldi	r20, 0xA0	; 160
     da6:	50 e4       	ldi	r21, 0x40	; 64
     da8:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     dac:	87 fd       	sbrc	r24, 7
     dae:	8a c0       	rjmp	.+276    	; 0xec4 <MOTOR_to_speed+0x160>
        return -25;
    if (score < 10)
     db0:	9e 01       	movw	r18, r28
     db2:	80 2f       	mov	r24, r16
     db4:	91 2f       	mov	r25, r17
     db6:	a3 2f       	mov	r26, r19
     db8:	b2 2f       	mov	r27, r18
     dba:	bc 01       	movw	r22, r24
     dbc:	cd 01       	movw	r24, r26
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 e2       	ldi	r20, 0x20	; 32
     dc4:	51 e4       	ldi	r21, 0x41	; 65
     dc6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     dca:	87 fd       	sbrc	r24, 7
     dcc:	7e c0       	rjmp	.+252    	; 0xeca <MOTOR_to_speed+0x166>
        return -20;
    if (score < 15)
     dce:	9e 01       	movw	r18, r28
     dd0:	80 2f       	mov	r24, r16
     dd2:	91 2f       	mov	r25, r17
     dd4:	a3 2f       	mov	r26, r19
     dd6:	b2 2f       	mov	r27, r18
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e7       	ldi	r20, 0x70	; 112
     de2:	51 e4       	ldi	r21, 0x41	; 65
     de4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     de8:	87 fd       	sbrc	r24, 7
     dea:	72 c0       	rjmp	.+228    	; 0xed0 <MOTOR_to_speed+0x16c>
        return -15;
    if (score < 20)
     dec:	9e 01       	movw	r18, r28
     dee:	80 2f       	mov	r24, r16
     df0:	91 2f       	mov	r25, r17
     df2:	a3 2f       	mov	r26, r19
     df4:	b2 2f       	mov	r27, r18
     df6:	bc 01       	movw	r22, r24
     df8:	cd 01       	movw	r24, r26
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 ea       	ldi	r20, 0xA0	; 160
     e00:	51 e4       	ldi	r21, 0x41	; 65
     e02:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     e06:	87 fd       	sbrc	r24, 7
     e08:	66 c0       	rjmp	.+204    	; 0xed6 <MOTOR_to_speed+0x172>
        return -10;
    if (score < 25)
     e0a:	9e 01       	movw	r18, r28
     e0c:	80 2f       	mov	r24, r16
     e0e:	91 2f       	mov	r25, r17
     e10:	a3 2f       	mov	r26, r19
     e12:	b2 2f       	mov	r27, r18
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	48 ec       	ldi	r20, 0xC8	; 200
     e1e:	51 e4       	ldi	r21, 0x41	; 65
     e20:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     e24:	87 fd       	sbrc	r24, 7
     e26:	5a c0       	rjmp	.+180    	; 0xedc <MOTOR_to_speed+0x178>
        return -5;
    if (score < 30)
     e28:	9e 01       	movw	r18, r28
     e2a:	80 2f       	mov	r24, r16
     e2c:	91 2f       	mov	r25, r17
     e2e:	a3 2f       	mov	r26, r19
     e30:	b2 2f       	mov	r27, r18
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 ef       	ldi	r20, 0xF0	; 240
     e3c:	51 e4       	ldi	r21, 0x41	; 65
     e3e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     e42:	87 fd       	sbrc	r24, 7
     e44:	4e c0       	rjmp	.+156    	; 0xee2 <MOTOR_to_speed+0x17e>
        return 0;
    if (score < 35)
     e46:	9e 01       	movw	r18, r28
     e48:	80 2f       	mov	r24, r16
     e4a:	91 2f       	mov	r25, r17
     e4c:	a3 2f       	mov	r26, r19
     e4e:	b2 2f       	mov	r27, r18
     e50:	bc 01       	movw	r22, r24
     e52:	cd 01       	movw	r24, r26
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	4c e0       	ldi	r20, 0x0C	; 12
     e5a:	52 e4       	ldi	r21, 0x42	; 66
     e5c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     e60:	87 fd       	sbrc	r24, 7
     e62:	42 c0       	rjmp	.+132    	; 0xee8 <MOTOR_to_speed+0x184>
        return 5;
    if (score < 40)
     e64:	9e 01       	movw	r18, r28
     e66:	80 2f       	mov	r24, r16
     e68:	91 2f       	mov	r25, r17
     e6a:	a3 2f       	mov	r26, r19
     e6c:	b2 2f       	mov	r27, r18
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	52 e4       	ldi	r21, 0x42	; 66
     e7a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     e7e:	87 fd       	sbrc	r24, 7
     e80:	36 c0       	rjmp	.+108    	; 0xeee <MOTOR_to_speed+0x18a>
        return 10;
    if (score < 45)
     e82:	9e 01       	movw	r18, r28
     e84:	80 2f       	mov	r24, r16
     e86:	91 2f       	mov	r25, r17
     e88:	a3 2f       	mov	r26, r19
     e8a:	b2 2f       	mov	r27, r18
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	44 e3       	ldi	r20, 0x34	; 52
     e96:	52 e4       	ldi	r21, 0x42	; 66
     e98:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     e9c:	87 fd       	sbrc	r24, 7
     e9e:	2a c0       	rjmp	.+84     	; 0xef4 <MOTOR_to_speed+0x190>
        return 15;
    if (score < 50)
     ea0:	9e 01       	movw	r18, r28
     ea2:	80 2f       	mov	r24, r16
     ea4:	91 2f       	mov	r25, r17
     ea6:	a3 2f       	mov	r26, r19
     ea8:	b2 2f       	mov	r27, r18
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	48 e4       	ldi	r20, 0x48	; 72
     eb4:	52 e4       	ldi	r21, 0x42	; 66
     eb6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__ltsf2>
     eba:	87 ff       	sbrs	r24, 7
     ebc:	1e c0       	rjmp	.+60     	; 0xefa <MOTOR_to_speed+0x196>
        return 20;
     ebe:	84 e1       	ldi	r24, 0x14	; 20
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	1d c0       	rjmp	.+58     	; 0xefe <MOTOR_to_speed+0x19a>
MOTOR_to_speed(unsigned int volt, unsigned int max)     // DC, y
{
    float score;
    score = 54 * volt / max;
    if (score < 5)
        return -25;
     ec4:	87 ee       	ldi	r24, 0xE7	; 231
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	1a c0       	rjmp	.+52     	; 0xefe <MOTOR_to_speed+0x19a>
    if (score < 10)
        return -20;
     eca:	8c ee       	ldi	r24, 0xEC	; 236
     ecc:	9f ef       	ldi	r25, 0xFF	; 255
     ece:	17 c0       	rjmp	.+46     	; 0xefe <MOTOR_to_speed+0x19a>
    if (score < 15)
        return -15;
     ed0:	81 ef       	ldi	r24, 0xF1	; 241
     ed2:	9f ef       	ldi	r25, 0xFF	; 255
     ed4:	14 c0       	rjmp	.+40     	; 0xefe <MOTOR_to_speed+0x19a>
    if (score < 20)
        return -10;
     ed6:	86 ef       	ldi	r24, 0xF6	; 246
     ed8:	9f ef       	ldi	r25, 0xFF	; 255
     eda:	11 c0       	rjmp	.+34     	; 0xefe <MOTOR_to_speed+0x19a>
    if (score < 25)
        return -5;
     edc:	8b ef       	ldi	r24, 0xFB	; 251
     ede:	9f ef       	ldi	r25, 0xFF	; 255
     ee0:	0e c0       	rjmp	.+28     	; 0xefe <MOTOR_to_speed+0x19a>
    if (score < 30)
        return 0;
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0b c0       	rjmp	.+22     	; 0xefe <MOTOR_to_speed+0x19a>
    if (score < 35)
        return 5;
     ee8:	85 e0       	ldi	r24, 0x05	; 5
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	08 c0       	rjmp	.+16     	; 0xefe <MOTOR_to_speed+0x19a>
    if (score < 40)
        return 10;
     eee:	8a e0       	ldi	r24, 0x0A	; 10
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <MOTOR_to_speed+0x19a>
    if (score < 45)
        return 15;
     ef4:	8f e0       	ldi	r24, 0x0F	; 15
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <MOTOR_to_speed+0x19a>
    if (score < 50)
        return 20;
    return 25;
     efa:	89 e1       	ldi	r24, 0x19	; 25
     efc:	90 e0       	ldi	r25, 0x00	; 0
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	08 95       	ret

00000f08 <MOTOR_to_deg>:
/* deprecated */
int
MOTOR_to_deg(unsigned int volt, unsigned int max)      // Servo, x
{
    int deg;
    deg = 180 * volt / max;
     f08:	24 eb       	ldi	r18, 0xB4	; 180
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	ac 01       	movw	r20, r24
     f0e:	42 9f       	mul	r20, r18
     f10:	c0 01       	movw	r24, r0
     f12:	43 9f       	mul	r20, r19
     f14:	90 0d       	add	r25, r0
     f16:	52 9f       	mul	r21, r18
     f18:	90 0d       	add	r25, r0
     f1a:	11 24       	eor	r1, r1
     f1c:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodhi4>
     f20:	cb 01       	movw	r24, r22
    if (-10 < volt && volt < 10)
        return 0;
    return deg;
}
     f22:	08 95       	ret

00000f24 <__vector_1>:
unsigned char           gear = GEAR_FWD, gear_prev = GEAR_FWD, gear_set_failed = FALSE;
int                     speed = 0, speed_diff = 0;

// INT0: 전진 기어, INT1: 후진 기어
ISR(INT0_vect)
{
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
    if (engine && gear != GEAR_FWD) {
     f32:	80 91 be 03 	lds	r24, 0x03BE
     f36:	88 23       	and	r24, r24
     f38:	81 f0       	breq	.+32     	; 0xf5a <__vector_1+0x36>
     f3a:	80 91 ba 03 	lds	r24, 0x03BA
     f3e:	88 23       	and	r24, r24
     f40:	61 f0       	breq	.+24     	; 0xf5a <__vector_1+0x36>
        if (!speed)     // 기어를 바꾸는 건 정지 상태일 때만
     f42:	80 91 b6 03 	lds	r24, 0x03B6
     f46:	90 91 b7 03 	lds	r25, 0x03B7
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	19 f4       	brne	.+6      	; 0xf54 <__vector_1+0x30>
            gear = GEAR_FWD;
     f4e:	10 92 ba 03 	sts	0x03BA, r1
     f52:	03 c0       	rjmp	.+6      	; 0xf5a <__vector_1+0x36>
        else
            gear_set_failed = TRUE;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 b8 03 	sts	0x03B8, r24
    }
}
     f5a:	9f 91       	pop	r25
     f5c:	8f 91       	pop	r24
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <__vector_2>:
ISR(INT1_vect)
{
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	8f 93       	push	r24
     f74:	9f 93       	push	r25
    if (engine && gear != GEAR_REV) {
     f76:	80 91 be 03 	lds	r24, 0x03BE
     f7a:	88 23       	and	r24, r24
     f7c:	89 f0       	breq	.+34     	; 0xfa0 <__vector_2+0x38>
     f7e:	80 91 ba 03 	lds	r24, 0x03BA
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	69 f0       	breq	.+26     	; 0xfa0 <__vector_2+0x38>
        if (!speed)     // 기어를 바꾸는 건 정지 상태일 때만
     f86:	80 91 b6 03 	lds	r24, 0x03B6
     f8a:	90 91 b7 03 	lds	r25, 0x03B7
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	21 f4       	brne	.+8      	; 0xf9a <__vector_2+0x32>
            gear = GEAR_REV;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	80 93 ba 03 	sts	0x03BA, r24
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <__vector_2+0x38>
        else
            gear_set_failed = TRUE;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	80 93 b8 03 	sts	0x03B8, r24
    }
}
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	0f 90       	pop	r0
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	0f 90       	pop	r0
     faa:	1f 90       	pop	r1
     fac:	18 95       	reti

00000fae <__vector_18>:

// CAN 수신 인터럽트 처리 루틴
ISR(CANIT_vect)
{
     fae:	1f 92       	push	r1
     fb0:	0f 92       	push	r0
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	0f 92       	push	r0
     fb6:	0b b6       	in	r0, 0x3b	; 59
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	2f 93       	push	r18
     fbe:	3f 93       	push	r19
     fc0:	4f 93       	push	r20
     fc2:	5f 93       	push	r21
     fc4:	6f 93       	push	r22
     fc6:	7f 93       	push	r23
     fc8:	8f 93       	push	r24
     fca:	9f 93       	push	r25
     fcc:	af 93       	push	r26
     fce:	bf 93       	push	r27
     fd0:	ef 93       	push	r30
     fd2:	ff 93       	push	r31
    CANIT_vect_rx(&rmsg);
     fd4:	87 ec       	ldi	r24, 0xC7	; 199
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	0e 94 56 05 	call	0xaac	; 0xaac <CANIT_vect_rx>
    //printf("CANIT_vect: { %d, %d, %d, %d, %d, %d, %d, %d }\n", rmsg.data[0], rmsg.data[1], rmsg.data[2], rmsg.data[3], rmsg.data[4], rmsg.data[5], rmsg.data[6], rmsg.data[7]);
    switch (rmsg.data[0]) {     // 발신 노드 
     fdc:	80 91 ce 03 	lds	r24, 0x03CE
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	19 f0       	breq	.+6      	; 0xfea <__vector_18+0x3c>
     fe4:	84 30       	cpi	r24, 0x04	; 4
     fe6:	51 f5       	brne	.+84     	; 0x103c <__vector_18+0x8e>
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <__vector_18+0x4e>
        case 1:
            switch (rmsg.data[1]) {     // 타입
     fea:	80 91 cf 03 	lds	r24, 0x03CF
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	29 f5       	brne	.+74     	; 0x103c <__vector_18+0x8e>
                case CAN_12_ENGINE:
                    engine = rmsg.data[2];
     ff2:	80 91 d0 03 	lds	r24, 0x03D0
     ff6:	80 93 be 03 	sts	0x03BE, r24
                    break;
     ffa:	20 c0       	rjmp	.+64     	; 0x103c <__vector_18+0x8e>
            }    
            break;
        case 4:
            switch (rmsg.data[1]) {
     ffc:	80 91 cf 03 	lds	r24, 0x03CF
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	19 f0       	breq	.+6      	; 0x100a <__vector_18+0x5c>
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	d1 f4       	brne	.+52     	; 0x103c <__vector_18+0x8e>
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <__vector_18+0x66>
                case CAN_42_DIRSIG:
                    dir_signal = rmsg.data[2];
    100a:	80 91 d0 03 	lds	r24, 0x03D0
    100e:	80 93 bc 03 	sts	0x03BC, r24
                    break;
    1012:	14 c0       	rjmp	.+40     	; 0x103c <__vector_18+0x8e>
                case CAN_42_SPEED_DIFF:
                    if (rmsg.data[2] > JOY_THRES_H)
    1014:	80 91 d0 03 	lds	r24, 0x03D0
    1018:	8c 32       	cpi	r24, 0x2C	; 44
    101a:	18 f0       	brcs	.+6      	; 0x1022 <__vector_18+0x74>
                        speed_diff = JOY_DIR;
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	9f ef       	ldi	r25, 0xFF	; 255
    1020:	04 c0       	rjmp	.+8      	; 0x102a <__vector_18+0x7c>
                    else if (rmsg.data[2] < JOY_THRES_L)
    1022:	84 31       	cpi	r24, 0x14	; 20
    1024:	38 f4       	brcc	.+14     	; 0x1034 <__vector_18+0x86>
                        speed_diff = -(JOY_DIR);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	90 93 b5 03 	sts	0x03B5, r25
    102e:	80 93 b4 03 	sts	0x03B4, r24
    1032:	04 c0       	rjmp	.+8      	; 0x103c <__vector_18+0x8e>
                    else
                        speed_diff = 0;
    1034:	10 92 b5 03 	sts	0x03B5, r1
    1038:	10 92 b4 03 	sts	0x03B4, r1
                    break;
            }
            break;
    }
}
    103c:	ff 91       	pop	r31
    103e:	ef 91       	pop	r30
    1040:	bf 91       	pop	r27
    1042:	af 91       	pop	r26
    1044:	9f 91       	pop	r25
    1046:	8f 91       	pop	r24
    1048:	7f 91       	pop	r23
    104a:	6f 91       	pop	r22
    104c:	5f 91       	pop	r21
    104e:	4f 91       	pop	r20
    1050:	3f 91       	pop	r19
    1052:	2f 91       	pop	r18
    1054:	0f 90       	pop	r0
    1056:	0b be       	out	0x3b, r0	; 59
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <__fixunssfsi>:
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	6b 01       	movw	r12, r22
    1070:	7c 01       	movw	r14, r24
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	5f e4       	ldi	r21, 0x4F	; 79
    107a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__gesf2>
    107e:	87 fd       	sbrc	r24, 7
    1080:	11 c0       	rjmp	.+34     	; 0x10a4 <__fixunssfsi+0x42>
    1082:	c7 01       	movw	r24, r14
    1084:	b6 01       	movw	r22, r12
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	5f e4       	ldi	r21, 0x4F	; 79
    108e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__subsf3>
    1092:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fixsfsi>
    1096:	8b 01       	movw	r16, r22
    1098:	9c 01       	movw	r18, r24
    109a:	00 50       	subi	r16, 0x00	; 0
    109c:	10 40       	sbci	r17, 0x00	; 0
    109e:	20 40       	sbci	r18, 0x00	; 0
    10a0:	30 48       	sbci	r19, 0x80	; 128
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <__fixunssfsi+0x4e>
    10a4:	c7 01       	movw	r24, r14
    10a6:	b6 01       	movw	r22, r12
    10a8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__fixsfsi>
    10ac:	8b 01       	movw	r16, r22
    10ae:	9c 01       	movw	r18, r24
    10b0:	b8 01       	movw	r22, r16
    10b2:	c9 01       	movw	r24, r18
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	08 95       	ret

000010c2 <_fpadd_parts>:
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e6       	ldi	r30, 0x67	; 103
    10c8:	f8 e0       	ldi	r31, 0x08	; 8
    10ca:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__prologue_saves__+0x4>
    10ce:	ec 01       	movw	r28, r24
    10d0:	4b 01       	movw	r8, r22
    10d2:	fa 01       	movw	r30, r20
    10d4:	88 81       	ld	r24, Y
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	08 f4       	brcc	.+2      	; 0x10dc <_fpadd_parts+0x1a>
    10da:	3e c1       	rjmp	.+636    	; 0x1358 <__stack+0x259>
    10dc:	db 01       	movw	r26, r22
    10de:	9c 91       	ld	r25, X
    10e0:	92 30       	cpi	r25, 0x02	; 2
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <_fpadd_parts+0x24>
    10e4:	36 c1       	rjmp	.+620    	; 0x1352 <__stack+0x253>
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	59 f4       	brne	.+22     	; 0x1100 <__stack+0x1>
    10ea:	94 30       	cpi	r25, 0x04	; 4
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <_fpadd_parts+0x2e>
    10ee:	34 c1       	rjmp	.+616    	; 0x1358 <__stack+0x259>
    10f0:	99 81       	ldd	r25, Y+1	; 0x01
    10f2:	11 96       	adiw	r26, 0x01	; 1
    10f4:	8c 91       	ld	r24, X
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	98 17       	cp	r25, r24
    10fa:	09 f0       	breq	.+2      	; 0x10fe <_fpadd_parts+0x3c>
    10fc:	27 c1       	rjmp	.+590    	; 0x134c <__stack+0x24d>
    10fe:	2c c1       	rjmp	.+600    	; 0x1358 <__stack+0x259>
    1100:	94 30       	cpi	r25, 0x04	; 4
    1102:	09 f4       	brne	.+2      	; 0x1106 <__stack+0x7>
    1104:	26 c1       	rjmp	.+588    	; 0x1352 <__stack+0x253>
    1106:	92 30       	cpi	r25, 0x02	; 2
    1108:	a9 f4       	brne	.+42     	; 0x1134 <__stack+0x35>
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	09 f0       	breq	.+2      	; 0x1110 <__stack+0x11>
    110e:	24 c1       	rjmp	.+584    	; 0x1358 <__stack+0x259>
    1110:	ce 01       	movw	r24, r28
    1112:	28 e0       	ldi	r18, 0x08	; 8
    1114:	dc 01       	movw	r26, r24
    1116:	0d 90       	ld	r0, X+
    1118:	cd 01       	movw	r24, r26
    111a:	da 01       	movw	r26, r20
    111c:	0d 92       	st	X+, r0
    111e:	ad 01       	movw	r20, r26
    1120:	21 50       	subi	r18, 0x01	; 1
    1122:	c1 f7       	brne	.-16     	; 0x1114 <__stack+0x15>
    1124:	d4 01       	movw	r26, r8
    1126:	11 96       	adiw	r26, 0x01	; 1
    1128:	8c 91       	ld	r24, X
    112a:	11 97       	sbiw	r26, 0x01	; 1
    112c:	99 81       	ldd	r25, Y+1	; 0x01
    112e:	89 23       	and	r24, r25
    1130:	81 83       	std	Z+1, r24	; 0x01
    1132:	11 c1       	rjmp	.+546    	; 0x1356 <__stack+0x257>
    1134:	82 30       	cpi	r24, 0x02	; 2
    1136:	09 f4       	brne	.+2      	; 0x113a <__stack+0x3b>
    1138:	0c c1       	rjmp	.+536    	; 0x1352 <__stack+0x253>
    113a:	aa 80       	ldd	r10, Y+2	; 0x02
    113c:	bb 80       	ldd	r11, Y+3	; 0x03
    113e:	db 01       	movw	r26, r22
    1140:	12 96       	adiw	r26, 0x02	; 2
    1142:	4d 91       	ld	r20, X+
    1144:	5c 91       	ld	r21, X
    1146:	13 97       	sbiw	r26, 0x03	; 3
    1148:	cc 80       	ldd	r12, Y+4	; 0x04
    114a:	dd 80       	ldd	r13, Y+5	; 0x05
    114c:	ee 80       	ldd	r14, Y+6	; 0x06
    114e:	ff 80       	ldd	r15, Y+7	; 0x07
    1150:	14 96       	adiw	r26, 0x04	; 4
    1152:	0d 91       	ld	r16, X+
    1154:	1d 91       	ld	r17, X+
    1156:	2d 91       	ld	r18, X+
    1158:	3c 91       	ld	r19, X
    115a:	17 97       	sbiw	r26, 0x07	; 7
    115c:	c5 01       	movw	r24, r10
    115e:	84 1b       	sub	r24, r20
    1160:	95 0b       	sbc	r25, r21
    1162:	dc 01       	movw	r26, r24
    1164:	97 ff       	sbrs	r25, 7
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <__stack+0x71>
    1168:	aa 27       	eor	r26, r26
    116a:	bb 27       	eor	r27, r27
    116c:	a8 1b       	sub	r26, r24
    116e:	b9 0b       	sbc	r27, r25
    1170:	a0 32       	cpi	r26, 0x20	; 32
    1172:	b1 05       	cpc	r27, r1
    1174:	0c f0       	brlt	.+2      	; 0x1178 <__stack+0x79>
    1176:	67 c0       	rjmp	.+206    	; 0x1246 <__stack+0x147>
    1178:	18 16       	cp	r1, r24
    117a:	19 06       	cpc	r1, r25
    117c:	84 f5       	brge	.+96     	; 0x11de <__stack+0xdf>
    117e:	28 01       	movw	r4, r16
    1180:	39 01       	movw	r6, r18
    1182:	0a 2e       	mov	r0, r26
    1184:	04 c0       	rjmp	.+8      	; 0x118e <__stack+0x8f>
    1186:	76 94       	lsr	r7
    1188:	67 94       	ror	r6
    118a:	57 94       	ror	r5
    118c:	47 94       	ror	r4
    118e:	0a 94       	dec	r0
    1190:	d2 f7       	brpl	.-12     	; 0x1186 <__stack+0x87>
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <__stack+0xa5>
    119c:	44 0f       	add	r20, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	66 1f       	adc	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	aa 95       	dec	r26
    11a6:	d2 f7       	brpl	.-12     	; 0x119c <__stack+0x9d>
    11a8:	41 50       	subi	r20, 0x01	; 1
    11aa:	50 40       	sbci	r21, 0x00	; 0
    11ac:	60 40       	sbci	r22, 0x00	; 0
    11ae:	70 40       	sbci	r23, 0x00	; 0
    11b0:	40 23       	and	r20, r16
    11b2:	51 23       	and	r21, r17
    11b4:	62 23       	and	r22, r18
    11b6:	73 23       	and	r23, r19
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	a0 e0       	ldi	r26, 0x00	; 0
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	41 15       	cp	r20, r1
    11c2:	51 05       	cpc	r21, r1
    11c4:	61 05       	cpc	r22, r1
    11c6:	71 05       	cpc	r23, r1
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <__stack+0xd1>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	dc 01       	movw	r26, r24
    11d0:	8c 01       	movw	r16, r24
    11d2:	9d 01       	movw	r18, r26
    11d4:	04 29       	or	r16, r4
    11d6:	15 29       	or	r17, r5
    11d8:	26 29       	or	r18, r6
    11da:	37 29       	or	r19, r7
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <__stack+0x15d>
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	e9 f1       	breq	.+122    	; 0x125c <__stack+0x15d>
    11e2:	aa 0e       	add	r10, r26
    11e4:	bb 1e       	adc	r11, r27
    11e6:	26 01       	movw	r4, r12
    11e8:	37 01       	movw	r6, r14
    11ea:	0a 2e       	mov	r0, r26
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <__stack+0xf7>
    11ee:	76 94       	lsr	r7
    11f0:	67 94       	ror	r6
    11f2:	57 94       	ror	r5
    11f4:	47 94       	ror	r4
    11f6:	0a 94       	dec	r0
    11f8:	d2 f7       	brpl	.-12     	; 0x11ee <__stack+0xef>
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	04 c0       	rjmp	.+8      	; 0x120c <__stack+0x10d>
    1204:	44 0f       	add	r20, r20
    1206:	55 1f       	adc	r21, r21
    1208:	66 1f       	adc	r22, r22
    120a:	77 1f       	adc	r23, r23
    120c:	aa 95       	dec	r26
    120e:	d2 f7       	brpl	.-12     	; 0x1204 <__stack+0x105>
    1210:	41 50       	subi	r20, 0x01	; 1
    1212:	50 40       	sbci	r21, 0x00	; 0
    1214:	60 40       	sbci	r22, 0x00	; 0
    1216:	70 40       	sbci	r23, 0x00	; 0
    1218:	4c 21       	and	r20, r12
    121a:	5d 21       	and	r21, r13
    121c:	6e 21       	and	r22, r14
    121e:	7f 21       	and	r23, r15
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a0 e0       	ldi	r26, 0x00	; 0
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	41 15       	cp	r20, r1
    122a:	51 05       	cpc	r21, r1
    122c:	61 05       	cpc	r22, r1
    122e:	71 05       	cpc	r23, r1
    1230:	19 f4       	brne	.+6      	; 0x1238 <__stack+0x139>
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	dc 01       	movw	r26, r24
    1238:	6c 01       	movw	r12, r24
    123a:	7d 01       	movw	r14, r26
    123c:	c4 28       	or	r12, r4
    123e:	d5 28       	or	r13, r5
    1240:	e6 28       	or	r14, r6
    1242:	f7 28       	or	r15, r7
    1244:	0b c0       	rjmp	.+22     	; 0x125c <__stack+0x15d>
    1246:	4a 15       	cp	r20, r10
    1248:	5b 05       	cpc	r21, r11
    124a:	24 f4       	brge	.+8      	; 0x1254 <__stack+0x155>
    124c:	00 e0       	ldi	r16, 0x00	; 0
    124e:	10 e0       	ldi	r17, 0x00	; 0
    1250:	98 01       	movw	r18, r16
    1252:	04 c0       	rjmp	.+8      	; 0x125c <__stack+0x15d>
    1254:	5a 01       	movw	r10, r20
    1256:	cc 24       	eor	r12, r12
    1258:	dd 24       	eor	r13, r13
    125a:	76 01       	movw	r14, r12
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	d4 01       	movw	r26, r8
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	9c 91       	ld	r25, X
    1264:	11 97       	sbiw	r26, 0x01	; 1
    1266:	89 17       	cp	r24, r25
    1268:	09 f4       	brne	.+2      	; 0x126c <__stack+0x16d>
    126a:	45 c0       	rjmp	.+138    	; 0x12f6 <__stack+0x1f7>
    126c:	88 23       	and	r24, r24
    126e:	29 f0       	breq	.+10     	; 0x127a <__stack+0x17b>
    1270:	0c 19       	sub	r16, r12
    1272:	1d 09       	sbc	r17, r13
    1274:	2e 09       	sbc	r18, r14
    1276:	3f 09       	sbc	r19, r15
    1278:	08 c0       	rjmp	.+16     	; 0x128a <__stack+0x18b>
    127a:	d7 01       	movw	r26, r14
    127c:	c6 01       	movw	r24, r12
    127e:	80 1b       	sub	r24, r16
    1280:	91 0b       	sbc	r25, r17
    1282:	a2 0b       	sbc	r26, r18
    1284:	b3 0b       	sbc	r27, r19
    1286:	8c 01       	movw	r16, r24
    1288:	9d 01       	movw	r18, r26
    128a:	37 fd       	sbrc	r19, 7
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <__stack+0x197>
    128e:	11 82       	std	Z+1, r1	; 0x01
    1290:	b3 82       	std	Z+3, r11	; 0x03
    1292:	a2 82       	std	Z+2, r10	; 0x02
    1294:	0b c0       	rjmp	.+22     	; 0x12ac <__stack+0x1ad>
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	81 83       	std	Z+1, r24	; 0x01
    129a:	b3 82       	std	Z+3, r11	; 0x03
    129c:	a2 82       	std	Z+2, r10	; 0x02
    129e:	30 95       	com	r19
    12a0:	20 95       	com	r18
    12a2:	10 95       	com	r17
    12a4:	01 95       	neg	r16
    12a6:	1f 4f       	sbci	r17, 0xFF	; 255
    12a8:	2f 4f       	sbci	r18, 0xFF	; 255
    12aa:	3f 4f       	sbci	r19, 0xFF	; 255
    12ac:	04 83       	std	Z+4, r16	; 0x04
    12ae:	15 83       	std	Z+5, r17	; 0x05
    12b0:	26 83       	std	Z+6, r18	; 0x06
    12b2:	37 83       	std	Z+7, r19	; 0x07
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <__stack+0x1d1>
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	aa 1f       	adc	r26, r26
    12bc:	bb 1f       	adc	r27, r27
    12be:	84 83       	std	Z+4, r24	; 0x04
    12c0:	95 83       	std	Z+5, r25	; 0x05
    12c2:	a6 83       	std	Z+6, r26	; 0x06
    12c4:	b7 83       	std	Z+7, r27	; 0x07
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	93 83       	std	Z+3, r25	; 0x03
    12ce:	82 83       	std	Z+2, r24	; 0x02
    12d0:	84 81       	ldd	r24, Z+4	; 0x04
    12d2:	95 81       	ldd	r25, Z+5	; 0x05
    12d4:	a6 81       	ldd	r26, Z+6	; 0x06
    12d6:	b7 81       	ldd	r27, Z+7	; 0x07
    12d8:	ac 01       	movw	r20, r24
    12da:	bd 01       	movw	r22, r26
    12dc:	41 50       	subi	r20, 0x01	; 1
    12de:	50 40       	sbci	r21, 0x00	; 0
    12e0:	60 40       	sbci	r22, 0x00	; 0
    12e2:	70 40       	sbci	r23, 0x00	; 0
    12e4:	4f 3f       	cpi	r20, 0xFF	; 255
    12e6:	2f ef       	ldi	r18, 0xFF	; 255
    12e8:	52 07       	cpc	r21, r18
    12ea:	2f ef       	ldi	r18, 0xFF	; 255
    12ec:	62 07       	cpc	r22, r18
    12ee:	2f e3       	ldi	r18, 0x3F	; 63
    12f0:	72 07       	cpc	r23, r18
    12f2:	08 f3       	brcs	.-62     	; 0x12b6 <__stack+0x1b7>
    12f4:	0b c0       	rjmp	.+22     	; 0x130c <__stack+0x20d>
    12f6:	81 83       	std	Z+1, r24	; 0x01
    12f8:	b3 82       	std	Z+3, r11	; 0x03
    12fa:	a2 82       	std	Z+2, r10	; 0x02
    12fc:	0c 0d       	add	r16, r12
    12fe:	1d 1d       	adc	r17, r13
    1300:	2e 1d       	adc	r18, r14
    1302:	3f 1d       	adc	r19, r15
    1304:	04 83       	std	Z+4, r16	; 0x04
    1306:	15 83       	std	Z+5, r17	; 0x05
    1308:	26 83       	std	Z+6, r18	; 0x06
    130a:	37 83       	std	Z+7, r19	; 0x07
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	80 83       	st	Z, r24
    1310:	44 81       	ldd	r20, Z+4	; 0x04
    1312:	55 81       	ldd	r21, Z+5	; 0x05
    1314:	66 81       	ldd	r22, Z+6	; 0x06
    1316:	77 81       	ldd	r23, Z+7	; 0x07
    1318:	77 ff       	sbrs	r23, 7
    131a:	1d c0       	rjmp	.+58     	; 0x1356 <__stack+0x257>
    131c:	db 01       	movw	r26, r22
    131e:	ca 01       	movw	r24, r20
    1320:	81 70       	andi	r24, 0x01	; 1
    1322:	90 70       	andi	r25, 0x00	; 0
    1324:	a0 70       	andi	r26, 0x00	; 0
    1326:	b0 70       	andi	r27, 0x00	; 0
    1328:	76 95       	lsr	r23
    132a:	67 95       	ror	r22
    132c:	57 95       	ror	r21
    132e:	47 95       	ror	r20
    1330:	84 2b       	or	r24, r20
    1332:	95 2b       	or	r25, r21
    1334:	a6 2b       	or	r26, r22
    1336:	b7 2b       	or	r27, r23
    1338:	84 83       	std	Z+4, r24	; 0x04
    133a:	95 83       	std	Z+5, r25	; 0x05
    133c:	a6 83       	std	Z+6, r26	; 0x06
    133e:	b7 83       	std	Z+7, r27	; 0x07
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	93 83       	std	Z+3, r25	; 0x03
    1348:	82 83       	std	Z+2, r24	; 0x02
    134a:	05 c0       	rjmp	.+10     	; 0x1356 <__stack+0x257>
    134c:	cb ea       	ldi	r28, 0xAB	; 171
    134e:	d2 e0       	ldi	r29, 0x02	; 2
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <__stack+0x259>
    1352:	e4 01       	movw	r28, r8
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <__stack+0x259>
    1356:	ef 01       	movw	r28, r30
    1358:	ce 01       	movw	r24, r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	e0 e1       	ldi	r30, 0x10	; 16
    1360:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__epilogue_restores__+0x4>

00001364 <__addsf3>:
    1364:	a0 e2       	ldi	r26, 0x20	; 32
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e8 eb       	ldi	r30, 0xB8	; 184
    136a:	f9 e0       	ldi	r31, 0x09	; 9
    136c:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__prologue_saves__+0x20>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	8d 83       	std	Y+5, r24	; 0x05
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	af 83       	std	Y+7, r26	; 0x07
    137a:	b8 87       	std	Y+8, r27	; 0x08
    137c:	29 83       	std	Y+1, r18	; 0x01
    137e:	3a 83       	std	Y+2, r19	; 0x02
    1380:	4b 83       	std	Y+3, r20	; 0x03
    1382:	5c 83       	std	Y+4, r21	; 0x04
    1384:	ce 01       	movw	r24, r28
    1386:	05 96       	adiw	r24, 0x05	; 5
    1388:	be 01       	movw	r22, r28
    138a:	67 5e       	subi	r22, 0xE7	; 231
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    1392:	ce 01       	movw	r24, r28
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	be 01       	movw	r22, r28
    1398:	6f 5e       	subi	r22, 0xEF	; 239
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    13a0:	ce 01       	movw	r24, r28
    13a2:	49 96       	adiw	r24, 0x19	; 25
    13a4:	be 01       	movw	r22, r28
    13a6:	6f 5e       	subi	r22, 0xEF	; 239
    13a8:	7f 4f       	sbci	r23, 0xFF	; 255
    13aa:	ae 01       	movw	r20, r28
    13ac:	47 5f       	subi	r20, 0xF7	; 247
    13ae:	5f 4f       	sbci	r21, 0xFF	; 255
    13b0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_fpadd_parts>
    13b4:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__pack_f>
    13b8:	46 2f       	mov	r20, r22
    13ba:	57 2f       	mov	r21, r23
    13bc:	68 2f       	mov	r22, r24
    13be:	79 2f       	mov	r23, r25
    13c0:	cb 01       	movw	r24, r22
    13c2:	ba 01       	movw	r22, r20
    13c4:	a0 96       	adiw	r28, 0x20	; 32
    13c6:	e2 e0       	ldi	r30, 0x02	; 2
    13c8:	0c 94 86 11 	jmp	0x230c	; 0x230c <__epilogue_restores__+0x20>

000013cc <__subsf3>:
    13cc:	a0 e2       	ldi	r26, 0x20	; 32
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ec ee       	ldi	r30, 0xEC	; 236
    13d2:	f9 e0       	ldi	r31, 0x09	; 9
    13d4:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__prologue_saves__+0x20>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	af 83       	std	Y+7, r26	; 0x07
    13e2:	b8 87       	std	Y+8, r27	; 0x08
    13e4:	29 83       	std	Y+1, r18	; 0x01
    13e6:	3a 83       	std	Y+2, r19	; 0x02
    13e8:	4b 83       	std	Y+3, r20	; 0x03
    13ea:	5c 83       	std	Y+4, r21	; 0x04
    13ec:	ce 01       	movw	r24, r28
    13ee:	05 96       	adiw	r24, 0x05	; 5
    13f0:	be 01       	movw	r22, r28
    13f2:	67 5e       	subi	r22, 0xE7	; 231
    13f4:	7f 4f       	sbci	r23, 0xFF	; 255
    13f6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	be 01       	movw	r22, r28
    1400:	6f 5e       	subi	r22, 0xEF	; 239
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    1408:	8a 89       	ldd	r24, Y+18	; 0x12
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	89 27       	eor	r24, r25
    140e:	8a 8b       	std	Y+18, r24	; 0x12
    1410:	ce 01       	movw	r24, r28
    1412:	49 96       	adiw	r24, 0x19	; 25
    1414:	be 01       	movw	r22, r28
    1416:	6f 5e       	subi	r22, 0xEF	; 239
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	ae 01       	movw	r20, r28
    141c:	47 5f       	subi	r20, 0xF7	; 247
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_fpadd_parts>
    1424:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__pack_f>
    1428:	46 2f       	mov	r20, r22
    142a:	57 2f       	mov	r21, r23
    142c:	68 2f       	mov	r22, r24
    142e:	79 2f       	mov	r23, r25
    1430:	cb 01       	movw	r24, r22
    1432:	ba 01       	movw	r22, r20
    1434:	a0 96       	adiw	r28, 0x20	; 32
    1436:	e2 e0       	ldi	r30, 0x02	; 2
    1438:	0c 94 86 11 	jmp	0x230c	; 0x230c <__epilogue_restores__+0x20>

0000143c <__mulsf3>:
    143c:	a0 e2       	ldi	r26, 0x20	; 32
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e4 e2       	ldi	r30, 0x24	; 36
    1442:	fa e0       	ldi	r31, 0x0A	; 10
    1444:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__prologue_saves__+0x4>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	9e 83       	std	Y+6, r25	; 0x06
    1450:	af 83       	std	Y+7, r26	; 0x07
    1452:	b8 87       	std	Y+8, r27	; 0x08
    1454:	29 83       	std	Y+1, r18	; 0x01
    1456:	3a 83       	std	Y+2, r19	; 0x02
    1458:	4b 83       	std	Y+3, r20	; 0x03
    145a:	5c 83       	std	Y+4, r21	; 0x04
    145c:	ce 01       	movw	r24, r28
    145e:	05 96       	adiw	r24, 0x05	; 5
    1460:	be 01       	movw	r22, r28
    1462:	67 5e       	subi	r22, 0xE7	; 231
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	be 01       	movw	r22, r28
    1470:	6f 5e       	subi	r22, 0xEF	; 239
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    1478:	99 8d       	ldd	r25, Y+25	; 0x19
    147a:	92 30       	cpi	r25, 0x02	; 2
    147c:	78 f0       	brcs	.+30     	; 0x149c <__mulsf3+0x60>
    147e:	89 89       	ldd	r24, Y+17	; 0x11
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	c0 f0       	brcs	.+48     	; 0x14b4 <__mulsf3+0x78>
    1484:	94 30       	cpi	r25, 0x04	; 4
    1486:	19 f4       	brne	.+6      	; 0x148e <__mulsf3+0x52>
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	41 f4       	brne	.+16     	; 0x149c <__mulsf3+0x60>
    148c:	ca c0       	rjmp	.+404    	; 0x1622 <__mulsf3+0x1e6>
    148e:	84 30       	cpi	r24, 0x04	; 4
    1490:	19 f4       	brne	.+6      	; 0x1498 <__mulsf3+0x5c>
    1492:	92 30       	cpi	r25, 0x02	; 2
    1494:	79 f4       	brne	.+30     	; 0x14b4 <__mulsf3+0x78>
    1496:	c5 c0       	rjmp	.+394    	; 0x1622 <__mulsf3+0x1e6>
    1498:	92 30       	cpi	r25, 0x02	; 2
    149a:	51 f4       	brne	.+20     	; 0x14b0 <__mulsf3+0x74>
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    14a0:	9a 89       	ldd	r25, Y+18	; 0x12
    14a2:	29 17       	cp	r18, r25
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <__mulsf3+0x6c>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	8a 8f       	std	Y+26, r24	; 0x1a
    14aa:	ce 01       	movw	r24, r28
    14ac:	49 96       	adiw	r24, 0x19	; 25
    14ae:	bb c0       	rjmp	.+374    	; 0x1626 <__mulsf3+0x1ea>
    14b0:	82 30       	cpi	r24, 0x02	; 2
    14b2:	51 f4       	brne	.+20     	; 0x14c8 <__mulsf3+0x8c>
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    14b8:	9a 89       	ldd	r25, Y+18	; 0x12
    14ba:	29 17       	cp	r18, r25
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <__mulsf3+0x84>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	8a 8b       	std	Y+18, r24	; 0x12
    14c2:	ce 01       	movw	r24, r28
    14c4:	41 96       	adiw	r24, 0x11	; 17
    14c6:	af c0       	rjmp	.+350    	; 0x1626 <__mulsf3+0x1ea>
    14c8:	4d 8c       	ldd	r4, Y+29	; 0x1d
    14ca:	5e 8c       	ldd	r5, Y+30	; 0x1e
    14cc:	6f 8c       	ldd	r6, Y+31	; 0x1f
    14ce:	78 a0       	lds	r23, 0x88
    14d0:	0d 89       	ldd	r16, Y+21	; 0x15
    14d2:	1e 89       	ldd	r17, Y+22	; 0x16
    14d4:	2f 89       	ldd	r18, Y+23	; 0x17
    14d6:	38 8d       	ldd	r19, Y+24	; 0x18
    14d8:	e0 e2       	ldi	r30, 0x20	; 32
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	50 e0       	ldi	r21, 0x00	; 0
    14e0:	ba 01       	movw	r22, r20
    14e2:	88 24       	eor	r8, r8
    14e4:	99 24       	eor	r9, r9
    14e6:	54 01       	movw	r10, r8
    14e8:	cc 24       	eor	r12, r12
    14ea:	dd 24       	eor	r13, r13
    14ec:	76 01       	movw	r14, r12
    14ee:	c2 01       	movw	r24, r4
    14f0:	81 70       	andi	r24, 0x01	; 1
    14f2:	90 70       	andi	r25, 0x00	; 0
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	d1 f0       	breq	.+52     	; 0x152c <__mulsf3+0xf0>
    14f8:	c0 0e       	add	r12, r16
    14fa:	d1 1e       	adc	r13, r17
    14fc:	e2 1e       	adc	r14, r18
    14fe:	f3 1e       	adc	r15, r19
    1500:	db 01       	movw	r26, r22
    1502:	ca 01       	movw	r24, r20
    1504:	88 0d       	add	r24, r8
    1506:	99 1d       	adc	r25, r9
    1508:	aa 1d       	adc	r26, r10
    150a:	bb 1d       	adc	r27, r11
    150c:	41 e0       	ldi	r20, 0x01	; 1
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	c0 16       	cp	r12, r16
    1516:	d1 06       	cpc	r13, r17
    1518:	e2 06       	cpc	r14, r18
    151a:	f3 06       	cpc	r15, r19
    151c:	18 f0       	brcs	.+6      	; 0x1524 <__mulsf3+0xe8>
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	ba 01       	movw	r22, r20
    1524:	48 0f       	add	r20, r24
    1526:	59 1f       	adc	r21, r25
    1528:	6a 1f       	adc	r22, r26
    152a:	7b 1f       	adc	r23, r27
    152c:	88 0c       	add	r8, r8
    152e:	99 1c       	adc	r9, r9
    1530:	aa 1c       	adc	r10, r10
    1532:	bb 1c       	adc	r11, r11
    1534:	37 ff       	sbrs	r19, 7
    1536:	08 c0       	rjmp	.+16     	; 0x1548 <__mulsf3+0x10c>
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a0 e0       	ldi	r26, 0x00	; 0
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	88 2a       	or	r8, r24
    1542:	99 2a       	or	r9, r25
    1544:	aa 2a       	or	r10, r26
    1546:	bb 2a       	or	r11, r27
    1548:	00 0f       	add	r16, r16
    154a:	11 1f       	adc	r17, r17
    154c:	22 1f       	adc	r18, r18
    154e:	33 1f       	adc	r19, r19
    1550:	76 94       	lsr	r7
    1552:	67 94       	ror	r6
    1554:	57 94       	ror	r5
    1556:	47 94       	ror	r4
    1558:	31 97       	sbiw	r30, 0x01	; 1
    155a:	49 f6       	brne	.-110    	; 0x14ee <__mulsf3+0xb2>
    155c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    155e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1560:	2b 89       	ldd	r18, Y+19	; 0x13
    1562:	3c 89       	ldd	r19, Y+20	; 0x14
    1564:	82 0f       	add	r24, r18
    1566:	93 1f       	adc	r25, r19
    1568:	02 96       	adiw	r24, 0x02	; 2
    156a:	9c 87       	std	Y+12, r25	; 0x0c
    156c:	8b 87       	std	Y+11, r24	; 0x0b
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1572:	9a 89       	ldd	r25, Y+18	; 0x12
    1574:	29 17       	cp	r18, r25
    1576:	09 f4       	brne	.+2      	; 0x157a <__mulsf3+0x13e>
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	8a 87       	std	Y+10, r24	; 0x0a
    157c:	2b 85       	ldd	r18, Y+11	; 0x0b
    157e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1580:	17 c0       	rjmp	.+46     	; 0x15b0 <__mulsf3+0x174>
    1582:	ca 01       	movw	r24, r20
    1584:	81 70       	andi	r24, 0x01	; 1
    1586:	90 70       	andi	r25, 0x00	; 0
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	61 f0       	breq	.+24     	; 0x15a4 <__mulsf3+0x168>
    158c:	f6 94       	lsr	r15
    158e:	e7 94       	ror	r14
    1590:	d7 94       	ror	r13
    1592:	c7 94       	ror	r12
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 e0       	ldi	r26, 0x00	; 0
    159a:	b0 e8       	ldi	r27, 0x80	; 128
    159c:	c8 2a       	or	r12, r24
    159e:	d9 2a       	or	r13, r25
    15a0:	ea 2a       	or	r14, r26
    15a2:	fb 2a       	or	r15, r27
    15a4:	76 95       	lsr	r23
    15a6:	67 95       	ror	r22
    15a8:	57 95       	ror	r21
    15aa:	47 95       	ror	r20
    15ac:	2f 5f       	subi	r18, 0xFF	; 255
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	77 fd       	sbrc	r23, 7
    15b2:	e7 cf       	rjmp	.-50     	; 0x1582 <__mulsf3+0x146>
    15b4:	c9 01       	movw	r24, r18
    15b6:	0b c0       	rjmp	.+22     	; 0x15ce <__mulsf3+0x192>
    15b8:	44 0f       	add	r20, r20
    15ba:	55 1f       	adc	r21, r21
    15bc:	66 1f       	adc	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	f7 fc       	sbrc	r15, 7
    15c2:	41 60       	ori	r20, 0x01	; 1
    15c4:	cc 0c       	add	r12, r12
    15c6:	dd 1c       	adc	r13, r13
    15c8:	ee 1c       	adc	r14, r14
    15ca:	ff 1c       	adc	r15, r15
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	40 30       	cpi	r20, 0x00	; 0
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	5a 07       	cpc	r21, r26
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	6a 07       	cpc	r22, r26
    15d8:	a0 e4       	ldi	r26, 0x40	; 64
    15da:	7a 07       	cpc	r23, r26
    15dc:	68 f3       	brcs	.-38     	; 0x15b8 <__mulsf3+0x17c>
    15de:	8b 87       	std	Y+11, r24	; 0x0b
    15e0:	9c 87       	std	Y+12, r25	; 0x0c
    15e2:	db 01       	movw	r26, r22
    15e4:	ca 01       	movw	r24, r20
    15e6:	8f 77       	andi	r24, 0x7F	; 127
    15e8:	90 70       	andi	r25, 0x00	; 0
    15ea:	a0 70       	andi	r26, 0x00	; 0
    15ec:	b0 70       	andi	r27, 0x00	; 0
    15ee:	80 34       	cpi	r24, 0x40	; 64
    15f0:	91 05       	cpc	r25, r1
    15f2:	a1 05       	cpc	r26, r1
    15f4:	b1 05       	cpc	r27, r1
    15f6:	61 f4       	brne	.+24     	; 0x1610 <__mulsf3+0x1d4>
    15f8:	47 fd       	sbrc	r20, 7
    15fa:	0a c0       	rjmp	.+20     	; 0x1610 <__mulsf3+0x1d4>
    15fc:	c1 14       	cp	r12, r1
    15fe:	d1 04       	cpc	r13, r1
    1600:	e1 04       	cpc	r14, r1
    1602:	f1 04       	cpc	r15, r1
    1604:	29 f0       	breq	.+10     	; 0x1610 <__mulsf3+0x1d4>
    1606:	40 5c       	subi	r20, 0xC0	; 192
    1608:	5f 4f       	sbci	r21, 0xFF	; 255
    160a:	6f 4f       	sbci	r22, 0xFF	; 255
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	40 78       	andi	r20, 0x80	; 128
    1610:	4d 87       	std	Y+13, r20	; 0x0d
    1612:	5e 87       	std	Y+14, r21	; 0x0e
    1614:	6f 87       	std	Y+15, r22	; 0x0f
    1616:	78 8b       	std	Y+16, r23	; 0x10
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	89 87       	std	Y+9, r24	; 0x09
    161c:	ce 01       	movw	r24, r28
    161e:	09 96       	adiw	r24, 0x09	; 9
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <__mulsf3+0x1ea>
    1622:	8b ea       	ldi	r24, 0xAB	; 171
    1624:	92 e0       	ldi	r25, 0x02	; 2
    1626:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__pack_f>
    162a:	46 2f       	mov	r20, r22
    162c:	57 2f       	mov	r21, r23
    162e:	68 2f       	mov	r22, r24
    1630:	79 2f       	mov	r23, r25
    1632:	cb 01       	movw	r24, r22
    1634:	ba 01       	movw	r22, r20
    1636:	a0 96       	adiw	r28, 0x20	; 32
    1638:	e0 e1       	ldi	r30, 0x10	; 16
    163a:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__epilogue_restores__+0x4>

0000163e <__divsf3>:
    163e:	a8 e1       	ldi	r26, 0x18	; 24
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e2       	ldi	r30, 0x25	; 37
    1644:	fb e0       	ldi	r31, 0x0B	; 11
    1646:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x14>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	8d 83       	std	Y+5, r24	; 0x05
    1650:	9e 83       	std	Y+6, r25	; 0x06
    1652:	af 83       	std	Y+7, r26	; 0x07
    1654:	b8 87       	std	Y+8, r27	; 0x08
    1656:	29 83       	std	Y+1, r18	; 0x01
    1658:	3a 83       	std	Y+2, r19	; 0x02
    165a:	4b 83       	std	Y+3, r20	; 0x03
    165c:	5c 83       	std	Y+4, r21	; 0x04
    165e:	ce 01       	movw	r24, r28
    1660:	05 96       	adiw	r24, 0x05	; 5
    1662:	be 01       	movw	r22, r28
    1664:	6f 5e       	subi	r22, 0xEF	; 239
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    166c:	ce 01       	movw	r24, r28
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	be 01       	movw	r22, r28
    1672:	67 5f       	subi	r22, 0xF7	; 247
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    167a:	99 89       	ldd	r25, Y+17	; 0x11
    167c:	92 30       	cpi	r25, 0x02	; 2
    167e:	08 f4       	brcc	.+2      	; 0x1682 <__divsf3+0x44>
    1680:	75 c0       	rjmp	.+234    	; 0x176c <__divsf3+0x12e>
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	82 30       	cpi	r24, 0x02	; 2
    1686:	08 f4       	brcc	.+2      	; 0x168a <__divsf3+0x4c>
    1688:	74 c0       	rjmp	.+232    	; 0x1772 <__divsf3+0x134>
    168a:	2a 89       	ldd	r18, Y+18	; 0x12
    168c:	3a 85       	ldd	r19, Y+10	; 0x0a
    168e:	23 27       	eor	r18, r19
    1690:	2a 8b       	std	Y+18, r18	; 0x12
    1692:	94 30       	cpi	r25, 0x04	; 4
    1694:	11 f0       	breq	.+4      	; 0x169a <__divsf3+0x5c>
    1696:	92 30       	cpi	r25, 0x02	; 2
    1698:	21 f4       	brne	.+8      	; 0x16a2 <__divsf3+0x64>
    169a:	98 17       	cp	r25, r24
    169c:	09 f0       	breq	.+2      	; 0x16a0 <__divsf3+0x62>
    169e:	66 c0       	rjmp	.+204    	; 0x176c <__divsf3+0x12e>
    16a0:	6b c0       	rjmp	.+214    	; 0x1778 <__divsf3+0x13a>
    16a2:	84 30       	cpi	r24, 0x04	; 4
    16a4:	39 f4       	brne	.+14     	; 0x16b4 <__divsf3+0x76>
    16a6:	1d 8a       	std	Y+21, r1	; 0x15
    16a8:	1e 8a       	std	Y+22, r1	; 0x16
    16aa:	1f 8a       	std	Y+23, r1	; 0x17
    16ac:	18 8e       	std	Y+24, r1	; 0x18
    16ae:	1c 8a       	std	Y+20, r1	; 0x14
    16b0:	1b 8a       	std	Y+19, r1	; 0x13
    16b2:	5c c0       	rjmp	.+184    	; 0x176c <__divsf3+0x12e>
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	19 f4       	brne	.+6      	; 0x16be <__divsf3+0x80>
    16b8:	84 e0       	ldi	r24, 0x04	; 4
    16ba:	89 8b       	std	Y+17, r24	; 0x11
    16bc:	57 c0       	rjmp	.+174    	; 0x176c <__divsf3+0x12e>
    16be:	2b 89       	ldd	r18, Y+19	; 0x13
    16c0:	3c 89       	ldd	r19, Y+20	; 0x14
    16c2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16c4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16c6:	28 1b       	sub	r18, r24
    16c8:	39 0b       	sbc	r19, r25
    16ca:	3c 8b       	std	Y+20, r19	; 0x14
    16cc:	2b 8b       	std	Y+19, r18	; 0x13
    16ce:	8d 89       	ldd	r24, Y+21	; 0x15
    16d0:	9e 89       	ldd	r25, Y+22	; 0x16
    16d2:	af 89       	ldd	r26, Y+23	; 0x17
    16d4:	b8 8d       	ldd	r27, Y+24	; 0x18
    16d6:	cd 84       	ldd	r12, Y+13	; 0x0d
    16d8:	de 84       	ldd	r13, Y+14	; 0x0e
    16da:	ef 84       	ldd	r14, Y+15	; 0x0f
    16dc:	f8 88       	ldd	r15, Y+16	; 0x10
    16de:	8c 15       	cp	r24, r12
    16e0:	9d 05       	cpc	r25, r13
    16e2:	ae 05       	cpc	r26, r14
    16e4:	bf 05       	cpc	r27, r15
    16e6:	40 f4       	brcc	.+16     	; 0x16f8 <__divsf3+0xba>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	aa 1f       	adc	r26, r26
    16ee:	bb 1f       	adc	r27, r27
    16f0:	21 50       	subi	r18, 0x01	; 1
    16f2:	30 40       	sbci	r19, 0x00	; 0
    16f4:	3c 8b       	std	Y+20, r19	; 0x14
    16f6:	2b 8b       	std	Y+19, r18	; 0x13
    16f8:	ef e1       	ldi	r30, 0x1F	; 31
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	00 e0       	ldi	r16, 0x00	; 0
    16fe:	10 e0       	ldi	r17, 0x00	; 0
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e4       	ldi	r19, 0x40	; 64
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	50 e0       	ldi	r21, 0x00	; 0
    1708:	ba 01       	movw	r22, r20
    170a:	8c 15       	cp	r24, r12
    170c:	9d 05       	cpc	r25, r13
    170e:	ae 05       	cpc	r26, r14
    1710:	bf 05       	cpc	r27, r15
    1712:	40 f0       	brcs	.+16     	; 0x1724 <__divsf3+0xe6>
    1714:	40 2b       	or	r20, r16
    1716:	51 2b       	or	r21, r17
    1718:	62 2b       	or	r22, r18
    171a:	73 2b       	or	r23, r19
    171c:	8c 19       	sub	r24, r12
    171e:	9d 09       	sbc	r25, r13
    1720:	ae 09       	sbc	r26, r14
    1722:	bf 09       	sbc	r27, r15
    1724:	36 95       	lsr	r19
    1726:	27 95       	ror	r18
    1728:	17 95       	ror	r17
    172a:	07 95       	ror	r16
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	aa 1f       	adc	r26, r26
    1732:	bb 1f       	adc	r27, r27
    1734:	31 97       	sbiw	r30, 0x01	; 1
    1736:	49 f7       	brne	.-46     	; 0x170a <__divsf3+0xcc>
    1738:	8a 01       	movw	r16, r20
    173a:	9b 01       	movw	r18, r22
    173c:	0f 77       	andi	r16, 0x7F	; 127
    173e:	10 70       	andi	r17, 0x00	; 0
    1740:	20 70       	andi	r18, 0x00	; 0
    1742:	30 70       	andi	r19, 0x00	; 0
    1744:	00 34       	cpi	r16, 0x40	; 64
    1746:	11 05       	cpc	r17, r1
    1748:	21 05       	cpc	r18, r1
    174a:	31 05       	cpc	r19, r1
    174c:	59 f4       	brne	.+22     	; 0x1764 <__divsf3+0x126>
    174e:	47 fd       	sbrc	r20, 7
    1750:	09 c0       	rjmp	.+18     	; 0x1764 <__divsf3+0x126>
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	a1 05       	cpc	r26, r1
    1756:	b1 05       	cpc	r27, r1
    1758:	29 f0       	breq	.+10     	; 0x1764 <__divsf3+0x126>
    175a:	40 5c       	subi	r20, 0xC0	; 192
    175c:	5f 4f       	sbci	r21, 0xFF	; 255
    175e:	6f 4f       	sbci	r22, 0xFF	; 255
    1760:	7f 4f       	sbci	r23, 0xFF	; 255
    1762:	40 78       	andi	r20, 0x80	; 128
    1764:	4d 8b       	std	Y+21, r20	; 0x15
    1766:	5e 8b       	std	Y+22, r21	; 0x16
    1768:	6f 8b       	std	Y+23, r22	; 0x17
    176a:	78 8f       	std	Y+24, r23	; 0x18
    176c:	ce 01       	movw	r24, r28
    176e:	41 96       	adiw	r24, 0x11	; 17
    1770:	05 c0       	rjmp	.+10     	; 0x177c <__divsf3+0x13e>
    1772:	ce 01       	movw	r24, r28
    1774:	09 96       	adiw	r24, 0x09	; 9
    1776:	02 c0       	rjmp	.+4      	; 0x177c <__divsf3+0x13e>
    1778:	8b ea       	ldi	r24, 0xAB	; 171
    177a:	92 e0       	ldi	r25, 0x02	; 2
    177c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__pack_f>
    1780:	46 2f       	mov	r20, r22
    1782:	57 2f       	mov	r21, r23
    1784:	68 2f       	mov	r22, r24
    1786:	79 2f       	mov	r23, r25
    1788:	cb 01       	movw	r24, r22
    178a:	ba 01       	movw	r22, r20
    178c:	68 96       	adiw	r28, 0x18	; 24
    178e:	e8 e0       	ldi	r30, 0x08	; 8
    1790:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x14>

00001794 <__gesf2>:
    1794:	a8 e1       	ldi	r26, 0x18	; 24
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e0 ed       	ldi	r30, 0xD0	; 208
    179a:	fb e0       	ldi	r31, 0x0B	; 11
    179c:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__prologue_saves__+0x20>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	af 83       	std	Y+7, r26	; 0x07
    17aa:	b8 87       	std	Y+8, r27	; 0x08
    17ac:	29 83       	std	Y+1, r18	; 0x01
    17ae:	3a 83       	std	Y+2, r19	; 0x02
    17b0:	4b 83       	std	Y+3, r20	; 0x03
    17b2:	5c 83       	std	Y+4, r21	; 0x04
    17b4:	ce 01       	movw	r24, r28
    17b6:	05 96       	adiw	r24, 0x05	; 5
    17b8:	be 01       	movw	r22, r28
    17ba:	6f 5e       	subi	r22, 0xEF	; 239
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    17c2:	ce 01       	movw	r24, r28
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	be 01       	movw	r22, r28
    17c8:	67 5f       	subi	r22, 0xF7	; 247
    17ca:	7f 4f       	sbci	r23, 0xFF	; 255
    17cc:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    17d0:	89 89       	ldd	r24, Y+17	; 0x11
    17d2:	82 30       	cpi	r24, 0x02	; 2
    17d4:	58 f0       	brcs	.+22     	; 0x17ec <__gesf2+0x58>
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	82 30       	cpi	r24, 0x02	; 2
    17da:	40 f0       	brcs	.+16     	; 0x17ec <__gesf2+0x58>
    17dc:	ce 01       	movw	r24, r28
    17de:	41 96       	adiw	r24, 0x11	; 17
    17e0:	be 01       	movw	r22, r28
    17e2:	67 5f       	subi	r22, 0xF7	; 247
    17e4:	7f 4f       	sbci	r23, 0xFF	; 255
    17e6:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__fpcmp_parts_f>
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <__gesf2+0x5a>
    17ec:	8f ef       	ldi	r24, 0xFF	; 255
    17ee:	68 96       	adiw	r28, 0x18	; 24
    17f0:	e2 e0       	ldi	r30, 0x02	; 2
    17f2:	0c 94 86 11 	jmp	0x230c	; 0x230c <__epilogue_restores__+0x20>

000017f6 <__ltsf2>:
    17f6:	a8 e1       	ldi	r26, 0x18	; 24
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e1 e0       	ldi	r30, 0x01	; 1
    17fc:	fc e0       	ldi	r31, 0x0C	; 12
    17fe:	0c 94 6a 11 	jmp	0x22d4	; 0x22d4 <__prologue_saves__+0x20>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	af 83       	std	Y+7, r26	; 0x07
    180c:	b8 87       	std	Y+8, r27	; 0x08
    180e:	29 83       	std	Y+1, r18	; 0x01
    1810:	3a 83       	std	Y+2, r19	; 0x02
    1812:	4b 83       	std	Y+3, r20	; 0x03
    1814:	5c 83       	std	Y+4, r21	; 0x04
    1816:	ce 01       	movw	r24, r28
    1818:	05 96       	adiw	r24, 0x05	; 5
    181a:	be 01       	movw	r22, r28
    181c:	6f 5e       	subi	r22, 0xEF	; 239
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    1824:	ce 01       	movw	r24, r28
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	be 01       	movw	r22, r28
    182a:	67 5f       	subi	r22, 0xF7	; 247
    182c:	7f 4f       	sbci	r23, 0xFF	; 255
    182e:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    1832:	89 89       	ldd	r24, Y+17	; 0x11
    1834:	82 30       	cpi	r24, 0x02	; 2
    1836:	58 f0       	brcs	.+22     	; 0x184e <__ltsf2+0x58>
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	40 f0       	brcs	.+16     	; 0x184e <__ltsf2+0x58>
    183e:	ce 01       	movw	r24, r28
    1840:	41 96       	adiw	r24, 0x11	; 17
    1842:	be 01       	movw	r22, r28
    1844:	67 5f       	subi	r22, 0xF7	; 247
    1846:	7f 4f       	sbci	r23, 0xFF	; 255
    1848:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__fpcmp_parts_f>
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <__ltsf2+0x5a>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	68 96       	adiw	r28, 0x18	; 24
    1852:	e2 e0       	ldi	r30, 0x02	; 2
    1854:	0c 94 86 11 	jmp	0x230c	; 0x230c <__epilogue_restores__+0x20>

00001858 <__floatsisf>:
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	28 97       	sbiw	r28, 0x08	; 8
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	6b 01       	movw	r12, r22
    1876:	7c 01       	movw	r14, r24
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	d7 01       	movw	r26, r14
    187e:	c6 01       	movw	r24, r12
    1880:	88 27       	eor	r24, r24
    1882:	b7 fd       	sbrc	r27, 7
    1884:	83 95       	inc	r24
    1886:	99 27       	eor	r25, r25
    1888:	aa 27       	eor	r26, r26
    188a:	bb 27       	eor	r27, r27
    188c:	28 2f       	mov	r18, r24
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	c1 14       	cp	r12, r1
    1892:	d1 04       	cpc	r13, r1
    1894:	e1 04       	cpc	r14, r1
    1896:	f1 04       	cpc	r15, r1
    1898:	19 f4       	brne	.+6      	; 0x18a0 <__floatsisf+0x48>
    189a:	82 e0       	ldi	r24, 0x02	; 2
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	35 c0       	rjmp	.+106    	; 0x190a <__floatsisf+0xb2>
    18a0:	8e e1       	ldi	r24, 0x1E	; 30
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	9c 83       	std	Y+4, r25	; 0x04
    18a6:	8b 83       	std	Y+3, r24	; 0x03
    18a8:	22 23       	and	r18, r18
    18aa:	89 f0       	breq	.+34     	; 0x18ce <__floatsisf+0x76>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	c8 16       	cp	r12, r24
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	d8 06       	cpc	r13, r24
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	e8 06       	cpc	r14, r24
    18b8:	80 e8       	ldi	r24, 0x80	; 128
    18ba:	f8 06       	cpc	r15, r24
    18bc:	59 f1       	breq	.+86     	; 0x1914 <__floatsisf+0xbc>
    18be:	f0 94       	com	r15
    18c0:	e0 94       	com	r14
    18c2:	d0 94       	com	r13
    18c4:	c0 94       	com	r12
    18c6:	c1 1c       	adc	r12, r1
    18c8:	d1 1c       	adc	r13, r1
    18ca:	e1 1c       	adc	r14, r1
    18cc:	f1 1c       	adc	r15, r1
    18ce:	cd 82       	std	Y+5, r12	; 0x05
    18d0:	de 82       	std	Y+6, r13	; 0x06
    18d2:	ef 82       	std	Y+7, r14	; 0x07
    18d4:	f8 86       	std	Y+8, r15	; 0x08
    18d6:	c7 01       	movw	r24, r14
    18d8:	b6 01       	movw	r22, r12
    18da:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__clzsi2>
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	18 16       	cp	r1, r24
    18e2:	19 06       	cpc	r1, r25
    18e4:	94 f4       	brge	.+36     	; 0x190a <__floatsisf+0xb2>
    18e6:	08 2e       	mov	r0, r24
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <__floatsisf+0x9a>
    18ea:	cc 0c       	add	r12, r12
    18ec:	dd 1c       	adc	r13, r13
    18ee:	ee 1c       	adc	r14, r14
    18f0:	ff 1c       	adc	r15, r15
    18f2:	0a 94       	dec	r0
    18f4:	d2 f7       	brpl	.-12     	; 0x18ea <__floatsisf+0x92>
    18f6:	cd 82       	std	Y+5, r12	; 0x05
    18f8:	de 82       	std	Y+6, r13	; 0x06
    18fa:	ef 82       	std	Y+7, r14	; 0x07
    18fc:	f8 86       	std	Y+8, r15	; 0x08
    18fe:	2e e1       	ldi	r18, 0x1E	; 30
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	28 1b       	sub	r18, r24
    1904:	39 0b       	sbc	r19, r25
    1906:	3c 83       	std	Y+4, r19	; 0x04
    1908:	2b 83       	std	Y+3, r18	; 0x03
    190a:	ce 01       	movw	r24, r28
    190c:	01 96       	adiw	r24, 0x01	; 1
    190e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__pack_f>
    1912:	04 c0       	rjmp	.+8      	; 0x191c <__floatsisf+0xc4>
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	9f ec       	ldi	r25, 0xCF	; 207
    191c:	38 2f       	mov	r19, r24
    191e:	29 2f       	mov	r18, r25
    1920:	86 2f       	mov	r24, r22
    1922:	97 2f       	mov	r25, r23
    1924:	a3 2f       	mov	r26, r19
    1926:	b2 2f       	mov	r27, r18
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	28 96       	adiw	r28, 0x08	; 8
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	08 95       	ret

00001946 <__fixsfsi>:
    1946:	ac e0       	ldi	r26, 0x0C	; 12
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e9 ea       	ldi	r30, 0xA9	; 169
    194c:	fc e0       	ldi	r31, 0x0C	; 12
    194e:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x1c>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	ab 83       	std	Y+3, r26	; 0x03
    195c:	bc 83       	std	Y+4, r27	; 0x04
    195e:	ce 01       	movw	r24, r28
    1960:	01 96       	adiw	r24, 0x01	; 1
    1962:	be 01       	movw	r22, r28
    1964:	6b 5f       	subi	r22, 0xFB	; 251
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__unpack_f>
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	82 30       	cpi	r24, 0x02	; 2
    1970:	69 f1       	breq	.+90     	; 0x19cc <__fixsfsi+0x86>
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	58 f1       	brcs	.+86     	; 0x19cc <__fixsfsi+0x86>
    1976:	84 30       	cpi	r24, 0x04	; 4
    1978:	39 f0       	breq	.+14     	; 0x1988 <__fixsfsi+0x42>
    197a:	2f 81       	ldd	r18, Y+7	; 0x07
    197c:	38 85       	ldd	r19, Y+8	; 0x08
    197e:	37 fd       	sbrc	r19, 7
    1980:	25 c0       	rjmp	.+74     	; 0x19cc <__fixsfsi+0x86>
    1982:	2f 31       	cpi	r18, 0x1F	; 31
    1984:	31 05       	cpc	r19, r1
    1986:	44 f0       	brlt	.+16     	; 0x1998 <__fixsfsi+0x52>
    1988:	8e 81       	ldd	r24, Y+6	; 0x06
    198a:	88 23       	and	r24, r24
    198c:	19 f1       	breq	.+70     	; 0x19d4 <__fixsfsi+0x8e>
    198e:	00 e0       	ldi	r16, 0x00	; 0
    1990:	10 e0       	ldi	r17, 0x00	; 0
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e8       	ldi	r19, 0x80	; 128
    1996:	22 c0       	rjmp	.+68     	; 0x19dc <__fixsfsi+0x96>
    1998:	8e e1       	ldi	r24, 0x1E	; 30
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	82 1b       	sub	r24, r18
    199e:	93 0b       	sbc	r25, r19
    19a0:	09 85       	ldd	r16, Y+9	; 0x09
    19a2:	1a 85       	ldd	r17, Y+10	; 0x0a
    19a4:	2b 85       	ldd	r18, Y+11	; 0x0b
    19a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <__fixsfsi+0x6c>
    19aa:	36 95       	lsr	r19
    19ac:	27 95       	ror	r18
    19ae:	17 95       	ror	r17
    19b0:	07 95       	ror	r16
    19b2:	8a 95       	dec	r24
    19b4:	d2 f7       	brpl	.-12     	; 0x19aa <__fixsfsi+0x64>
    19b6:	8e 81       	ldd	r24, Y+6	; 0x06
    19b8:	88 23       	and	r24, r24
    19ba:	81 f0       	breq	.+32     	; 0x19dc <__fixsfsi+0x96>
    19bc:	30 95       	com	r19
    19be:	20 95       	com	r18
    19c0:	10 95       	com	r17
    19c2:	01 95       	neg	r16
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	2f 4f       	sbci	r18, 0xFF	; 255
    19c8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ca:	08 c0       	rjmp	.+16     	; 0x19dc <__fixsfsi+0x96>
    19cc:	00 e0       	ldi	r16, 0x00	; 0
    19ce:	10 e0       	ldi	r17, 0x00	; 0
    19d0:	98 01       	movw	r18, r16
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <__fixsfsi+0x96>
    19d4:	0f ef       	ldi	r16, 0xFF	; 255
    19d6:	1f ef       	ldi	r17, 0xFF	; 255
    19d8:	2f ef       	ldi	r18, 0xFF	; 255
    19da:	3f e7       	ldi	r19, 0x7F	; 127
    19dc:	b8 01       	movw	r22, r16
    19de:	c9 01       	movw	r24, r18
    19e0:	2c 96       	adiw	r28, 0x0c	; 12
    19e2:	e4 e0       	ldi	r30, 0x04	; 4
    19e4:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x1c>

000019e8 <__floatunsisf>:
    19e8:	a8 e0       	ldi	r26, 0x08	; 8
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	ea ef       	ldi	r30, 0xFA	; 250
    19ee:	fc e0       	ldi	r31, 0x0C	; 12
    19f0:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x14>
    19f4:	6b 01       	movw	r12, r22
    19f6:	7c 01       	movw	r14, r24
    19f8:	1a 82       	std	Y+2, r1	; 0x02
    19fa:	61 15       	cp	r22, r1
    19fc:	71 05       	cpc	r23, r1
    19fe:	81 05       	cpc	r24, r1
    1a00:	91 05       	cpc	r25, r1
    1a02:	19 f4       	brne	.+6      	; 0x1a0a <__floatunsisf+0x22>
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	5e c0       	rjmp	.+188    	; 0x1ac6 <__floatunsisf+0xde>
    1a0a:	83 e0       	ldi	r24, 0x03	; 3
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	0e e1       	ldi	r16, 0x1E	; 30
    1a10:	10 e0       	ldi	r17, 0x00	; 0
    1a12:	1c 83       	std	Y+4, r17	; 0x04
    1a14:	0b 83       	std	Y+3, r16	; 0x03
    1a16:	cd 82       	std	Y+5, r12	; 0x05
    1a18:	de 82       	std	Y+6, r13	; 0x06
    1a1a:	ef 82       	std	Y+7, r14	; 0x07
    1a1c:	f8 86       	std	Y+8, r15	; 0x08
    1a1e:	c7 01       	movw	r24, r14
    1a20:	b6 01       	movw	r22, r12
    1a22:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__clzsi2>
    1a26:	9c 01       	movw	r18, r24
    1a28:	21 50       	subi	r18, 0x01	; 1
    1a2a:	30 40       	sbci	r19, 0x00	; 0
    1a2c:	37 ff       	sbrs	r19, 7
    1a2e:	38 c0       	rjmp	.+112    	; 0x1aa0 <__floatunsisf+0xb8>
    1a30:	ee 27       	eor	r30, r30
    1a32:	ff 27       	eor	r31, r31
    1a34:	e2 1b       	sub	r30, r18
    1a36:	f3 0b       	sbc	r31, r19
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 e0       	ldi	r26, 0x00	; 0
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	0e 2e       	mov	r0, r30
    1a42:	04 c0       	rjmp	.+8      	; 0x1a4c <__floatunsisf+0x64>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	aa 1f       	adc	r26, r26
    1a4a:	bb 1f       	adc	r27, r27
    1a4c:	0a 94       	dec	r0
    1a4e:	d2 f7       	brpl	.-12     	; 0x1a44 <__floatunsisf+0x5c>
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	a1 09       	sbc	r26, r1
    1a54:	b1 09       	sbc	r27, r1
    1a56:	8c 21       	and	r24, r12
    1a58:	9d 21       	and	r25, r13
    1a5a:	ae 21       	and	r26, r14
    1a5c:	bf 21       	and	r27, r15
    1a5e:	41 e0       	ldi	r20, 0x01	; 1
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	00 97       	sbiw	r24, 0x00	; 0
    1a68:	a1 05       	cpc	r26, r1
    1a6a:	b1 05       	cpc	r27, r1
    1a6c:	19 f4       	brne	.+6      	; 0x1a74 <__floatunsisf+0x8c>
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	ba 01       	movw	r22, r20
    1a74:	04 c0       	rjmp	.+8      	; 0x1a7e <__floatunsisf+0x96>
    1a76:	f6 94       	lsr	r15
    1a78:	e7 94       	ror	r14
    1a7a:	d7 94       	ror	r13
    1a7c:	c7 94       	ror	r12
    1a7e:	ea 95       	dec	r30
    1a80:	d2 f7       	brpl	.-12     	; 0x1a76 <__floatunsisf+0x8e>
    1a82:	c4 2a       	or	r12, r20
    1a84:	d5 2a       	or	r13, r21
    1a86:	e6 2a       	or	r14, r22
    1a88:	f7 2a       	or	r15, r23
    1a8a:	cd 82       	std	Y+5, r12	; 0x05
    1a8c:	de 82       	std	Y+6, r13	; 0x06
    1a8e:	ef 82       	std	Y+7, r14	; 0x07
    1a90:	f8 86       	std	Y+8, r15	; 0x08
    1a92:	8e e1       	ldi	r24, 0x1E	; 30
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	82 1b       	sub	r24, r18
    1a98:	93 0b       	sbc	r25, r19
    1a9a:	9c 83       	std	Y+4, r25	; 0x04
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
    1a9e:	13 c0       	rjmp	.+38     	; 0x1ac6 <__floatunsisf+0xde>
    1aa0:	21 15       	cp	r18, r1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	81 f0       	breq	.+32     	; 0x1ac6 <__floatunsisf+0xde>
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <__floatunsisf+0xca>
    1aaa:	cc 0c       	add	r12, r12
    1aac:	dd 1c       	adc	r13, r13
    1aae:	ee 1c       	adc	r14, r14
    1ab0:	ff 1c       	adc	r15, r15
    1ab2:	0a 94       	dec	r0
    1ab4:	d2 f7       	brpl	.-12     	; 0x1aaa <__floatunsisf+0xc2>
    1ab6:	cd 82       	std	Y+5, r12	; 0x05
    1ab8:	de 82       	std	Y+6, r13	; 0x06
    1aba:	ef 82       	std	Y+7, r14	; 0x07
    1abc:	f8 86       	std	Y+8, r15	; 0x08
    1abe:	02 1b       	sub	r16, r18
    1ac0:	13 0b       	sbc	r17, r19
    1ac2:	1c 83       	std	Y+4, r17	; 0x04
    1ac4:	0b 83       	std	Y+3, r16	; 0x03
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__pack_f>
    1ace:	46 2f       	mov	r20, r22
    1ad0:	57 2f       	mov	r21, r23
    1ad2:	68 2f       	mov	r22, r24
    1ad4:	79 2f       	mov	r23, r25
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	ba 01       	movw	r22, r20
    1ada:	28 96       	adiw	r28, 0x08	; 8
    1adc:	e8 e0       	ldi	r30, 0x08	; 8
    1ade:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x14>

00001ae2 <__clzsi2>:
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	8b 01       	movw	r16, r22
    1af0:	9c 01       	movw	r18, r24
    1af2:	00 30       	cpi	r16, 0x00	; 0
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	18 07       	cpc	r17, r24
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	28 07       	cpc	r18, r24
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	38 07       	cpc	r19, r24
    1b00:	50 f4       	brcc	.+20     	; 0x1b16 <__clzsi2+0x34>
    1b02:	0f 3f       	cpi	r16, 0xFF	; 255
    1b04:	11 05       	cpc	r17, r1
    1b06:	21 05       	cpc	r18, r1
    1b08:	31 05       	cpc	r19, r1
    1b0a:	09 f0       	breq	.+2      	; 0x1b0e <__clzsi2+0x2c>
    1b0c:	88 f4       	brcc	.+34     	; 0x1b30 <__clzsi2+0x4e>
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	dc 01       	movw	r26, r24
    1b14:	16 c0       	rjmp	.+44     	; 0x1b42 <__clzsi2+0x60>
    1b16:	00 30       	cpi	r16, 0x00	; 0
    1b18:	e0 e0       	ldi	r30, 0x00	; 0
    1b1a:	1e 07       	cpc	r17, r30
    1b1c:	e0 e0       	ldi	r30, 0x00	; 0
    1b1e:	2e 07       	cpc	r18, r30
    1b20:	e1 e0       	ldi	r30, 0x01	; 1
    1b22:	3e 07       	cpc	r19, r30
    1b24:	50 f4       	brcc	.+20     	; 0x1b3a <__clzsi2+0x58>
    1b26:	80 e1       	ldi	r24, 0x10	; 16
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	a0 e0       	ldi	r26, 0x00	; 0
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <__clzsi2+0x60>
    1b30:	88 e0       	ldi	r24, 0x08	; 8
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	a0 e0       	ldi	r26, 0x00	; 0
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <__clzsi2+0x60>
    1b3a:	88 e1       	ldi	r24, 0x18	; 24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a0 e0       	ldi	r26, 0x00	; 0
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	48 1b       	sub	r20, r24
    1b4c:	59 0b       	sbc	r21, r25
    1b4e:	6a 0b       	sbc	r22, r26
    1b50:	7b 0b       	sbc	r23, r27
    1b52:	68 01       	movw	r12, r16
    1b54:	79 01       	movw	r14, r18
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <__clzsi2+0x7e>
    1b58:	f6 94       	lsr	r15
    1b5a:	e7 94       	ror	r14
    1b5c:	d7 94       	ror	r13
    1b5e:	c7 94       	ror	r12
    1b60:	8a 95       	dec	r24
    1b62:	d2 f7       	brpl	.-12     	; 0x1b58 <__clzsi2+0x76>
    1b64:	d7 01       	movw	r26, r14
    1b66:	c6 01       	movw	r24, r12
    1b68:	8d 54       	subi	r24, 0x4D	; 77
    1b6a:	9d 4f       	sbci	r25, 0xFD	; 253
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	80 81       	ld	r24, Z
    1b70:	48 1b       	sub	r20, r24
    1b72:	51 09       	sbc	r21, r1
    1b74:	61 09       	sbc	r22, r1
    1b76:	71 09       	sbc	r23, r1
    1b78:	ca 01       	movw	r24, r20
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	08 95       	ret

00001b88 <__pack_f>:
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	dc 01       	movw	r26, r24
    1b96:	14 96       	adiw	r26, 0x04	; 4
    1b98:	4d 91       	ld	r20, X+
    1b9a:	5d 91       	ld	r21, X+
    1b9c:	6d 91       	ld	r22, X+
    1b9e:	7c 91       	ld	r23, X
    1ba0:	17 97       	sbiw	r26, 0x07	; 7
    1ba2:	11 96       	adiw	r26, 0x01	; 1
    1ba4:	ec 91       	ld	r30, X
    1ba6:	11 97       	sbiw	r26, 0x01	; 1
    1ba8:	8c 91       	ld	r24, X
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	20 f4       	brcc	.+8      	; 0x1bb6 <__pack_f+0x2e>
    1bae:	60 61       	ori	r22, 0x10	; 16
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	a5 c0       	rjmp	.+330    	; 0x1d00 <__pack_f+0x178>
    1bb6:	84 30       	cpi	r24, 0x04	; 4
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <__pack_f+0x34>
    1bba:	9d c0       	rjmp	.+314    	; 0x1cf6 <__pack_f+0x16e>
    1bbc:	82 30       	cpi	r24, 0x02	; 2
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <__pack_f+0x3a>
    1bc0:	94 c0       	rjmp	.+296    	; 0x1cea <__pack_f+0x162>
    1bc2:	41 15       	cp	r20, r1
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	61 05       	cpc	r22, r1
    1bc8:	71 05       	cpc	r23, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <__pack_f+0x46>
    1bcc:	91 c0       	rjmp	.+290    	; 0x1cf0 <__pack_f+0x168>
    1bce:	12 96       	adiw	r26, 0x02	; 2
    1bd0:	8d 91       	ld	r24, X+
    1bd2:	9c 91       	ld	r25, X
    1bd4:	13 97       	sbiw	r26, 0x03	; 3
    1bd6:	2f ef       	ldi	r18, 0xFF	; 255
    1bd8:	82 38       	cpi	r24, 0x82	; 130
    1bda:	92 07       	cpc	r25, r18
    1bdc:	0c f0       	brlt	.+2      	; 0x1be0 <__pack_f+0x58>
    1bde:	59 c0       	rjmp	.+178    	; 0x1c92 <__pack_f+0x10a>
    1be0:	22 e8       	ldi	r18, 0x82	; 130
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	28 1b       	sub	r18, r24
    1be6:	39 0b       	sbc	r19, r25
    1be8:	2a 31       	cpi	r18, 0x1A	; 26
    1bea:	31 05       	cpc	r19, r1
    1bec:	64 f5       	brge	.+88     	; 0x1c46 <__pack_f+0xbe>
    1bee:	6a 01       	movw	r12, r20
    1bf0:	7b 01       	movw	r14, r22
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <__pack_f+0x76>
    1bf6:	f6 94       	lsr	r15
    1bf8:	e7 94       	ror	r14
    1bfa:	d7 94       	ror	r13
    1bfc:	c7 94       	ror	r12
    1bfe:	0a 94       	dec	r0
    1c00:	d2 f7       	brpl	.-12     	; 0x1bf6 <__pack_f+0x6e>
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14 <__pack_f+0x8c>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	aa 1f       	adc	r26, r26
    1c12:	bb 1f       	adc	r27, r27
    1c14:	2a 95       	dec	r18
    1c16:	d2 f7       	brpl	.-12     	; 0x1c0c <__pack_f+0x84>
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	a1 09       	sbc	r26, r1
    1c1c:	b1 09       	sbc	r27, r1
    1c1e:	84 23       	and	r24, r20
    1c20:	95 23       	and	r25, r21
    1c22:	a6 23       	and	r26, r22
    1c24:	b7 23       	and	r27, r23
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	a1 05       	cpc	r26, r1
    1c32:	b1 05       	cpc	r27, r1
    1c34:	19 f4       	brne	.+6      	; 0x1c3c <__pack_f+0xb4>
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	ba 01       	movw	r22, r20
    1c3c:	4c 29       	or	r20, r12
    1c3e:	5d 29       	or	r21, r13
    1c40:	6e 29       	or	r22, r14
    1c42:	7f 29       	or	r23, r15
    1c44:	03 c0       	rjmp	.+6      	; 0x1c4c <__pack_f+0xc4>
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	50 e0       	ldi	r21, 0x00	; 0
    1c4a:	ba 01       	movw	r22, r20
    1c4c:	db 01       	movw	r26, r22
    1c4e:	ca 01       	movw	r24, r20
    1c50:	8f 77       	andi	r24, 0x7F	; 127
    1c52:	90 70       	andi	r25, 0x00	; 0
    1c54:	a0 70       	andi	r26, 0x00	; 0
    1c56:	b0 70       	andi	r27, 0x00	; 0
    1c58:	80 34       	cpi	r24, 0x40	; 64
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	a1 05       	cpc	r26, r1
    1c5e:	b1 05       	cpc	r27, r1
    1c60:	39 f4       	brne	.+14     	; 0x1c70 <__pack_f+0xe8>
    1c62:	47 ff       	sbrs	r20, 7
    1c64:	09 c0       	rjmp	.+18     	; 0x1c78 <__pack_f+0xf0>
    1c66:	40 5c       	subi	r20, 0xC0	; 192
    1c68:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6a:	6f 4f       	sbci	r22, 0xFF	; 255
    1c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c6e:	04 c0       	rjmp	.+8      	; 0x1c78 <__pack_f+0xf0>
    1c70:	41 5c       	subi	r20, 0xC1	; 193
    1c72:	5f 4f       	sbci	r21, 0xFF	; 255
    1c74:	6f 4f       	sbci	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	40 30       	cpi	r20, 0x00	; 0
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	52 07       	cpc	r21, r18
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	62 07       	cpc	r22, r18
    1c86:	20 e4       	ldi	r18, 0x40	; 64
    1c88:	72 07       	cpc	r23, r18
    1c8a:	38 f5       	brcc	.+78     	; 0x1cda <__pack_f+0x152>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	24 c0       	rjmp	.+72     	; 0x1cda <__pack_f+0x152>
    1c92:	80 38       	cpi	r24, 0x80	; 128
    1c94:	91 05       	cpc	r25, r1
    1c96:	7c f5       	brge	.+94     	; 0x1cf6 <__pack_f+0x16e>
    1c98:	8a 01       	movw	r16, r20
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	0f 77       	andi	r16, 0x7F	; 127
    1c9e:	10 70       	andi	r17, 0x00	; 0
    1ca0:	20 70       	andi	r18, 0x00	; 0
    1ca2:	30 70       	andi	r19, 0x00	; 0
    1ca4:	00 34       	cpi	r16, 0x40	; 64
    1ca6:	11 05       	cpc	r17, r1
    1ca8:	21 05       	cpc	r18, r1
    1caa:	31 05       	cpc	r19, r1
    1cac:	39 f4       	brne	.+14     	; 0x1cbc <__pack_f+0x134>
    1cae:	47 ff       	sbrs	r20, 7
    1cb0:	09 c0       	rjmp	.+18     	; 0x1cc4 <__pack_f+0x13c>
    1cb2:	40 5c       	subi	r20, 0xC0	; 192
    1cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb6:	6f 4f       	sbci	r22, 0xFF	; 255
    1cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <__pack_f+0x13c>
    1cbc:	41 5c       	subi	r20, 0xC1	; 193
    1cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc0:	6f 4f       	sbci	r22, 0xFF	; 255
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	77 fd       	sbrc	r23, 7
    1cc6:	03 c0       	rjmp	.+6      	; 0x1cce <__pack_f+0x146>
    1cc8:	81 58       	subi	r24, 0x81	; 129
    1cca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <__pack_f+0x152>
    1cce:	76 95       	lsr	r23
    1cd0:	67 95       	ror	r22
    1cd2:	57 95       	ror	r21
    1cd4:	47 95       	ror	r20
    1cd6:	80 58       	subi	r24, 0x80	; 128
    1cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cda:	97 e0       	ldi	r25, 0x07	; 7
    1cdc:	76 95       	lsr	r23
    1cde:	67 95       	ror	r22
    1ce0:	57 95       	ror	r21
    1ce2:	47 95       	ror	r20
    1ce4:	9a 95       	dec	r25
    1ce6:	d1 f7       	brne	.-12     	; 0x1cdc <__pack_f+0x154>
    1ce8:	0b c0       	rjmp	.+22     	; 0x1d00 <__pack_f+0x178>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <__pack_f+0x172>
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <__pack_f+0x178>
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	ba 01       	movw	r22, r20
    1d00:	98 2f       	mov	r25, r24
    1d02:	97 95       	ror	r25
    1d04:	99 27       	eor	r25, r25
    1d06:	97 95       	ror	r25
    1d08:	a6 2f       	mov	r26, r22
    1d0a:	af 77       	andi	r26, 0x7F	; 127
    1d0c:	e7 95       	ror	r30
    1d0e:	ee 27       	eor	r30, r30
    1d10:	e7 95       	ror	r30
    1d12:	86 95       	lsr	r24
    1d14:	3a 2f       	mov	r19, r26
    1d16:	39 2b       	or	r19, r25
    1d18:	28 2f       	mov	r18, r24
    1d1a:	2e 2b       	or	r18, r30
    1d1c:	84 2f       	mov	r24, r20
    1d1e:	95 2f       	mov	r25, r21
    1d20:	a3 2f       	mov	r26, r19
    1d22:	b2 2f       	mov	r27, r18
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	08 95       	ret

00001d36 <__unpack_f>:
    1d36:	dc 01       	movw	r26, r24
    1d38:	fb 01       	movw	r30, r22
    1d3a:	4c 91       	ld	r20, X
    1d3c:	11 96       	adiw	r26, 0x01	; 1
    1d3e:	5c 91       	ld	r21, X
    1d40:	11 97       	sbiw	r26, 0x01	; 1
    1d42:	12 96       	adiw	r26, 0x02	; 2
    1d44:	8c 91       	ld	r24, X
    1d46:	12 97       	sbiw	r26, 0x02	; 2
    1d48:	68 2f       	mov	r22, r24
    1d4a:	6f 77       	andi	r22, 0x7F	; 127
    1d4c:	70 e0       	ldi	r23, 0x00	; 0
    1d4e:	98 2f       	mov	r25, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	99 27       	eor	r25, r25
    1d54:	99 1f       	adc	r25, r25
    1d56:	13 96       	adiw	r26, 0x03	; 3
    1d58:	2c 91       	ld	r18, X
    1d5a:	13 97       	sbiw	r26, 0x03	; 3
    1d5c:	82 2f       	mov	r24, r18
    1d5e:	88 0f       	add	r24, r24
    1d60:	89 2b       	or	r24, r25
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	22 1f       	adc	r18, r18
    1d66:	22 27       	eor	r18, r18
    1d68:	22 1f       	adc	r18, r18
    1d6a:	21 83       	std	Z+1, r18	; 0x01
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	39 f5       	brne	.+78     	; 0x1dbe <__unpack_f+0x88>
    1d70:	41 15       	cp	r20, r1
    1d72:	51 05       	cpc	r21, r1
    1d74:	61 05       	cpc	r22, r1
    1d76:	71 05       	cpc	r23, r1
    1d78:	11 f4       	brne	.+4      	; 0x1d7e <__unpack_f+0x48>
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	29 c0       	rjmp	.+82     	; 0x1dd0 <__unpack_f+0x9a>
    1d7e:	82 e8       	ldi	r24, 0x82	; 130
    1d80:	9f ef       	ldi	r25, 0xFF	; 255
    1d82:	93 83       	std	Z+3, r25	; 0x03
    1d84:	82 83       	std	Z+2, r24	; 0x02
    1d86:	27 e0       	ldi	r18, 0x07	; 7
    1d88:	44 0f       	add	r20, r20
    1d8a:	55 1f       	adc	r21, r21
    1d8c:	66 1f       	adc	r22, r22
    1d8e:	77 1f       	adc	r23, r23
    1d90:	2a 95       	dec	r18
    1d92:	d1 f7       	brne	.-12     	; 0x1d88 <__unpack_f+0x52>
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	80 83       	st	Z, r24
    1d98:	09 c0       	rjmp	.+18     	; 0x1dac <__unpack_f+0x76>
    1d9a:	44 0f       	add	r20, r20
    1d9c:	55 1f       	adc	r21, r21
    1d9e:	66 1f       	adc	r22, r22
    1da0:	77 1f       	adc	r23, r23
    1da2:	82 81       	ldd	r24, Z+2	; 0x02
    1da4:	93 81       	ldd	r25, Z+3	; 0x03
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	93 83       	std	Z+3, r25	; 0x03
    1daa:	82 83       	std	Z+2, r24	; 0x02
    1dac:	40 30       	cpi	r20, 0x00	; 0
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	58 07       	cpc	r21, r24
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	68 07       	cpc	r22, r24
    1db6:	80 e4       	ldi	r24, 0x40	; 64
    1db8:	78 07       	cpc	r23, r24
    1dba:	78 f3       	brcs	.-34     	; 0x1d9a <__unpack_f+0x64>
    1dbc:	20 c0       	rjmp	.+64     	; 0x1dfe <__unpack_f+0xc8>
    1dbe:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	79 f4       	brne	.+30     	; 0x1de2 <__unpack_f+0xac>
    1dc4:	41 15       	cp	r20, r1
    1dc6:	51 05       	cpc	r21, r1
    1dc8:	61 05       	cpc	r22, r1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	19 f4       	brne	.+6      	; 0x1dd4 <__unpack_f+0x9e>
    1dce:	84 e0       	ldi	r24, 0x04	; 4
    1dd0:	80 83       	st	Z, r24
    1dd2:	08 95       	ret
    1dd4:	64 ff       	sbrs	r22, 4
    1dd6:	03 c0       	rjmp	.+6      	; 0x1dde <__unpack_f+0xa8>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	80 83       	st	Z, r24
    1ddc:	10 c0       	rjmp	.+32     	; 0x1dfe <__unpack_f+0xc8>
    1dde:	10 82       	st	Z, r1
    1de0:	0e c0       	rjmp	.+28     	; 0x1dfe <__unpack_f+0xc8>
    1de2:	8f 57       	subi	r24, 0x7F	; 127
    1de4:	90 40       	sbci	r25, 0x00	; 0
    1de6:	93 83       	std	Z+3, r25	; 0x03
    1de8:	82 83       	std	Z+2, r24	; 0x02
    1dea:	83 e0       	ldi	r24, 0x03	; 3
    1dec:	80 83       	st	Z, r24
    1dee:	87 e0       	ldi	r24, 0x07	; 7
    1df0:	44 0f       	add	r20, r20
    1df2:	55 1f       	adc	r21, r21
    1df4:	66 1f       	adc	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	8a 95       	dec	r24
    1dfa:	d1 f7       	brne	.-12     	; 0x1df0 <__unpack_f+0xba>
    1dfc:	70 64       	ori	r23, 0x40	; 64
    1dfe:	44 83       	std	Z+4, r20	; 0x04
    1e00:	55 83       	std	Z+5, r21	; 0x05
    1e02:	66 83       	std	Z+6, r22	; 0x06
    1e04:	77 83       	std	Z+7, r23	; 0x07
    1e06:	08 95       	ret

00001e08 <__fpcmp_parts_f>:
    1e08:	cf 93       	push	r28
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	db 01       	movw	r26, r22
    1e0e:	90 81       	ld	r25, Z
    1e10:	92 30       	cpi	r25, 0x02	; 2
    1e12:	08 f4       	brcc	.+2      	; 0x1e16 <__fpcmp_parts_f+0xe>
    1e14:	4c c0       	rjmp	.+152    	; 0x1eae <__fpcmp_parts_f+0xa6>
    1e16:	8c 91       	ld	r24, X
    1e18:	82 30       	cpi	r24, 0x02	; 2
    1e1a:	08 f4       	brcc	.+2      	; 0x1e1e <__fpcmp_parts_f+0x16>
    1e1c:	48 c0       	rjmp	.+144    	; 0x1eae <__fpcmp_parts_f+0xa6>
    1e1e:	94 30       	cpi	r25, 0x04	; 4
    1e20:	69 f4       	brne	.+26     	; 0x1e3c <__fpcmp_parts_f+0x34>
    1e22:	21 81       	ldd	r18, Z+1	; 0x01
    1e24:	84 30       	cpi	r24, 0x04	; 4
    1e26:	39 f4       	brne	.+14     	; 0x1e36 <__fpcmp_parts_f+0x2e>
    1e28:	11 96       	adiw	r26, 0x01	; 1
    1e2a:	8c 91       	ld	r24, X
    1e2c:	11 97       	sbiw	r26, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	82 1b       	sub	r24, r18
    1e32:	91 09       	sbc	r25, r1
    1e34:	44 c0       	rjmp	.+136    	; 0x1ebe <__fpcmp_parts_f+0xb6>
    1e36:	22 23       	and	r18, r18
    1e38:	d1 f1       	breq	.+116    	; 0x1eae <__fpcmp_parts_f+0xa6>
    1e3a:	3f c0       	rjmp	.+126    	; 0x1eba <__fpcmp_parts_f+0xb2>
    1e3c:	84 30       	cpi	r24, 0x04	; 4
    1e3e:	21 f0       	breq	.+8      	; 0x1e48 <__fpcmp_parts_f+0x40>
    1e40:	92 30       	cpi	r25, 0x02	; 2
    1e42:	41 f4       	brne	.+16     	; 0x1e54 <__fpcmp_parts_f+0x4c>
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	b1 f1       	breq	.+108    	; 0x1eb4 <__fpcmp_parts_f+0xac>
    1e48:	11 96       	adiw	r26, 0x01	; 1
    1e4a:	8c 91       	ld	r24, X
    1e4c:	11 97       	sbiw	r26, 0x01	; 1
    1e4e:	88 23       	and	r24, r24
    1e50:	a1 f1       	breq	.+104    	; 0x1eba <__fpcmp_parts_f+0xb2>
    1e52:	2d c0       	rjmp	.+90     	; 0x1eae <__fpcmp_parts_f+0xa6>
    1e54:	c1 81       	ldd	r28, Z+1	; 0x01
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	01 f1       	breq	.+64     	; 0x1e9a <__fpcmp_parts_f+0x92>
    1e5a:	11 96       	adiw	r26, 0x01	; 1
    1e5c:	8c 91       	ld	r24, X
    1e5e:	11 97       	sbiw	r26, 0x01	; 1
    1e60:	c8 17       	cp	r28, r24
    1e62:	d9 f4       	brne	.+54     	; 0x1e9a <__fpcmp_parts_f+0x92>
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	12 96       	adiw	r26, 0x02	; 2
    1e6a:	2d 91       	ld	r18, X+
    1e6c:	3c 91       	ld	r19, X
    1e6e:	13 97       	sbiw	r26, 0x03	; 3
    1e70:	28 17       	cp	r18, r24
    1e72:	39 07       	cpc	r19, r25
    1e74:	94 f0       	brlt	.+36     	; 0x1e9a <__fpcmp_parts_f+0x92>
    1e76:	82 17       	cp	r24, r18
    1e78:	93 07       	cpc	r25, r19
    1e7a:	bc f0       	brlt	.+46     	; 0x1eaa <__fpcmp_parts_f+0xa2>
    1e7c:	44 81       	ldd	r20, Z+4	; 0x04
    1e7e:	55 81       	ldd	r21, Z+5	; 0x05
    1e80:	66 81       	ldd	r22, Z+6	; 0x06
    1e82:	77 81       	ldd	r23, Z+7	; 0x07
    1e84:	14 96       	adiw	r26, 0x04	; 4
    1e86:	8d 91       	ld	r24, X+
    1e88:	9d 91       	ld	r25, X+
    1e8a:	0d 90       	ld	r0, X+
    1e8c:	bc 91       	ld	r27, X
    1e8e:	a0 2d       	mov	r26, r0
    1e90:	84 17       	cp	r24, r20
    1e92:	95 07       	cpc	r25, r21
    1e94:	a6 07       	cpc	r26, r22
    1e96:	b7 07       	cpc	r27, r23
    1e98:	18 f4       	brcc	.+6      	; 0x1ea0 <__fpcmp_parts_f+0x98>
    1e9a:	cc 23       	and	r28, r28
    1e9c:	41 f0       	breq	.+16     	; 0x1eae <__fpcmp_parts_f+0xa6>
    1e9e:	0d c0       	rjmp	.+26     	; 0x1eba <__fpcmp_parts_f+0xb2>
    1ea0:	48 17       	cp	r20, r24
    1ea2:	59 07       	cpc	r21, r25
    1ea4:	6a 07       	cpc	r22, r26
    1ea6:	7b 07       	cpc	r23, r27
    1ea8:	28 f4       	brcc	.+10     	; 0x1eb4 <__fpcmp_parts_f+0xac>
    1eaa:	cc 23       	and	r28, r28
    1eac:	31 f0       	breq	.+12     	; 0x1eba <__fpcmp_parts_f+0xb2>
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	05 c0       	rjmp	.+10     	; 0x1ebe <__fpcmp_parts_f+0xb6>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <__fpcmp_parts_f+0xb6>
    1eba:	8f ef       	ldi	r24, 0xFF	; 255
    1ebc:	9f ef       	ldi	r25, 0xFF	; 255
    1ebe:	cf 91       	pop	r28
    1ec0:	08 95       	ret

00001ec2 <main>:


int
main(void)
{
    SW_init(), LED_init(), LCD_init();
    1ec2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SW_init>
    1ec6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LED_init>
    1eca:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_init>
    SW_enable_int();
    1ece:	0e 94 d5 00 	call	0x1aa	; 0x1aa <SW_enable_int>
    URT1_init();
    1ed2:	0e 94 b5 01 	call	0x36a	; 0x36a <URT1_init>
    stdout = URT1_out, stdin = URT1_in;
    1ed6:	80 91 15 02 	lds	r24, 0x0215
    1eda:	90 91 16 02 	lds	r25, 0x0216
    1ede:	90 93 59 04 	sts	0x0459, r25
    1ee2:	80 93 58 04 	sts	0x0458, r24
    1ee6:	80 91 13 02 	lds	r24, 0x0213
    1eea:	90 91 14 02 	lds	r25, 0x0214
    1eee:	90 93 57 04 	sts	0x0457, r25
    1ef2:	80 93 56 04 	sts	0x0456, r24

    can_init(b500k);
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <can_init>
    can_int_rx_set(1, 0x02, EXT, 8, 0x1fffffff, 0x05);
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	42 e0       	ldi	r20, 0x02	; 2
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	21 e0       	ldi	r18, 0x01	; 1
    1f08:	08 e0       	ldi	r16, 0x08	; 8
    1f0a:	ef ef       	ldi	r30, 0xFF	; 255
    1f0c:	ce 2e       	mov	r12, r30
    1f0e:	ef ef       	ldi	r30, 0xFF	; 255
    1f10:	de 2e       	mov	r13, r30
    1f12:	ef ef       	ldi	r30, 0xFF	; 255
    1f14:	ee 2e       	mov	r14, r30
    1f16:	ef e1       	ldi	r30, 0x1F	; 31
    1f18:	fe 2e       	mov	r15, r30
    1f1a:	f5 e0       	ldi	r31, 0x05	; 5
    1f1c:	af 2e       	mov	r10, r31
    1f1e:	0e 94 90 04 	call	0x920	; 0x920 <can_int_rx_set>

    MOTOR_init();
    1f22:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <MOTOR_init>

    while (1) {
        /* 상태 변수 변경 감지 */
        if (engine != engine_prev) {
            printf("set engine %s\n", engine ? "on" : "off");
    1f26:	ab e2       	ldi	r26, 0x2B	; 43
    1f28:	ea 2e       	mov	r14, r26
    1f2a:	a1 e0       	ldi	r26, 0x01	; 1
    1f2c:	fa 2e       	mov	r15, r26
            engine_prev = engine;
        }
        if (gear != gear_prev) {
            switch (gear) {
                case GEAR_FWD:
                    msg = "SET GEAR FORWARD";
    1f2e:	ba e3       	ldi	r27, 0x3A	; 58
    1f30:	cb 2e       	mov	r12, r27
    1f32:	b1 e0       	ldi	r27, 0x01	; 1
    1f34:	db 2e       	mov	r13, r27
                    printf("set gear forward\n");
                    break;
                case GEAR_REV:
                    msg = "SET GEAR REVERSE";
    1f36:	cc e5       	ldi	r28, 0x5C	; 92
    1f38:	ac 2e       	mov	r10, r28
    1f3a:	c1 e0       	ldi	r28, 0x01	; 1
    1f3c:	bc 2e       	mov	r11, r28
            }

            gear_prev = gear;
        }
        if (gear_set_failed) {
            msg = "NOT IN REST";
    1f3e:	de e7       	ldi	r29, 0x7E	; 126
    1f40:	8d 2e       	mov	r8, r29
    1f42:	d1 e0       	ldi	r29, 0x01	; 1
    1f44:	9d 2e       	mov	r9, r29
        /* LCD */
        if (!engine) {                      // engine is off
            LCD_cll_puts(0, 0, "ENGINE IS OFF");
            LCD_clear_line(1);
        } else {                            // normal state                       
            sprintf(strbuf, "SPEED:%2dkm/h", speed), LCD_cll_puts(0, 0, strbuf);
    1f46:	16 ed       	ldi	r17, 0xD6	; 214
    1f48:	61 2e       	mov	r6, r17
    1f4a:	13 e0       	ldi	r17, 0x03	; 3
    1f4c:	71 2e       	mov	r7, r17
    1f4e:	0b eb       	ldi	r16, 0xBB	; 187
    1f50:	40 2e       	mov	r4, r16
    1f52:	01 e0       	ldi	r16, 0x01	; 1
    1f54:	50 2e       	mov	r5, r16
            sprintf(strbuf, "GEAR:%s", (gear == GEAR_FWD) ? "FORWARD" : "REVERSE"), LCD_cll_puts(1, 0, strbuf);
    1f56:	89 ec       	ldi	r24, 0xC9	; 201
    1f58:	28 2e       	mov	r2, r24
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	38 2e       	mov	r3, r24
                        printf("speed limit: %dkm/h\n", -speed);
                    }
                } else if (speed_diff < 0) {
                    if (speed > 0) {
                        speed--;
                        printf("braked: %dkm/h\n", -speed);
    1f5e:	cb ef       	ldi	r28, 0xFB	; 251
    1f60:	d1 e0       	ldi	r29, 0x01	; 1
                if (speed_diff > 0) {
                    if (speed < 10) {
                        speed++;
                        printf("accelerated: %dkm/h\n", -speed);
                    } else {
                        printf("speed limit: %dkm/h\n", -speed);
    1f62:	06 ee       	ldi	r16, 0xE6	; 230
    1f64:	11 e0       	ldi	r17, 0x01	; 1

    MOTOR_init();

    while (1) {
        /* 상태 변수 변경 감지 */
        if (engine != engine_prev) {
    1f66:	80 91 be 03 	lds	r24, 0x03BE
    1f6a:	90 91 bd 03 	lds	r25, 0x03BD
    1f6e:	89 17       	cp	r24, r25
    1f70:	e9 f0       	breq	.+58     	; 0x1fac <main+0xea>
            printf("set engine %s\n", engine ? "on" : "off");
    1f72:	88 23       	and	r24, r24
    1f74:	19 f0       	breq	.+6      	; 0x1f7c <main+0xba>
    1f76:	84 e1       	ldi	r24, 0x14	; 20
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <main+0xbe>
    1f7c:	87 e1       	ldi	r24, 0x17	; 23
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <main+0xc0>
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <main+0xc2>
    1f84:	ad b7       	in	r26, 0x3d	; 61
    1f86:	be b7       	in	r27, 0x3e	; 62
    1f88:	12 96       	adiw	r26, 0x02	; 2
    1f8a:	fc 92       	st	X, r15
    1f8c:	ee 92       	st	-X, r14
    1f8e:	11 97       	sbiw	r26, 0x01	; 1
    1f90:	14 96       	adiw	r26, 0x04	; 4
    1f92:	9c 93       	st	X, r25
    1f94:	8e 93       	st	-X, r24
    1f96:	13 97       	sbiw	r26, 0x03	; 3
    1f98:	0e 94 91 11 	call	0x2322	; 0x2322 <printf>
            
            engine_prev = engine;
    1f9c:	80 91 be 03 	lds	r24, 0x03BE
    1fa0:	80 93 bd 03 	sts	0x03BD, r24
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
        }
        if (gear != gear_prev) {
    1fac:	80 91 ba 03 	lds	r24, 0x03BA
    1fb0:	90 91 b9 03 	lds	r25, 0x03B9
    1fb4:	89 17       	cp	r24, r25
    1fb6:	c1 f0       	breq	.+48     	; 0x1fe8 <main+0x126>
            switch (gear) {
    1fb8:	88 23       	and	r24, r24
    1fba:	19 f0       	breq	.+6      	; 0x1fc2 <main+0x100>
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	81 f4       	brne	.+32     	; 0x1fe0 <main+0x11e>
    1fc0:	07 c0       	rjmp	.+14     	; 0x1fd0 <main+0x10e>
                case GEAR_FWD:
                    msg = "SET GEAR FORWARD";
    1fc2:	d0 92 c0 03 	sts	0x03C0, r13
    1fc6:	c0 92 bf 03 	sts	0x03BF, r12
                    printf("set gear forward\n");
    1fca:	8b e4       	ldi	r24, 0x4B	; 75
    1fcc:	91 e0       	ldi	r25, 0x01	; 1
    1fce:	06 c0       	rjmp	.+12     	; 0x1fdc <main+0x11a>
                    break;
                case GEAR_REV:
                    msg = "SET GEAR REVERSE";
    1fd0:	b0 92 c0 03 	sts	0x03C0, r11
    1fd4:	a0 92 bf 03 	sts	0x03BF, r10
                    printf("set gear reverse\n");
    1fd8:	8d e6       	ldi	r24, 0x6D	; 109
    1fda:	91 e0       	ldi	r25, 0x01	; 1
    1fdc:	0e 94 a3 11 	call	0x2346	; 0x2346 <puts>
                    break;
            }

            gear_prev = gear;
    1fe0:	80 91 ba 03 	lds	r24, 0x03BA
    1fe4:	80 93 b9 03 	sts	0x03B9, r24
        }
        if (gear_set_failed) {
    1fe8:	80 91 b8 03 	lds	r24, 0x03B8
    1fec:	88 23       	and	r24, r24
    1fee:	51 f0       	breq	.+20     	; 0x2004 <main+0x142>
            msg = "NOT IN REST";
    1ff0:	90 92 c0 03 	sts	0x03C0, r9
    1ff4:	80 92 bf 03 	sts	0x03BF, r8
            printf("failed to change gear: not in rest\n");
    1ff8:	8a e8       	ldi	r24, 0x8A	; 138
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	0e 94 a3 11 	call	0x2346	; 0x2346 <puts>

            gear_set_failed = FALSE;
    2000:	10 92 b8 03 	sts	0x03B8, r1
        }

        /* LCD */
        if (!engine) {                      // engine is off
    2004:	80 91 be 03 	lds	r24, 0x03BE
    2008:	88 23       	and	r24, r24
    200a:	61 f4       	brne	.+24     	; 0x2024 <main+0x162>
            LCD_cll_puts(0, 0, "ENGINE IS OFF");
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	4d ea       	ldi	r20, 0xAD	; 173
    2010:	51 e0       	ldi	r21, 0x01	; 1
    2012:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_cll_puts>
            LCD_clear_line(1);
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	43 e0       	ldi	r20, 0x03	; 3
    201c:	51 e0       	ldi	r21, 0x01	; 1
    201e:	0e 94 21 01 	call	0x242	; 0x242 <LCD_puts>
    2022:	62 c0       	rjmp	.+196    	; 0x20e8 <main+0x226>
        } else {                            // normal state                       
            sprintf(strbuf, "SPEED:%2dkm/h", speed), LCD_cll_puts(0, 0, strbuf);
    2024:	00 d0       	rcall	.+0      	; 0x2026 <main+0x164>
    2026:	00 d0       	rcall	.+0      	; 0x2028 <main+0x166>
    2028:	00 d0       	rcall	.+0      	; 0x202a <main+0x168>
    202a:	ed b7       	in	r30, 0x3d	; 61
    202c:	fe b7       	in	r31, 0x3e	; 62
    202e:	31 96       	adiw	r30, 0x01	; 1
    2030:	ad b7       	in	r26, 0x3d	; 61
    2032:	be b7       	in	r27, 0x3e	; 62
    2034:	12 96       	adiw	r26, 0x02	; 2
    2036:	7c 92       	st	X, r7
    2038:	6e 92       	st	-X, r6
    203a:	11 97       	sbiw	r26, 0x01	; 1
    203c:	53 82       	std	Z+3, r5	; 0x03
    203e:	42 82       	std	Z+2, r4	; 0x02
    2040:	80 91 b6 03 	lds	r24, 0x03B6
    2044:	90 91 b7 03 	lds	r25, 0x03B7
    2048:	95 83       	std	Z+5, r25	; 0x05
    204a:	84 83       	std	Z+4, r24	; 0x04
    204c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <sprintf>
    2050:	ed b7       	in	r30, 0x3d	; 61
    2052:	fe b7       	in	r31, 0x3e	; 62
    2054:	36 96       	adiw	r30, 0x06	; 6
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	fe bf       	out	0x3e, r31	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	ed bf       	out	0x3d, r30	; 61
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	46 ed       	ldi	r20, 0xD6	; 214
    2066:	53 e0       	ldi	r21, 0x03	; 3
    2068:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_cll_puts>
            sprintf(strbuf, "GEAR:%s", (gear == GEAR_FWD) ? "FORWARD" : "REVERSE"), LCD_cll_puts(1, 0, strbuf);
    206c:	80 91 ba 03 	lds	r24, 0x03BA
    2070:	88 23       	and	r24, r24
    2072:	19 f4       	brne	.+6      	; 0x207a <main+0x1b8>
    2074:	8b e1       	ldi	r24, 0x1B	; 27
    2076:	91 e0       	ldi	r25, 0x01	; 1
    2078:	02 c0       	rjmp	.+4      	; 0x207e <main+0x1bc>
    207a:	83 e2       	ldi	r24, 0x23	; 35
    207c:	91 e0       	ldi	r25, 0x01	; 1
    207e:	00 d0       	rcall	.+0      	; 0x2080 <main+0x1be>
    2080:	00 d0       	rcall	.+0      	; 0x2082 <main+0x1c0>
    2082:	00 d0       	rcall	.+0      	; 0x2084 <main+0x1c2>
    2084:	ed b7       	in	r30, 0x3d	; 61
    2086:	fe b7       	in	r31, 0x3e	; 62
    2088:	31 96       	adiw	r30, 0x01	; 1
    208a:	26 ed       	ldi	r18, 0xD6	; 214
    208c:	33 e0       	ldi	r19, 0x03	; 3
    208e:	ad b7       	in	r26, 0x3d	; 61
    2090:	be b7       	in	r27, 0x3e	; 62
    2092:	12 96       	adiw	r26, 0x02	; 2
    2094:	3c 93       	st	X, r19
    2096:	2e 93       	st	-X, r18
    2098:	11 97       	sbiw	r26, 0x01	; 1
    209a:	33 82       	std	Z+3, r3	; 0x03
    209c:	22 82       	std	Z+2, r2	; 0x02
    209e:	95 83       	std	Z+5, r25	; 0x05
    20a0:	84 83       	std	Z+4, r24	; 0x04
    20a2:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <sprintf>
    20a6:	ed b7       	in	r30, 0x3d	; 61
    20a8:	fe b7       	in	r31, 0x3e	; 62
    20aa:	36 96       	adiw	r30, 0x06	; 6
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	fe bf       	out	0x3e, r31	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	ed bf       	out	0x3d, r30	; 61
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	46 ed       	ldi	r20, 0xD6	; 214
    20bc:	53 e0       	ldi	r21, 0x03	; 3
    20be:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_cll_puts>
            if (msg) {
    20c2:	40 91 bf 03 	lds	r20, 0x03BF
    20c6:	50 91 c0 03 	lds	r21, 0x03C0
    20ca:	41 15       	cp	r20, r1
    20cc:	51 05       	cpc	r21, r1
    20ce:	61 f0       	breq	.+24     	; 0x20e8 <main+0x226>
                LCD_cll_puts(1, 0, msg);
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_cll_puts>
                mdelay(300);
    20d8:	8c e2       	ldi	r24, 0x2C	; 44
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	0e 94 c0 00 	call	0x180	; 0x180 <mdelay>
                msg = NULL;
    20e0:	10 92 c0 03 	sts	0x03C0, r1
    20e4:	10 92 bf 03 	sts	0x03BF, r1
            }
        }


        /* 방향 지시등 */
        if (dir_signal != dir_signal_prev) {
    20e8:	80 91 bc 03 	lds	r24, 0x03BC
    20ec:	90 91 bb 03 	lds	r25, 0x03BB
    20f0:	89 17       	cp	r24, r25
    20f2:	49 f0       	breq	.+18     	; 0x2106 <main+0x244>
            if (dir_signal == DIRSIG_L)
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	11 f4       	brne	.+4      	; 0x20fc <main+0x23a>
                LED_on();
    20f8:	2f 98       	cbi	0x05, 7	; 5
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <main+0x23c>
            else
                LED_off();
    20fc:	2f 9a       	sbi	0x05, 7	; 5

            dir_signal_prev = dir_signal;
    20fe:	80 91 bc 03 	lds	r24, 0x03BC
    2102:	80 93 bb 03 	sts	0x03BB, r24
        }


        /* Motor */
        if (!engine) {              // engine is off
    2106:	80 91 be 03 	lds	r24, 0x03BE
    210a:	88 23       	and	r24, r24
    210c:	89 f4       	brne	.+34     	; 0x2130 <main+0x26e>
            MOTOR_servo_cntl(0);        // 동력 차단
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MOTOR_servo_cntl>
            MOTOR_DC_cntl(0);           // 엔진 정지
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 04 06 	call	0xc08	; 0xc08 <MOTOR_DC_cntl>
            speed = speed_diff = 0;
    211e:	10 92 b5 03 	sts	0x03B5, r1
    2122:	10 92 b4 03 	sts	0x03B4, r1
    2126:	10 92 b7 03 	sts	0x03B7, r1
    212a:	10 92 b6 03 	sts	0x03B6, r1
    212e:	a9 c0       	rjmp	.+338    	; 0x2282 <main+0x3c0>
        } else {                    // engine is on
            MOTOR_servo_cntl(180);      // 동력 연결
    2130:	84 eb       	ldi	r24, 0xB4	; 180
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MOTOR_servo_cntl>
            if (gear == GEAR_FWD) {     // if forward
    2138:	40 91 ba 03 	lds	r20, 0x03BA
    213c:	80 91 b6 03 	lds	r24, 0x03B6
    2140:	90 91 b7 03 	lds	r25, 0x03B7
    2144:	20 91 b4 03 	lds	r18, 0x03B4
    2148:	30 91 b5 03 	lds	r19, 0x03B5
    214c:	44 23       	and	r20, r20
    214e:	09 f0       	breq	.+2      	; 0x2152 <main+0x290>
    2150:	46 c0       	rjmp	.+140    	; 0x21de <main+0x31c>
                if (speed_diff > 0) {
    2152:	12 16       	cp	r1, r18
    2154:	13 06       	cpc	r1, r19
    2156:	14 f5       	brge	.+68     	; 0x219c <main+0x2da>
                    if (speed < 25) {
    2158:	89 31       	cpi	r24, 0x19	; 25
    215a:	91 05       	cpc	r25, r1
    215c:	84 f4       	brge	.+32     	; 0x217e <main+0x2bc>
                        speed++;
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	90 93 b7 03 	sts	0x03B7, r25
    2164:	80 93 b6 03 	sts	0x03B6, r24
                        printf("accelerated: %dkm/h\n", speed);
    2168:	00 d0       	rcall	.+0      	; 0x216a <main+0x2a8>
    216a:	00 d0       	rcall	.+0      	; 0x216c <main+0x2aa>
    216c:	21 ed       	ldi	r18, 0xD1	; 209
    216e:	31 e0       	ldi	r19, 0x01	; 1
    2170:	ad b7       	in	r26, 0x3d	; 61
    2172:	be b7       	in	r27, 0x3e	; 62
    2174:	12 96       	adiw	r26, 0x02	; 2
    2176:	3c 93       	st	X, r19
    2178:	2e 93       	st	-X, r18
    217a:	11 97       	sbiw	r26, 0x01	; 1
    217c:	22 c0       	rjmp	.+68     	; 0x21c2 <main+0x300>
                    } else {
                        printf("speed limit: %dkm/h\n", speed);
    217e:	00 d0       	rcall	.+0      	; 0x2180 <main+0x2be>
    2180:	00 d0       	rcall	.+0      	; 0x2182 <main+0x2c0>
    2182:	ed b7       	in	r30, 0x3d	; 61
    2184:	fe b7       	in	r31, 0x3e	; 62
    2186:	12 83       	std	Z+2, r17	; 0x02
    2188:	01 83       	std	Z+1, r16	; 0x01
    218a:	94 83       	std	Z+4, r25	; 0x04
    218c:	83 83       	std	Z+3, r24	; 0x03
    218e:	0e 94 91 11 	call	0x2322	; 0x2322 <printf>
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	1c c0       	rjmp	.+56     	; 0x21d4 <main+0x312>
                    }
                } else if (speed_diff < 0) {
    219c:	21 15       	cp	r18, r1
    219e:	31 05       	cpc	r19, r1
    21a0:	c9 f0       	breq	.+50     	; 0x21d4 <main+0x312>
                    if (speed > 0) {
    21a2:	18 16       	cp	r1, r24
    21a4:	19 06       	cpc	r1, r25
    21a6:	94 f4       	brge	.+36     	; 0x21cc <main+0x30a>
                        speed--;
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	90 93 b7 03 	sts	0x03B7, r25
    21ae:	80 93 b6 03 	sts	0x03B6, r24
                        printf("braked: %dkm/h\n", speed);
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <main+0x2f2>
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <main+0x2f4>
    21b6:	ad b7       	in	r26, 0x3d	; 61
    21b8:	be b7       	in	r27, 0x3e	; 62
    21ba:	12 96       	adiw	r26, 0x02	; 2
    21bc:	dc 93       	st	X, r29
    21be:	ce 93       	st	-X, r28
    21c0:	11 97       	sbiw	r26, 0x01	; 1
    21c2:	14 96       	adiw	r26, 0x04	; 4
    21c4:	9c 93       	st	X, r25
    21c6:	8e 93       	st	-X, r24
    21c8:	13 97       	sbiw	r26, 0x03	; 3
    21ca:	e1 cf       	rjmp	.-62     	; 0x218e <main+0x2cc>
                    } else {
                        printf("stopped\n");
    21cc:	8b e0       	ldi	r24, 0x0B	; 11
    21ce:	92 e0       	ldi	r25, 0x02	; 2
    21d0:	0e 94 a3 11 	call	0x2346	; 0x2346 <puts>
                    }
                }
                MOTOR_DC_cntl(speed);
    21d4:	80 91 b6 03 	lds	r24, 0x03B6
    21d8:	90 91 b7 03 	lds	r25, 0x03B7
    21dc:	4c c0       	rjmp	.+152    	; 0x2276 <main+0x3b4>
            } else {                    // if reverse
                if (speed_diff > 0) {
    21de:	12 16       	cp	r1, r18
    21e0:	13 06       	cpc	r1, r19
    21e2:	3c f5       	brge	.+78     	; 0x2232 <main+0x370>
                    if (speed < 10) {
    21e4:	8a 30       	cpi	r24, 0x0A	; 10
    21e6:	91 05       	cpc	r25, r1
    21e8:	74 f4       	brge	.+28     	; 0x2206 <main+0x344>
                        speed++;
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	90 93 b7 03 	sts	0x03B7, r25
    21f0:	80 93 b6 03 	sts	0x03B6, r24
                        printf("accelerated: %dkm/h\n", -speed);
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <main+0x334>
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <main+0x336>
    21f8:	21 ed       	ldi	r18, 0xD1	; 209
    21fa:	31 e0       	ldi	r19, 0x01	; 1
    21fc:	ed b7       	in	r30, 0x3d	; 61
    21fe:	fe b7       	in	r31, 0x3e	; 62
    2200:	32 83       	std	Z+2, r19	; 0x02
    2202:	21 83       	std	Z+1, r18	; 0x01
    2204:	27 c0       	rjmp	.+78     	; 0x2254 <main+0x392>
                    } else {
                        printf("speed limit: %dkm/h\n", -speed);
    2206:	00 d0       	rcall	.+0      	; 0x2208 <main+0x346>
    2208:	00 d0       	rcall	.+0      	; 0x220a <main+0x348>
    220a:	ad b7       	in	r26, 0x3d	; 61
    220c:	be b7       	in	r27, 0x3e	; 62
    220e:	12 96       	adiw	r26, 0x02	; 2
    2210:	1c 93       	st	X, r17
    2212:	0e 93       	st	-X, r16
    2214:	11 97       	sbiw	r26, 0x01	; 1
    2216:	90 95       	com	r25
    2218:	81 95       	neg	r24
    221a:	9f 4f       	sbci	r25, 0xFF	; 255
    221c:	14 96       	adiw	r26, 0x04	; 4
    221e:	9c 93       	st	X, r25
    2220:	8e 93       	st	-X, r24
    2222:	13 97       	sbiw	r26, 0x03	; 3
    2224:	0e 94 91 11 	call	0x2322	; 0x2322 <printf>
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	1b c0       	rjmp	.+54     	; 0x2268 <main+0x3a6>
                    }
                } else if (speed_diff < 0) {
    2232:	21 15       	cp	r18, r1
    2234:	31 05       	cpc	r19, r1
    2236:	c1 f0       	breq	.+48     	; 0x2268 <main+0x3a6>
                    if (speed > 0) {
    2238:	18 16       	cp	r1, r24
    223a:	19 06       	cpc	r1, r25
    223c:	8c f4       	brge	.+34     	; 0x2260 <main+0x39e>
                        speed--;
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	90 93 b7 03 	sts	0x03B7, r25
    2244:	80 93 b6 03 	sts	0x03B6, r24
                        printf("braked: %dkm/h\n", -speed);
    2248:	00 d0       	rcall	.+0      	; 0x224a <main+0x388>
    224a:	00 d0       	rcall	.+0      	; 0x224c <main+0x38a>
    224c:	ed b7       	in	r30, 0x3d	; 61
    224e:	fe b7       	in	r31, 0x3e	; 62
    2250:	d2 83       	std	Z+2, r29	; 0x02
    2252:	c1 83       	std	Z+1, r28	; 0x01
    2254:	90 95       	com	r25
    2256:	81 95       	neg	r24
    2258:	9f 4f       	sbci	r25, 0xFF	; 255
    225a:	94 83       	std	Z+4, r25	; 0x04
    225c:	83 83       	std	Z+3, r24	; 0x03
    225e:	e2 cf       	rjmp	.-60     	; 0x2224 <main+0x362>
                    } else {
                        printf("stopped\n");
    2260:	8b e0       	ldi	r24, 0x0B	; 11
    2262:	92 e0       	ldi	r25, 0x02	; 2
    2264:	0e 94 a3 11 	call	0x2346	; 0x2346 <puts>
                    }
                }
                MOTOR_DC_cntl(-speed);
    2268:	80 91 b6 03 	lds	r24, 0x03B6
    226c:	90 91 b7 03 	lds	r25, 0x03B7
    2270:	90 95       	com	r25
    2272:	81 95       	neg	r24
    2274:	9f 4f       	sbci	r25, 0xFF	; 255
    2276:	0e 94 04 06 	call	0xc08	; 0xc08 <MOTOR_DC_cntl>
            }
            speed_diff = 0;
    227a:	10 92 b5 03 	sts	0x03B5, r1
    227e:	10 92 b4 03 	sts	0x03B4, r1
        }


        mdelay(40);
    2282:	88 e2       	ldi	r24, 0x28	; 40
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 c0 00 	call	0x180	; 0x180 <mdelay>
    }
    228a:	6d ce       	rjmp	.-806    	; 0x1f66 <main+0xa4>

0000228c <__udivmodhi4>:
    228c:	aa 1b       	sub	r26, r26
    228e:	bb 1b       	sub	r27, r27
    2290:	51 e1       	ldi	r21, 0x11	; 17
    2292:	07 c0       	rjmp	.+14     	; 0x22a2 <__udivmodhi4_ep>

00002294 <__udivmodhi4_loop>:
    2294:	aa 1f       	adc	r26, r26
    2296:	bb 1f       	adc	r27, r27
    2298:	a6 17       	cp	r26, r22
    229a:	b7 07       	cpc	r27, r23
    229c:	10 f0       	brcs	.+4      	; 0x22a2 <__udivmodhi4_ep>
    229e:	a6 1b       	sub	r26, r22
    22a0:	b7 0b       	sbc	r27, r23

000022a2 <__udivmodhi4_ep>:
    22a2:	88 1f       	adc	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	5a 95       	dec	r21
    22a8:	a9 f7       	brne	.-22     	; 0x2294 <__udivmodhi4_loop>
    22aa:	80 95       	com	r24
    22ac:	90 95       	com	r25
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	08 95       	ret

000022b4 <__prologue_saves__>:
    22b4:	2f 92       	push	r2
    22b6:	3f 92       	push	r3
    22b8:	4f 92       	push	r4
    22ba:	5f 92       	push	r5
    22bc:	6f 92       	push	r6
    22be:	7f 92       	push	r7
    22c0:	8f 92       	push	r8
    22c2:	9f 92       	push	r9
    22c4:	af 92       	push	r10
    22c6:	bf 92       	push	r11
    22c8:	cf 92       	push	r12
    22ca:	df 92       	push	r13
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	ca 1b       	sub	r28, r26
    22de:	db 0b       	sbc	r29, r27
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	09 94       	ijmp

000022ec <__epilogue_restores__>:
    22ec:	2a 88       	ldd	r2, Y+18	; 0x12
    22ee:	39 88       	ldd	r3, Y+17	; 0x11
    22f0:	48 88       	ldd	r4, Y+16	; 0x10
    22f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    22f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    22f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    22f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    22fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    22fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    22fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2300:	c8 84       	ldd	r12, Y+8	; 0x08
    2302:	df 80       	ldd	r13, Y+7	; 0x07
    2304:	ee 80       	ldd	r14, Y+6	; 0x06
    2306:	fd 80       	ldd	r15, Y+5	; 0x05
    2308:	0c 81       	ldd	r16, Y+4	; 0x04
    230a:	1b 81       	ldd	r17, Y+3	; 0x03
    230c:	aa 81       	ldd	r26, Y+2	; 0x02
    230e:	b9 81       	ldd	r27, Y+1	; 0x01
    2310:	ce 0f       	add	r28, r30
    2312:	d1 1d       	adc	r29, r1
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	ed 01       	movw	r28, r26
    2320:	08 95       	ret

00002322 <printf>:
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
    232a:	fe 01       	movw	r30, r28
    232c:	35 96       	adiw	r30, 0x05	; 5
    232e:	61 91       	ld	r22, Z+
    2330:	71 91       	ld	r23, Z+
    2332:	80 91 58 04 	lds	r24, 0x0458
    2336:	90 91 59 04 	lds	r25, 0x0459
    233a:	af 01       	movw	r20, r30
    233c:	0e 94 00 12 	call	0x2400	; 0x2400 <vfprintf>
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	08 95       	ret

00002346 <puts>:
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	8c 01       	movw	r16, r24
    2350:	e0 91 58 04 	lds	r30, 0x0458
    2354:	f0 91 59 04 	lds	r31, 0x0459
    2358:	83 81       	ldd	r24, Z+3	; 0x03
    235a:	81 ff       	sbrs	r24, 1
    235c:	1a c0       	rjmp	.+52     	; 0x2392 <puts+0x4c>
    235e:	c0 e0       	ldi	r28, 0x00	; 0
    2360:	d0 e0       	ldi	r29, 0x00	; 0
    2362:	05 c0       	rjmp	.+10     	; 0x236e <puts+0x28>
    2364:	09 95       	icall
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	11 f0       	breq	.+4      	; 0x236e <puts+0x28>
    236a:	cf ef       	ldi	r28, 0xFF	; 255
    236c:	df ef       	ldi	r29, 0xFF	; 255
    236e:	f8 01       	movw	r30, r16
    2370:	81 91       	ld	r24, Z+
    2372:	8f 01       	movw	r16, r30
    2374:	60 91 58 04 	lds	r22, 0x0458
    2378:	70 91 59 04 	lds	r23, 0x0459
    237c:	db 01       	movw	r26, r22
    237e:	18 96       	adiw	r26, 0x08	; 8
    2380:	ed 91       	ld	r30, X+
    2382:	fc 91       	ld	r31, X
    2384:	19 97       	sbiw	r26, 0x09	; 9
    2386:	88 23       	and	r24, r24
    2388:	69 f7       	brne	.-38     	; 0x2364 <puts+0x1e>
    238a:	8a e0       	ldi	r24, 0x0A	; 10
    238c:	09 95       	icall
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	11 f0       	breq	.+4      	; 0x2396 <puts+0x50>
    2392:	cf ef       	ldi	r28, 0xFF	; 255
    2394:	df ef       	ldi	r29, 0xFF	; 255
    2396:	ce 01       	movw	r24, r28
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	08 95       	ret

000023a2 <sprintf>:
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	2e 97       	sbiw	r28, 0x0e	; 14
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	0d 89       	ldd	r16, Y+21	; 0x15
    23bc:	1e 89       	ldd	r17, Y+22	; 0x16
    23be:	86 e0       	ldi	r24, 0x06	; 6
    23c0:	8c 83       	std	Y+4, r24	; 0x04
    23c2:	1a 83       	std	Y+2, r17	; 0x02
    23c4:	09 83       	std	Y+1, r16	; 0x01
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	9f e7       	ldi	r25, 0x7F	; 127
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
    23ce:	ae 01       	movw	r20, r28
    23d0:	47 5e       	subi	r20, 0xE7	; 231
    23d2:	5f 4f       	sbci	r21, 0xFF	; 255
    23d4:	ce 01       	movw	r24, r28
    23d6:	01 96       	adiw	r24, 0x01	; 1
    23d8:	6f 89       	ldd	r22, Y+23	; 0x17
    23da:	78 8d       	ldd	r23, Y+24	; 0x18
    23dc:	0e 94 00 12 	call	0x2400	; 0x2400 <vfprintf>
    23e0:	ef 81       	ldd	r30, Y+7	; 0x07
    23e2:	f8 85       	ldd	r31, Y+8	; 0x08
    23e4:	e0 0f       	add	r30, r16
    23e6:	f1 1f       	adc	r31, r17
    23e8:	10 82       	st	Z, r1
    23ea:	2e 96       	adiw	r28, 0x0e	; 14
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	0f 91       	pop	r16
    23fe:	08 95       	ret

00002400 <vfprintf>:
    2400:	2f 92       	push	r2
    2402:	3f 92       	push	r3
    2404:	4f 92       	push	r4
    2406:	5f 92       	push	r5
    2408:	6f 92       	push	r6
    240a:	7f 92       	push	r7
    240c:	8f 92       	push	r8
    240e:	9f 92       	push	r9
    2410:	af 92       	push	r10
    2412:	bf 92       	push	r11
    2414:	cf 92       	push	r12
    2416:	df 92       	push	r13
    2418:	ef 92       	push	r14
    241a:	ff 92       	push	r15
    241c:	0f 93       	push	r16
    241e:	1f 93       	push	r17
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	cd b7       	in	r28, 0x3d	; 61
    2426:	de b7       	in	r29, 0x3e	; 62
    2428:	2d 97       	sbiw	r28, 0x0d	; 13
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	3c 01       	movw	r6, r24
    2436:	7d 87       	std	Y+13, r23	; 0x0d
    2438:	6c 87       	std	Y+12, r22	; 0x0c
    243a:	5a 01       	movw	r10, r20
    243c:	fc 01       	movw	r30, r24
    243e:	17 82       	std	Z+7, r1	; 0x07
    2440:	16 82       	std	Z+6, r1	; 0x06
    2442:	83 81       	ldd	r24, Z+3	; 0x03
    2444:	81 ff       	sbrs	r24, 1
    2446:	c8 c1       	rjmp	.+912    	; 0x27d8 <vfprintf+0x3d8>
    2448:	2e 01       	movw	r4, r28
    244a:	08 94       	sec
    244c:	41 1c       	adc	r4, r1
    244e:	51 1c       	adc	r5, r1
    2450:	f3 01       	movw	r30, r6
    2452:	93 81       	ldd	r25, Z+3	; 0x03
    2454:	ec 85       	ldd	r30, Y+12	; 0x0c
    2456:	fd 85       	ldd	r31, Y+13	; 0x0d
    2458:	93 fd       	sbrc	r25, 3
    245a:	85 91       	lpm	r24, Z+
    245c:	93 ff       	sbrs	r25, 3
    245e:	81 91       	ld	r24, Z+
    2460:	fd 87       	std	Y+13, r31	; 0x0d
    2462:	ec 87       	std	Y+12, r30	; 0x0c
    2464:	88 23       	and	r24, r24
    2466:	09 f4       	brne	.+2      	; 0x246a <vfprintf+0x6a>
    2468:	b3 c1       	rjmp	.+870    	; 0x27d0 <vfprintf+0x3d0>
    246a:	85 32       	cpi	r24, 0x25	; 37
    246c:	41 f4       	brne	.+16     	; 0x247e <vfprintf+0x7e>
    246e:	93 fd       	sbrc	r25, 3
    2470:	85 91       	lpm	r24, Z+
    2472:	93 ff       	sbrs	r25, 3
    2474:	81 91       	ld	r24, Z+
    2476:	fd 87       	std	Y+13, r31	; 0x0d
    2478:	ec 87       	std	Y+12, r30	; 0x0c
    247a:	85 32       	cpi	r24, 0x25	; 37
    247c:	29 f4       	brne	.+10     	; 0x2488 <vfprintf+0x88>
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	b3 01       	movw	r22, r6
    2482:	0e 94 1d 14 	call	0x283a	; 0x283a <fputc>
    2486:	e4 cf       	rjmp	.-56     	; 0x2450 <vfprintf+0x50>
    2488:	ff 24       	eor	r15, r15
    248a:	ee 24       	eor	r14, r14
    248c:	10 e0       	ldi	r17, 0x00	; 0
    248e:	10 32       	cpi	r17, 0x20	; 32
    2490:	b0 f4       	brcc	.+44     	; 0x24be <vfprintf+0xbe>
    2492:	8b 32       	cpi	r24, 0x2B	; 43
    2494:	69 f0       	breq	.+26     	; 0x24b0 <vfprintf+0xb0>
    2496:	8c 32       	cpi	r24, 0x2C	; 44
    2498:	28 f4       	brcc	.+10     	; 0x24a4 <vfprintf+0xa4>
    249a:	80 32       	cpi	r24, 0x20	; 32
    249c:	51 f0       	breq	.+20     	; 0x24b2 <vfprintf+0xb2>
    249e:	83 32       	cpi	r24, 0x23	; 35
    24a0:	71 f4       	brne	.+28     	; 0x24be <vfprintf+0xbe>
    24a2:	0b c0       	rjmp	.+22     	; 0x24ba <vfprintf+0xba>
    24a4:	8d 32       	cpi	r24, 0x2D	; 45
    24a6:	39 f0       	breq	.+14     	; 0x24b6 <vfprintf+0xb6>
    24a8:	80 33       	cpi	r24, 0x30	; 48
    24aa:	49 f4       	brne	.+18     	; 0x24be <vfprintf+0xbe>
    24ac:	11 60       	ori	r17, 0x01	; 1
    24ae:	2c c0       	rjmp	.+88     	; 0x2508 <vfprintf+0x108>
    24b0:	12 60       	ori	r17, 0x02	; 2
    24b2:	14 60       	ori	r17, 0x04	; 4
    24b4:	29 c0       	rjmp	.+82     	; 0x2508 <vfprintf+0x108>
    24b6:	18 60       	ori	r17, 0x08	; 8
    24b8:	27 c0       	rjmp	.+78     	; 0x2508 <vfprintf+0x108>
    24ba:	10 61       	ori	r17, 0x10	; 16
    24bc:	25 c0       	rjmp	.+74     	; 0x2508 <vfprintf+0x108>
    24be:	17 fd       	sbrc	r17, 7
    24c0:	2e c0       	rjmp	.+92     	; 0x251e <vfprintf+0x11e>
    24c2:	28 2f       	mov	r18, r24
    24c4:	20 53       	subi	r18, 0x30	; 48
    24c6:	2a 30       	cpi	r18, 0x0A	; 10
    24c8:	98 f4       	brcc	.+38     	; 0x24f0 <vfprintf+0xf0>
    24ca:	16 ff       	sbrs	r17, 6
    24cc:	08 c0       	rjmp	.+16     	; 0x24de <vfprintf+0xde>
    24ce:	8f 2d       	mov	r24, r15
    24d0:	88 0f       	add	r24, r24
    24d2:	f8 2e       	mov	r15, r24
    24d4:	ff 0c       	add	r15, r15
    24d6:	ff 0c       	add	r15, r15
    24d8:	f8 0e       	add	r15, r24
    24da:	f2 0e       	add	r15, r18
    24dc:	15 c0       	rjmp	.+42     	; 0x2508 <vfprintf+0x108>
    24de:	8e 2d       	mov	r24, r14
    24e0:	88 0f       	add	r24, r24
    24e2:	e8 2e       	mov	r14, r24
    24e4:	ee 0c       	add	r14, r14
    24e6:	ee 0c       	add	r14, r14
    24e8:	e8 0e       	add	r14, r24
    24ea:	e2 0e       	add	r14, r18
    24ec:	10 62       	ori	r17, 0x20	; 32
    24ee:	0c c0       	rjmp	.+24     	; 0x2508 <vfprintf+0x108>
    24f0:	8e 32       	cpi	r24, 0x2E	; 46
    24f2:	21 f4       	brne	.+8      	; 0x24fc <vfprintf+0xfc>
    24f4:	16 fd       	sbrc	r17, 6
    24f6:	6c c1       	rjmp	.+728    	; 0x27d0 <vfprintf+0x3d0>
    24f8:	10 64       	ori	r17, 0x40	; 64
    24fa:	06 c0       	rjmp	.+12     	; 0x2508 <vfprintf+0x108>
    24fc:	8c 36       	cpi	r24, 0x6C	; 108
    24fe:	11 f4       	brne	.+4      	; 0x2504 <vfprintf+0x104>
    2500:	10 68       	ori	r17, 0x80	; 128
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <vfprintf+0x108>
    2504:	88 36       	cpi	r24, 0x68	; 104
    2506:	59 f4       	brne	.+22     	; 0x251e <vfprintf+0x11e>
    2508:	ec 85       	ldd	r30, Y+12	; 0x0c
    250a:	fd 85       	ldd	r31, Y+13	; 0x0d
    250c:	93 fd       	sbrc	r25, 3
    250e:	85 91       	lpm	r24, Z+
    2510:	93 ff       	sbrs	r25, 3
    2512:	81 91       	ld	r24, Z+
    2514:	fd 87       	std	Y+13, r31	; 0x0d
    2516:	ec 87       	std	Y+12, r30	; 0x0c
    2518:	88 23       	and	r24, r24
    251a:	09 f0       	breq	.+2      	; 0x251e <vfprintf+0x11e>
    251c:	b8 cf       	rjmp	.-144    	; 0x248e <vfprintf+0x8e>
    251e:	98 2f       	mov	r25, r24
    2520:	95 54       	subi	r25, 0x45	; 69
    2522:	93 30       	cpi	r25, 0x03	; 3
    2524:	18 f0       	brcs	.+6      	; 0x252c <vfprintf+0x12c>
    2526:	90 52       	subi	r25, 0x20	; 32
    2528:	93 30       	cpi	r25, 0x03	; 3
    252a:	38 f4       	brcc	.+14     	; 0x253a <vfprintf+0x13a>
    252c:	24 e0       	ldi	r18, 0x04	; 4
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	a2 0e       	add	r10, r18
    2532:	b3 1e       	adc	r11, r19
    2534:	3f e3       	ldi	r19, 0x3F	; 63
    2536:	39 83       	std	Y+1, r19	; 0x01
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <vfprintf+0x158>
    253a:	83 36       	cpi	r24, 0x63	; 99
    253c:	31 f0       	breq	.+12     	; 0x254a <vfprintf+0x14a>
    253e:	83 37       	cpi	r24, 0x73	; 115
    2540:	81 f0       	breq	.+32     	; 0x2562 <vfprintf+0x162>
    2542:	83 35       	cpi	r24, 0x53	; 83
    2544:	09 f0       	breq	.+2      	; 0x2548 <vfprintf+0x148>
    2546:	5a c0       	rjmp	.+180    	; 0x25fc <vfprintf+0x1fc>
    2548:	22 c0       	rjmp	.+68     	; 0x258e <vfprintf+0x18e>
    254a:	f5 01       	movw	r30, r10
    254c:	80 81       	ld	r24, Z
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	22 e0       	ldi	r18, 0x02	; 2
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	a2 0e       	add	r10, r18
    2556:	b3 1e       	adc	r11, r19
    2558:	21 e0       	ldi	r18, 0x01	; 1
    255a:	c2 2e       	mov	r12, r18
    255c:	d1 2c       	mov	r13, r1
    255e:	42 01       	movw	r8, r4
    2560:	14 c0       	rjmp	.+40     	; 0x258a <vfprintf+0x18a>
    2562:	92 e0       	ldi	r25, 0x02	; 2
    2564:	29 2e       	mov	r2, r25
    2566:	31 2c       	mov	r3, r1
    2568:	2a 0c       	add	r2, r10
    256a:	3b 1c       	adc	r3, r11
    256c:	f5 01       	movw	r30, r10
    256e:	80 80       	ld	r8, Z
    2570:	91 80       	ldd	r9, Z+1	; 0x01
    2572:	16 ff       	sbrs	r17, 6
    2574:	03 c0       	rjmp	.+6      	; 0x257c <vfprintf+0x17c>
    2576:	6f 2d       	mov	r22, r15
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <vfprintf+0x180>
    257c:	6f ef       	ldi	r22, 0xFF	; 255
    257e:	7f ef       	ldi	r23, 0xFF	; 255
    2580:	c4 01       	movw	r24, r8
    2582:	0e 94 12 14 	call	0x2824	; 0x2824 <strnlen>
    2586:	6c 01       	movw	r12, r24
    2588:	51 01       	movw	r10, r2
    258a:	1f 77       	andi	r17, 0x7F	; 127
    258c:	15 c0       	rjmp	.+42     	; 0x25b8 <vfprintf+0x1b8>
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	28 2e       	mov	r2, r24
    2592:	31 2c       	mov	r3, r1
    2594:	2a 0c       	add	r2, r10
    2596:	3b 1c       	adc	r3, r11
    2598:	f5 01       	movw	r30, r10
    259a:	80 80       	ld	r8, Z
    259c:	91 80       	ldd	r9, Z+1	; 0x01
    259e:	16 ff       	sbrs	r17, 6
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <vfprintf+0x1a8>
    25a2:	6f 2d       	mov	r22, r15
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <vfprintf+0x1ac>
    25a8:	6f ef       	ldi	r22, 0xFF	; 255
    25aa:	7f ef       	ldi	r23, 0xFF	; 255
    25ac:	c4 01       	movw	r24, r8
    25ae:	0e 94 07 14 	call	0x280e	; 0x280e <strnlen_P>
    25b2:	6c 01       	movw	r12, r24
    25b4:	10 68       	ori	r17, 0x80	; 128
    25b6:	51 01       	movw	r10, r2
    25b8:	13 fd       	sbrc	r17, 3
    25ba:	1c c0       	rjmp	.+56     	; 0x25f4 <vfprintf+0x1f4>
    25bc:	06 c0       	rjmp	.+12     	; 0x25ca <vfprintf+0x1ca>
    25be:	80 e2       	ldi	r24, 0x20	; 32
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	b3 01       	movw	r22, r6
    25c4:	0e 94 1d 14 	call	0x283a	; 0x283a <fputc>
    25c8:	ea 94       	dec	r14
    25ca:	8e 2d       	mov	r24, r14
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	c8 16       	cp	r12, r24
    25d0:	d9 06       	cpc	r13, r25
    25d2:	a8 f3       	brcs	.-22     	; 0x25be <vfprintf+0x1be>
    25d4:	0f c0       	rjmp	.+30     	; 0x25f4 <vfprintf+0x1f4>
    25d6:	f4 01       	movw	r30, r8
    25d8:	17 fd       	sbrc	r17, 7
    25da:	85 91       	lpm	r24, Z+
    25dc:	17 ff       	sbrs	r17, 7
    25de:	81 91       	ld	r24, Z+
    25e0:	4f 01       	movw	r8, r30
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	b3 01       	movw	r22, r6
    25e6:	0e 94 1d 14 	call	0x283a	; 0x283a <fputc>
    25ea:	e1 10       	cpse	r14, r1
    25ec:	ea 94       	dec	r14
    25ee:	08 94       	sec
    25f0:	c1 08       	sbc	r12, r1
    25f2:	d1 08       	sbc	r13, r1
    25f4:	c1 14       	cp	r12, r1
    25f6:	d1 04       	cpc	r13, r1
    25f8:	71 f7       	brne	.-36     	; 0x25d6 <vfprintf+0x1d6>
    25fa:	e7 c0       	rjmp	.+462    	; 0x27ca <vfprintf+0x3ca>
    25fc:	84 36       	cpi	r24, 0x64	; 100
    25fe:	11 f0       	breq	.+4      	; 0x2604 <vfprintf+0x204>
    2600:	89 36       	cpi	r24, 0x69	; 105
    2602:	51 f5       	brne	.+84     	; 0x2658 <vfprintf+0x258>
    2604:	f5 01       	movw	r30, r10
    2606:	17 ff       	sbrs	r17, 7
    2608:	07 c0       	rjmp	.+14     	; 0x2618 <vfprintf+0x218>
    260a:	80 81       	ld	r24, Z
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	a2 81       	ldd	r26, Z+2	; 0x02
    2610:	b3 81       	ldd	r27, Z+3	; 0x03
    2612:	24 e0       	ldi	r18, 0x04	; 4
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	08 c0       	rjmp	.+16     	; 0x2628 <vfprintf+0x228>
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	aa 27       	eor	r26, r26
    261e:	97 fd       	sbrc	r25, 7
    2620:	a0 95       	com	r26
    2622:	ba 2f       	mov	r27, r26
    2624:	22 e0       	ldi	r18, 0x02	; 2
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	a2 0e       	add	r10, r18
    262a:	b3 1e       	adc	r11, r19
    262c:	01 2f       	mov	r16, r17
    262e:	0f 76       	andi	r16, 0x6F	; 111
    2630:	b7 ff       	sbrs	r27, 7
    2632:	08 c0       	rjmp	.+16     	; 0x2644 <vfprintf+0x244>
    2634:	b0 95       	com	r27
    2636:	a0 95       	com	r26
    2638:	90 95       	com	r25
    263a:	81 95       	neg	r24
    263c:	9f 4f       	sbci	r25, 0xFF	; 255
    263e:	af 4f       	sbci	r26, 0xFF	; 255
    2640:	bf 4f       	sbci	r27, 0xFF	; 255
    2642:	00 68       	ori	r16, 0x80	; 128
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	a2 01       	movw	r20, r4
    264a:	2a e0       	ldi	r18, 0x0A	; 10
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	0e 94 49 14 	call	0x2892	; 0x2892 <__ultoa_invert>
    2652:	d8 2e       	mov	r13, r24
    2654:	d4 18       	sub	r13, r4
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <vfprintf+0x2d6>
    2658:	85 37       	cpi	r24, 0x75	; 117
    265a:	21 f4       	brne	.+8      	; 0x2664 <vfprintf+0x264>
    265c:	1f 7e       	andi	r17, 0xEF	; 239
    265e:	2a e0       	ldi	r18, 0x0A	; 10
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	20 c0       	rjmp	.+64     	; 0x26a4 <vfprintf+0x2a4>
    2664:	19 7f       	andi	r17, 0xF9	; 249
    2666:	8f 36       	cpi	r24, 0x6F	; 111
    2668:	a9 f0       	breq	.+42     	; 0x2694 <vfprintf+0x294>
    266a:	80 37       	cpi	r24, 0x70	; 112
    266c:	20 f4       	brcc	.+8      	; 0x2676 <vfprintf+0x276>
    266e:	88 35       	cpi	r24, 0x58	; 88
    2670:	09 f0       	breq	.+2      	; 0x2674 <vfprintf+0x274>
    2672:	ae c0       	rjmp	.+348    	; 0x27d0 <vfprintf+0x3d0>
    2674:	0b c0       	rjmp	.+22     	; 0x268c <vfprintf+0x28c>
    2676:	80 37       	cpi	r24, 0x70	; 112
    2678:	21 f0       	breq	.+8      	; 0x2682 <vfprintf+0x282>
    267a:	88 37       	cpi	r24, 0x78	; 120
    267c:	09 f0       	breq	.+2      	; 0x2680 <vfprintf+0x280>
    267e:	a8 c0       	rjmp	.+336    	; 0x27d0 <vfprintf+0x3d0>
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <vfprintf+0x284>
    2682:	10 61       	ori	r17, 0x10	; 16
    2684:	14 ff       	sbrs	r17, 4
    2686:	09 c0       	rjmp	.+18     	; 0x269a <vfprintf+0x29a>
    2688:	14 60       	ori	r17, 0x04	; 4
    268a:	07 c0       	rjmp	.+14     	; 0x269a <vfprintf+0x29a>
    268c:	14 ff       	sbrs	r17, 4
    268e:	08 c0       	rjmp	.+16     	; 0x26a0 <vfprintf+0x2a0>
    2690:	16 60       	ori	r17, 0x06	; 6
    2692:	06 c0       	rjmp	.+12     	; 0x26a0 <vfprintf+0x2a0>
    2694:	28 e0       	ldi	r18, 0x08	; 8
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	05 c0       	rjmp	.+10     	; 0x26a4 <vfprintf+0x2a4>
    269a:	20 e1       	ldi	r18, 0x10	; 16
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	02 c0       	rjmp	.+4      	; 0x26a4 <vfprintf+0x2a4>
    26a0:	20 e1       	ldi	r18, 0x10	; 16
    26a2:	32 e0       	ldi	r19, 0x02	; 2
    26a4:	f5 01       	movw	r30, r10
    26a6:	17 ff       	sbrs	r17, 7
    26a8:	07 c0       	rjmp	.+14     	; 0x26b8 <vfprintf+0x2b8>
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	44 e0       	ldi	r20, 0x04	; 4
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	06 c0       	rjmp	.+12     	; 0x26c4 <vfprintf+0x2c4>
    26b8:	60 81       	ld	r22, Z
    26ba:	71 81       	ldd	r23, Z+1	; 0x01
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	42 e0       	ldi	r20, 0x02	; 2
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	a4 0e       	add	r10, r20
    26c6:	b5 1e       	adc	r11, r21
    26c8:	a2 01       	movw	r20, r4
    26ca:	0e 94 49 14 	call	0x2892	; 0x2892 <__ultoa_invert>
    26ce:	d8 2e       	mov	r13, r24
    26d0:	d4 18       	sub	r13, r4
    26d2:	01 2f       	mov	r16, r17
    26d4:	0f 77       	andi	r16, 0x7F	; 127
    26d6:	06 ff       	sbrs	r16, 6
    26d8:	09 c0       	rjmp	.+18     	; 0x26ec <vfprintf+0x2ec>
    26da:	0e 7f       	andi	r16, 0xFE	; 254
    26dc:	df 14       	cp	r13, r15
    26de:	30 f4       	brcc	.+12     	; 0x26ec <vfprintf+0x2ec>
    26e0:	04 ff       	sbrs	r16, 4
    26e2:	06 c0       	rjmp	.+12     	; 0x26f0 <vfprintf+0x2f0>
    26e4:	02 fd       	sbrc	r16, 2
    26e6:	04 c0       	rjmp	.+8      	; 0x26f0 <vfprintf+0x2f0>
    26e8:	0f 7e       	andi	r16, 0xEF	; 239
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <vfprintf+0x2f0>
    26ec:	1d 2d       	mov	r17, r13
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <vfprintf+0x2f2>
    26f0:	1f 2d       	mov	r17, r15
    26f2:	80 2f       	mov	r24, r16
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	04 ff       	sbrs	r16, 4
    26f8:	0c c0       	rjmp	.+24     	; 0x2712 <vfprintf+0x312>
    26fa:	fe 01       	movw	r30, r28
    26fc:	ed 0d       	add	r30, r13
    26fe:	f1 1d       	adc	r31, r1
    2700:	20 81       	ld	r18, Z
    2702:	20 33       	cpi	r18, 0x30	; 48
    2704:	11 f4       	brne	.+4      	; 0x270a <vfprintf+0x30a>
    2706:	09 7e       	andi	r16, 0xE9	; 233
    2708:	09 c0       	rjmp	.+18     	; 0x271c <vfprintf+0x31c>
    270a:	02 ff       	sbrs	r16, 2
    270c:	06 c0       	rjmp	.+12     	; 0x271a <vfprintf+0x31a>
    270e:	1e 5f       	subi	r17, 0xFE	; 254
    2710:	05 c0       	rjmp	.+10     	; 0x271c <vfprintf+0x31c>
    2712:	86 78       	andi	r24, 0x86	; 134
    2714:	90 70       	andi	r25, 0x00	; 0
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	09 f0       	breq	.+2      	; 0x271c <vfprintf+0x31c>
    271a:	1f 5f       	subi	r17, 0xFF	; 255
    271c:	80 2e       	mov	r8, r16
    271e:	99 24       	eor	r9, r9
    2720:	03 fd       	sbrc	r16, 3
    2722:	12 c0       	rjmp	.+36     	; 0x2748 <vfprintf+0x348>
    2724:	00 ff       	sbrs	r16, 0
    2726:	0d c0       	rjmp	.+26     	; 0x2742 <vfprintf+0x342>
    2728:	fd 2c       	mov	r15, r13
    272a:	1e 15       	cp	r17, r14
    272c:	50 f4       	brcc	.+20     	; 0x2742 <vfprintf+0x342>
    272e:	fe 0c       	add	r15, r14
    2730:	f1 1a       	sub	r15, r17
    2732:	1e 2d       	mov	r17, r14
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <vfprintf+0x342>
    2736:	80 e2       	ldi	r24, 0x20	; 32
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	b3 01       	movw	r22, r6
    273c:	0e 94 1d 14 	call	0x283a	; 0x283a <fputc>
    2740:	1f 5f       	subi	r17, 0xFF	; 255
    2742:	1e 15       	cp	r17, r14
    2744:	c0 f3       	brcs	.-16     	; 0x2736 <vfprintf+0x336>
    2746:	04 c0       	rjmp	.+8      	; 0x2750 <vfprintf+0x350>
    2748:	1e 15       	cp	r17, r14
    274a:	10 f4       	brcc	.+4      	; 0x2750 <vfprintf+0x350>
    274c:	e1 1a       	sub	r14, r17
    274e:	01 c0       	rjmp	.+2      	; 0x2752 <vfprintf+0x352>
    2750:	ee 24       	eor	r14, r14
    2752:	84 fe       	sbrs	r8, 4
    2754:	0f c0       	rjmp	.+30     	; 0x2774 <vfprintf+0x374>
    2756:	80 e3       	ldi	r24, 0x30	; 48
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	b3 01       	movw	r22, r6
    275c:	0e 94 1d 14 	call	0x283a	; 0x283a <fputc>
    2760:	82 fe       	sbrs	r8, 2
    2762:	1f c0       	rjmp	.+62     	; 0x27a2 <vfprintf+0x3a2>
    2764:	81 fe       	sbrs	r8, 1
    2766:	03 c0       	rjmp	.+6      	; 0x276e <vfprintf+0x36e>
    2768:	88 e5       	ldi	r24, 0x58	; 88
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	10 c0       	rjmp	.+32     	; 0x278e <vfprintf+0x38e>
    276e:	88 e7       	ldi	r24, 0x78	; 120
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0d c0       	rjmp	.+26     	; 0x278e <vfprintf+0x38e>
    2774:	c4 01       	movw	r24, r8
    2776:	86 78       	andi	r24, 0x86	; 134
    2778:	90 70       	andi	r25, 0x00	; 0
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	91 f0       	breq	.+36     	; 0x27a2 <vfprintf+0x3a2>
    277e:	81 fc       	sbrc	r8, 1
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <vfprintf+0x386>
    2782:	80 e2       	ldi	r24, 0x20	; 32
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <vfprintf+0x388>
    2786:	8b e2       	ldi	r24, 0x2B	; 43
    2788:	07 fd       	sbrc	r16, 7
    278a:	8d e2       	ldi	r24, 0x2D	; 45
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	b3 01       	movw	r22, r6
    2790:	0e 94 1d 14 	call	0x283a	; 0x283a <fputc>
    2794:	06 c0       	rjmp	.+12     	; 0x27a2 <vfprintf+0x3a2>
    2796:	80 e3       	ldi	r24, 0x30	; 48
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	b3 01       	movw	r22, r6
    279c:	0e 94 1d 14 	call	0x283a	; 0x283a <fputc>
    27a0:	fa 94       	dec	r15
    27a2:	df 14       	cp	r13, r15
    27a4:	c0 f3       	brcs	.-16     	; 0x2796 <vfprintf+0x396>
    27a6:	da 94       	dec	r13
    27a8:	f2 01       	movw	r30, r4
    27aa:	ed 0d       	add	r30, r13
    27ac:	f1 1d       	adc	r31, r1
    27ae:	80 81       	ld	r24, Z
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	b3 01       	movw	r22, r6
    27b4:	0e 94 1d 14 	call	0x283a	; 0x283a <fputc>
    27b8:	dd 20       	and	r13, r13
    27ba:	a9 f7       	brne	.-22     	; 0x27a6 <vfprintf+0x3a6>
    27bc:	06 c0       	rjmp	.+12     	; 0x27ca <vfprintf+0x3ca>
    27be:	80 e2       	ldi	r24, 0x20	; 32
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	b3 01       	movw	r22, r6
    27c4:	0e 94 1d 14 	call	0x283a	; 0x283a <fputc>
    27c8:	ea 94       	dec	r14
    27ca:	ee 20       	and	r14, r14
    27cc:	c1 f7       	brne	.-16     	; 0x27be <vfprintf+0x3be>
    27ce:	40 ce       	rjmp	.-896    	; 0x2450 <vfprintf+0x50>
    27d0:	f3 01       	movw	r30, r6
    27d2:	86 81       	ldd	r24, Z+6	; 0x06
    27d4:	97 81       	ldd	r25, Z+7	; 0x07
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <vfprintf+0x3dc>
    27d8:	8f ef       	ldi	r24, 0xFF	; 255
    27da:	9f ef       	ldi	r25, 0xFF	; 255
    27dc:	2d 96       	adiw	r28, 0x0d	; 13
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	ff 90       	pop	r15
    27f2:	ef 90       	pop	r14
    27f4:	df 90       	pop	r13
    27f6:	cf 90       	pop	r12
    27f8:	bf 90       	pop	r11
    27fa:	af 90       	pop	r10
    27fc:	9f 90       	pop	r9
    27fe:	8f 90       	pop	r8
    2800:	7f 90       	pop	r7
    2802:	6f 90       	pop	r6
    2804:	5f 90       	pop	r5
    2806:	4f 90       	pop	r4
    2808:	3f 90       	pop	r3
    280a:	2f 90       	pop	r2
    280c:	08 95       	ret

0000280e <strnlen_P>:
    280e:	fc 01       	movw	r30, r24
    2810:	05 90       	lpm	r0, Z+
    2812:	61 50       	subi	r22, 0x01	; 1
    2814:	70 40       	sbci	r23, 0x00	; 0
    2816:	01 10       	cpse	r0, r1
    2818:	d8 f7       	brcc	.-10     	; 0x2810 <strnlen_P+0x2>
    281a:	80 95       	com	r24
    281c:	90 95       	com	r25
    281e:	8e 0f       	add	r24, r30
    2820:	9f 1f       	adc	r25, r31
    2822:	08 95       	ret

00002824 <strnlen>:
    2824:	fc 01       	movw	r30, r24
    2826:	61 50       	subi	r22, 0x01	; 1
    2828:	70 40       	sbci	r23, 0x00	; 0
    282a:	01 90       	ld	r0, Z+
    282c:	01 10       	cpse	r0, r1
    282e:	d8 f7       	brcc	.-10     	; 0x2826 <strnlen+0x2>
    2830:	80 95       	com	r24
    2832:	90 95       	com	r25
    2834:	8e 0f       	add	r24, r30
    2836:	9f 1f       	adc	r25, r31
    2838:	08 95       	ret

0000283a <fputc>:
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	8c 01       	movw	r16, r24
    2844:	eb 01       	movw	r28, r22
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	81 ff       	sbrs	r24, 1
    284a:	1b c0       	rjmp	.+54     	; 0x2882 <fputc+0x48>
    284c:	82 ff       	sbrs	r24, 2
    284e:	0d c0       	rjmp	.+26     	; 0x286a <fputc+0x30>
    2850:	2e 81       	ldd	r18, Y+6	; 0x06
    2852:	3f 81       	ldd	r19, Y+7	; 0x07
    2854:	8c 81       	ldd	r24, Y+4	; 0x04
    2856:	9d 81       	ldd	r25, Y+5	; 0x05
    2858:	28 17       	cp	r18, r24
    285a:	39 07       	cpc	r19, r25
    285c:	64 f4       	brge	.+24     	; 0x2876 <fputc+0x3c>
    285e:	e8 81       	ld	r30, Y
    2860:	f9 81       	ldd	r31, Y+1	; 0x01
    2862:	01 93       	st	Z+, r16
    2864:	f9 83       	std	Y+1, r31	; 0x01
    2866:	e8 83       	st	Y, r30
    2868:	06 c0       	rjmp	.+12     	; 0x2876 <fputc+0x3c>
    286a:	e8 85       	ldd	r30, Y+8	; 0x08
    286c:	f9 85       	ldd	r31, Y+9	; 0x09
    286e:	80 2f       	mov	r24, r16
    2870:	09 95       	icall
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	31 f4       	brne	.+12     	; 0x2882 <fputc+0x48>
    2876:	8e 81       	ldd	r24, Y+6	; 0x06
    2878:	9f 81       	ldd	r25, Y+7	; 0x07
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	9f 83       	std	Y+7, r25	; 0x07
    287e:	8e 83       	std	Y+6, r24	; 0x06
    2880:	02 c0       	rjmp	.+4      	; 0x2886 <fputc+0x4c>
    2882:	0f ef       	ldi	r16, 0xFF	; 255
    2884:	1f ef       	ldi	r17, 0xFF	; 255
    2886:	c8 01       	movw	r24, r16
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	08 95       	ret

00002892 <__ultoa_invert>:
    2892:	fa 01       	movw	r30, r20
    2894:	aa 27       	eor	r26, r26
    2896:	28 30       	cpi	r18, 0x08	; 8
    2898:	51 f1       	breq	.+84     	; 0x28ee <__ultoa_invert+0x5c>
    289a:	20 31       	cpi	r18, 0x10	; 16
    289c:	81 f1       	breq	.+96     	; 0x28fe <__ultoa_invert+0x6c>
    289e:	e8 94       	clt
    28a0:	6f 93       	push	r22
    28a2:	6e 7f       	andi	r22, 0xFE	; 254
    28a4:	6e 5f       	subi	r22, 0xFE	; 254
    28a6:	7f 4f       	sbci	r23, 0xFF	; 255
    28a8:	8f 4f       	sbci	r24, 0xFF	; 255
    28aa:	9f 4f       	sbci	r25, 0xFF	; 255
    28ac:	af 4f       	sbci	r26, 0xFF	; 255
    28ae:	b1 e0       	ldi	r27, 0x01	; 1
    28b0:	3e d0       	rcall	.+124    	; 0x292e <__ultoa_invert+0x9c>
    28b2:	b4 e0       	ldi	r27, 0x04	; 4
    28b4:	3c d0       	rcall	.+120    	; 0x292e <__ultoa_invert+0x9c>
    28b6:	67 0f       	add	r22, r23
    28b8:	78 1f       	adc	r23, r24
    28ba:	89 1f       	adc	r24, r25
    28bc:	9a 1f       	adc	r25, r26
    28be:	a1 1d       	adc	r26, r1
    28c0:	68 0f       	add	r22, r24
    28c2:	79 1f       	adc	r23, r25
    28c4:	8a 1f       	adc	r24, r26
    28c6:	91 1d       	adc	r25, r1
    28c8:	a1 1d       	adc	r26, r1
    28ca:	6a 0f       	add	r22, r26
    28cc:	71 1d       	adc	r23, r1
    28ce:	81 1d       	adc	r24, r1
    28d0:	91 1d       	adc	r25, r1
    28d2:	a1 1d       	adc	r26, r1
    28d4:	20 d0       	rcall	.+64     	; 0x2916 <__ultoa_invert+0x84>
    28d6:	09 f4       	brne	.+2      	; 0x28da <__ultoa_invert+0x48>
    28d8:	68 94       	set
    28da:	3f 91       	pop	r19
    28dc:	2a e0       	ldi	r18, 0x0A	; 10
    28de:	26 9f       	mul	r18, r22
    28e0:	11 24       	eor	r1, r1
    28e2:	30 19       	sub	r19, r0
    28e4:	30 5d       	subi	r19, 0xD0	; 208
    28e6:	31 93       	st	Z+, r19
    28e8:	de f6       	brtc	.-74     	; 0x28a0 <__ultoa_invert+0xe>
    28ea:	cf 01       	movw	r24, r30
    28ec:	08 95       	ret
    28ee:	46 2f       	mov	r20, r22
    28f0:	47 70       	andi	r20, 0x07	; 7
    28f2:	40 5d       	subi	r20, 0xD0	; 208
    28f4:	41 93       	st	Z+, r20
    28f6:	b3 e0       	ldi	r27, 0x03	; 3
    28f8:	0f d0       	rcall	.+30     	; 0x2918 <__ultoa_invert+0x86>
    28fa:	c9 f7       	brne	.-14     	; 0x28ee <__ultoa_invert+0x5c>
    28fc:	f6 cf       	rjmp	.-20     	; 0x28ea <__ultoa_invert+0x58>
    28fe:	46 2f       	mov	r20, r22
    2900:	4f 70       	andi	r20, 0x0F	; 15
    2902:	40 5d       	subi	r20, 0xD0	; 208
    2904:	4a 33       	cpi	r20, 0x3A	; 58
    2906:	18 f0       	brcs	.+6      	; 0x290e <__ultoa_invert+0x7c>
    2908:	49 5d       	subi	r20, 0xD9	; 217
    290a:	31 fd       	sbrc	r19, 1
    290c:	40 52       	subi	r20, 0x20	; 32
    290e:	41 93       	st	Z+, r20
    2910:	02 d0       	rcall	.+4      	; 0x2916 <__ultoa_invert+0x84>
    2912:	a9 f7       	brne	.-22     	; 0x28fe <__ultoa_invert+0x6c>
    2914:	ea cf       	rjmp	.-44     	; 0x28ea <__ultoa_invert+0x58>
    2916:	b4 e0       	ldi	r27, 0x04	; 4
    2918:	a6 95       	lsr	r26
    291a:	97 95       	ror	r25
    291c:	87 95       	ror	r24
    291e:	77 95       	ror	r23
    2920:	67 95       	ror	r22
    2922:	ba 95       	dec	r27
    2924:	c9 f7       	brne	.-14     	; 0x2918 <__ultoa_invert+0x86>
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	61 05       	cpc	r22, r1
    292a:	71 05       	cpc	r23, r1
    292c:	08 95       	ret
    292e:	9b 01       	movw	r18, r22
    2930:	ac 01       	movw	r20, r24
    2932:	0a 2e       	mov	r0, r26
    2934:	06 94       	lsr	r0
    2936:	57 95       	ror	r21
    2938:	47 95       	ror	r20
    293a:	37 95       	ror	r19
    293c:	27 95       	ror	r18
    293e:	ba 95       	dec	r27
    2940:	c9 f7       	brne	.-14     	; 0x2934 <__ultoa_invert+0xa2>
    2942:	62 0f       	add	r22, r18
    2944:	73 1f       	adc	r23, r19
    2946:	84 1f       	adc	r24, r20
    2948:	95 1f       	adc	r25, r21
    294a:	a0 1d       	adc	r26, r0
    294c:	08 95       	ret

0000294e <_exit>:
    294e:	f8 94       	cli

00002950 <__stop_program>:
    2950:	ff cf       	rjmp	.-2      	; 0x2950 <__stop_program>
